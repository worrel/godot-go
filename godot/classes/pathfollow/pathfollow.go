//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package pathfollow

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/spatial"
)

/*
   This node takes its parent [Path], and returns the coordinates of a point within it, given a distance from the first vertex. It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.
*/
type PathFollow struct {
	spatial.Spatial
}

func (o *PathFollow) baseClass() string {
	return "PathFollow"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *PathFollow) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *PathFollow) getOwner() *C.godot_object {
	return o.owner
}

/*
   This method returns whether the position between two cached points (see [method set_cubic_interpolation]) is interpolated linearly, or cubicly.
*/
func (o *PathFollow) GetCubicInterpolation() bool {
	log.Println("Calling PathFollow.GetCubicInterpolation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_cubic_interpolation", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the X displacement this node has from its parent [Path].
*/
func (o *PathFollow) GetHOffset() float64 {
	log.Println("Calling PathFollow.GetHOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_h_offset", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the distance along the path in 3D units.
*/
func (o *PathFollow) GetOffset() float64 {
	log.Println("Calling PathFollow.GetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_offset", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the rotation mode. The constants below list which axes are allowed to rotate for each mode.
*/
func (o *PathFollow) GetRotationMode() int64 {
	log.Println("Calling PathFollow.GetRotationMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_rotation_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the distance along the path as a number in the range 0.0 (for the first vertex) to 1.0 (for the last).
*/
func (o *PathFollow) GetUnitOffset() float64 {
	log.Println("Calling PathFollow.GetUnitOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_unit_offset", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the Y displacement this node has from its parent [Path].
*/
func (o *PathFollow) GetVOffset() float64 {
	log.Println("Calling PathFollow.GetVOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_v_offset", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether this node wraps its offsets around, or truncates them to the path ends.
*/
func (o *PathFollow) HasLoop() bool {
	log.Println("Calling PathFollow.HasLoop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_loop", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   The points along the [Curve3D] of the [Path] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough. There are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations. This method controls whether the position between two cached points is interpolated linearly, or cubicly.
*/
func (o *PathFollow) SetCubicInterpolation(enable bool) {
	log.Println("Calling PathFollow.SetCubicInterpolation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_cubic_interpolation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Moves this node in the X axis. As this node's position will be set every time its offset is set, this allows many PathFollow to share the same curve (and thus the same movement pattern), yet not return the same position for a given path offset. A similar effect may be achieved moving the this node's descendants.
*/
func (o *PathFollow) SetHOffset(hOffset float64) {
	log.Println("Calling PathFollow.SetHOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(hOffset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_h_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If set, any offset outside the path's length (whether set by [method set_offset] or [method set_unit_offset] will wrap around, instead of stopping at the ends. Set it for cyclic paths.
*/
func (o *PathFollow) SetLoop(loop bool) {
	log.Println("Calling PathFollow.SetLoop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(loop)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_loop", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the distance from the first vertex, measured in 3D units along the path. This sets this node's position to a point within the path.
*/
func (o *PathFollow) SetOffset(offset float64) {
	log.Println("Calling PathFollow.SetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Allows or forbids rotation on one or more axes, per the constants below.
*/
func (o *PathFollow) SetRotationMode(rotationMode int64) {
	log.Println("Calling PathFollow.SetRotationMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rotationMode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_rotation_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.
*/
func (o *PathFollow) SetUnitOffset(unitOffset float64) {
	log.Println("Calling PathFollow.SetUnitOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(unitOffset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_unit_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Moves this node in the Y axis, for the same reasons of [method set_h_offset].
*/
func (o *PathFollow) SetVOffset(vOffset float64) {
	log.Println("Calling PathFollow.SetVOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(vOffset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_v_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   PathFollowImplementer is an interface for PathFollow objects.
*/
type PathFollowImplementer interface {
	class.Class
}
