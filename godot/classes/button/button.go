//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package button

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/basebutton"
)

/*
   Button is the standard themed button. It can contain text and an icon, and will display them according to the current [Theme].
*/
type Button struct {
	basebutton.BaseButton
}

func (o *Button) baseClass() string {
	return "Button"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Button) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Button) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *Button) GetButtonIcon() *Texture {
	log.Println("Calling Button.GetButtonIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_button_icon", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Button) GetClipText() bool {
	log.Println("Calling Button.GetClipText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_clip_text", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Button) GetText() string {
	log.Println("Calling Button.GetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_text", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Button) GetTextAlign() int64 {
	log.Println("Calling Button.GetTextAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_text_align", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Button) IsFlat() bool {
	log.Println("Calling Button.IsFlat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_flat", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Button) SetButtonIcon(texture *Texture) {
	log.Println("Calling Button.SetButtonIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_button_icon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Button) SetClipText(enabled bool) {
	log.Println("Calling Button.SetClipText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_clip_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Button) SetFlat(enabled bool) {
	log.Println("Calling Button.SetFlat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_flat", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Button) SetText(text string) {
	log.Println("Calling Button.SetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Button) SetTextAlign(align int64) {
	log.Println("Calling Button.SetTextAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(align)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_text_align", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ButtonImplementer is an interface for Button objects.
*/
type ButtonImplementer interface {
	class.Class
}
