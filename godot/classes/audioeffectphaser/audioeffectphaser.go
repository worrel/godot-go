//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package audioeffectphaser

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/audioeffect"
)

/*
   Combines phase-shifted signals with the original signal. The movement of the phase-shifted signals is controlled using a Low Frequency Oscillator.
*/
type AudioEffectPhaser struct {
	audioeffect.AudioEffect
}

func (o *AudioEffectPhaser) baseClass() string {
	return "AudioEffectPhaser"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *AudioEffectPhaser) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *AudioEffectPhaser) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *AudioEffectPhaser) GetDepth() float64 {
	log.Println("Calling AudioEffectPhaser.GetDepth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_depth", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectPhaser) GetFeedback() float64 {
	log.Println("Calling AudioEffectPhaser.GetFeedback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_feedback", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectPhaser) GetRangeMaxHz() float64 {
	log.Println("Calling AudioEffectPhaser.GetRangeMaxHz()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_range_max_hz", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectPhaser) GetRangeMinHz() float64 {
	log.Println("Calling AudioEffectPhaser.GetRangeMinHz()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_range_min_hz", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectPhaser) GetRateHz() float64 {
	log.Println("Calling AudioEffectPhaser.GetRateHz()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_rate_hz", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectPhaser) SetDepth(depth float64) {
	log.Println("Calling AudioEffectPhaser.SetDepth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(depth)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_depth", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectPhaser) SetFeedback(fbk float64) {
	log.Println("Calling AudioEffectPhaser.SetFeedback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(fbk)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_feedback", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectPhaser) SetRangeMaxHz(hz float64) {
	log.Println("Calling AudioEffectPhaser.SetRangeMaxHz()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(hz)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_range_max_hz", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectPhaser) SetRangeMinHz(hz float64) {
	log.Println("Calling AudioEffectPhaser.SetRangeMinHz()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(hz)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_range_min_hz", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectPhaser) SetRateHz(hz float64) {
	log.Println("Calling AudioEffectPhaser.SetRateHz()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(hz)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_rate_hz", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   AudioEffectPhaserImplementer is an interface for AudioEffectPhaser objects.
*/
type AudioEffectPhaserImplementer interface {
	class.Class
}
