//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package audiostreamplayer

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node"
)

/*
   Plays background audio.
*/
type AudioStreamPlayer struct {
	node.Node
}

func (o *AudioStreamPlayer) baseClass() string {
	return "AudioStreamPlayer"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *AudioStreamPlayer) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *AudioStreamPlayer) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *AudioStreamPlayer) X_BusLayoutChanged() {
	log.Println("Calling AudioStreamPlayer.X_BusLayoutChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_bus_layout_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AudioStreamPlayer) X_IsActive() bool {
	log.Println("Calling AudioStreamPlayer.X_IsActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_is_active", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioStreamPlayer) X_SetPlaying(enable bool) {
	log.Println("Calling AudioStreamPlayer.X_SetPlaying()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_playing", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioStreamPlayer) GetBus() string {
	log.Println("Calling AudioStreamPlayer.GetBus()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bus", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioStreamPlayer) GetMixTarget() int64 {
	log.Println("Calling AudioStreamPlayer.GetMixTarget()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_mix_target", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the position in the [AudioStream].
*/
func (o *AudioStreamPlayer) GetPlaybackPosition() float64 {
	log.Println("Calling AudioStreamPlayer.GetPlaybackPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_playback_position", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioStreamPlayer) GetStream() *AudioStream {
	log.Println("Calling AudioStreamPlayer.GetStream()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_stream", goArguments, "*AudioStream")

	returnValue := goRet.Interface().(*AudioStream)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioStreamPlayer) GetVolumeDb() float64 {
	log.Println("Calling AudioStreamPlayer.GetVolumeDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_volume_db", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioStreamPlayer) IsAutoplayEnabled() bool {
	log.Println("Calling AudioStreamPlayer.IsAutoplayEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_autoplay_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioStreamPlayer) IsPlaying() bool {
	log.Println("Calling AudioStreamPlayer.IsPlaying()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_playing", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Plays the audio from the given position 'from_position', in seconds.
*/
func (o *AudioStreamPlayer) Play(fromPosition float64) {
	log.Println("Calling AudioStreamPlayer.Play()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(fromPosition)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "play", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the position from which audio will be played, in seconds.
*/
func (o *AudioStreamPlayer) Seek(toPosition float64) {
	log.Println("Calling AudioStreamPlayer.Seek()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(toPosition)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "seek", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioStreamPlayer) SetAutoplay(enable bool) {
	log.Println("Calling AudioStreamPlayer.SetAutoplay()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_autoplay", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioStreamPlayer) SetBus(bus string) {
	log.Println("Calling AudioStreamPlayer.SetBus()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bus)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bus", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioStreamPlayer) SetMixTarget(mixTarget int64) {
	log.Println("Calling AudioStreamPlayer.SetMixTarget()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mixTarget)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_mix_target", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioStreamPlayer) SetStream(stream *AudioStream) {
	log.Println("Calling AudioStreamPlayer.SetStream()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(stream)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_stream", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioStreamPlayer) SetVolumeDb(volumeDb float64) {
	log.Println("Calling AudioStreamPlayer.SetVolumeDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(volumeDb)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_volume_db", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Stops the audio.
*/
func (o *AudioStreamPlayer) Stop() {
	log.Println("Calling AudioStreamPlayer.Stop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "stop", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   AudioStreamPlayerImplementer is an interface for AudioStreamPlayer objects.
*/
type AudioStreamPlayerImplementer interface {
	class.Class
}
