//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package multimesh

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*
   MultiMesh provides low level mesh instancing. If the amount of [Mesh] instances needed goes from hundreds to thousands (and most need to be visible at close proximity) creating such a large amount of [MeshInstance] nodes may affect performance by using too much CPU or video memory. For this case a MultiMesh becomes very useful, as it can draw thousands of instances with little API overhead. As a drawback, if the instances are too far away of each other, performance may be reduced as every single instance will always rendered (they are spatially indexed as one, for the whole object). Since instances may have any behavior, the Rect3 used for visibility must be provided by the user.
*/
type MultiMesh struct {
	resource.Resource
}

func (o *MultiMesh) baseClass() string {
	return "MultiMesh"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *MultiMesh) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *MultiMesh) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *MultiMesh) X_GetColorArray() *PoolColorArray {
	log.Println("Calling MultiMesh.X_GetColorArray()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_color_array", goArguments, "*PoolColorArray")

	returnValue := goRet.Interface().(*PoolColorArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *MultiMesh) X_GetTransformArray() *PoolVector3Array {
	log.Println("Calling MultiMesh.X_GetTransformArray()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_transform_array", goArguments, "*PoolVector3Array")

	returnValue := goRet.Interface().(*PoolVector3Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *MultiMesh) X_SetColorArray(arg0 *PoolColorArray) {
	log.Println("Calling MultiMesh.X_SetColorArray()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_color_array", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *MultiMesh) X_SetTransformArray(arg0 *PoolVector3Array) {
	log.Println("Calling MultiMesh.X_SetTransformArray()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_transform_array", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the visibility Rect3.
*/
func (o *MultiMesh) GetAabb() *Rect3 {
	log.Println("Calling MultiMesh.GetAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_aabb", goArguments, "*Rect3")

	returnValue := goRet.Interface().(*Rect3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MultiMesh) GetColorFormat() int64 {
	log.Println("Calling MultiMesh.GetColorFormat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_color_format", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the color of a specific instance.
*/
func (o *MultiMesh) GetInstanceColor(instance int64) *Color {
	log.Println("Calling MultiMesh.GetInstanceColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(instance)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_instance_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the amount of instances that is going to be drawn.
*/
func (o *MultiMesh) GetInstanceCount() int64 {
	log.Println("Calling MultiMesh.GetInstanceCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_instance_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the transform of a specific instance.
*/
func (o *MultiMesh) GetInstanceTransform(instance int64) *Transform {
	log.Println("Calling MultiMesh.GetInstanceTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(instance)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_instance_transform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the [Mesh] resource drawn as multiple instances.
*/
func (o *MultiMesh) GetMesh() *Mesh {
	log.Println("Calling MultiMesh.GetMesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_mesh", goArguments, "*Mesh")

	returnValue := goRet.Interface().(*Mesh)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MultiMesh) GetTransformFormat() int64 {
	log.Println("Calling MultiMesh.GetTransformFormat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_transform_format", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MultiMesh) SetColorFormat(format int64) {
	log.Println("Calling MultiMesh.SetColorFormat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(format)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_color_format", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the color of a specific instance.
*/
func (o *MultiMesh) SetInstanceColor(instance int64, color *Color) {
	log.Println("Calling MultiMesh.SetInstanceColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_instance_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the amount of instances that is going to be drawn. Changing this number will erase all the existing instance transform and color data.
*/
func (o *MultiMesh) SetInstanceCount(count int64) {
	log.Println("Calling MultiMesh.SetInstanceCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(count)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_instance_count", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the transform for a specific instance.
*/
func (o *MultiMesh) SetInstanceTransform(instance int64, transform *Transform) {
	log.Println("Calling MultiMesh.SetInstanceTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_instance_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the [Mesh] resource to be drawn in multiple instances.
*/
func (o *MultiMesh) SetMesh(mesh *Mesh) {
	log.Println("Calling MultiMesh.SetMesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mesh)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_mesh", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MultiMesh) SetTransformFormat(format int64) {
	log.Println("Calling MultiMesh.SetTransformFormat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(format)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_transform_format", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   MultiMeshImplementer is an interface for MultiMesh objects.
*/
type MultiMeshImplementer interface {
	class.Class
}
