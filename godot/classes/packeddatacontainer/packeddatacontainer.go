//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package packeddatacontainer

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*

 */
type PackedDataContainer struct {
	resource.Resource
}

func (o *PackedDataContainer) baseClass() string {
	return "PackedDataContainer"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *PackedDataContainer) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *PackedDataContainer) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *PackedDataContainer) X_GetData() *PoolByteArray {
	log.Println("Calling PackedDataContainer.X_GetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_data", goArguments, "*PoolByteArray")

	returnValue := goRet.Interface().(*PoolByteArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PackedDataContainer) X_IterGet(arg0 *Variant) *Variant {
	log.Println("Calling PackedDataContainer.X_IterGet()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_iter_get", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PackedDataContainer) X_IterInit(arg0 *Array) *Variant {
	log.Println("Calling PackedDataContainer.X_IterInit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_iter_init", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PackedDataContainer) X_IterNext(arg0 *Array) *Variant {
	log.Println("Calling PackedDataContainer.X_IterNext()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_iter_next", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PackedDataContainer) X_SetData(arg0 *PoolByteArray) {
	log.Println("Calling PackedDataContainer.X_SetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *PackedDataContainer) Pack(value *Variant) int64 {
	log.Println("Calling PackedDataContainer.Pack()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "pack", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PackedDataContainer) Size() int64 {
	log.Println("Calling PackedDataContainer.Size()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "size", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   PackedDataContainerImplementer is an interface for PackedDataContainer objects.
*/
type PackedDataContainerImplementer interface {
	class.Class
}
