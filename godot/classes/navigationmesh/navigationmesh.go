//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package navigationmesh

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*

 */
type NavigationMesh struct {
	resource.Resource
}

func (o *NavigationMesh) baseClass() string {
	return "NavigationMesh"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *NavigationMesh) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *NavigationMesh) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *NavigationMesh) X_GetPolygons() *Array {
	log.Println("Calling NavigationMesh.X_GetPolygons()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_polygons", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *NavigationMesh) X_SetPolygons(polygons *Array) {
	log.Println("Calling NavigationMesh.X_SetPolygons()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(polygons)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_polygons", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) AddPolygon(polygon *PoolIntArray) {
	log.Println("Calling NavigationMesh.AddPolygon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(polygon)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_polygon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) ClearPolygons() {
	log.Println("Calling NavigationMesh.ClearPolygons()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_polygons", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) CreateFromMesh(mesh *Mesh) {
	log.Println("Calling NavigationMesh.CreateFromMesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mesh)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "create_from_mesh", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) GetAgentHeight() float64 {
	log.Println("Calling NavigationMesh.GetAgentHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_agent_height", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetAgentMaxClimb() float64 {
	log.Println("Calling NavigationMesh.GetAgentMaxClimb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_agent_max_climb", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetAgentMaxSlope() float64 {
	log.Println("Calling NavigationMesh.GetAgentMaxSlope()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_agent_max_slope", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetAgentRadius() float64 {
	log.Println("Calling NavigationMesh.GetAgentRadius()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_agent_radius", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetCellHeight() float64 {
	log.Println("Calling NavigationMesh.GetCellHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_cell_height", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetCellSize() float64 {
	log.Println("Calling NavigationMesh.GetCellSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_cell_size", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetDetailSampleDistance() float64 {
	log.Println("Calling NavigationMesh.GetDetailSampleDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_detail_sample_distance", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetDetailSampleMaxError() float64 {
	log.Println("Calling NavigationMesh.GetDetailSampleMaxError()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_detail_sample_max_error", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetEdgeMaxError() float64 {
	log.Println("Calling NavigationMesh.GetEdgeMaxError()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_edge_max_error", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetEdgeMaxLength() float64 {
	log.Println("Calling NavigationMesh.GetEdgeMaxLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_edge_max_length", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetFilterLedgeSpans() bool {
	log.Println("Calling NavigationMesh.GetFilterLedgeSpans()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_filter_ledge_spans", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetFilterLowHangingObstacles() bool {
	log.Println("Calling NavigationMesh.GetFilterLowHangingObstacles()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_filter_low_hanging_obstacles", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetFilterWalkableLowHeightSpans() bool {
	log.Println("Calling NavigationMesh.GetFilterWalkableLowHeightSpans()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_filter_walkable_low_height_spans", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetPolygon(idx int64) *PoolIntArray {
	log.Println("Calling NavigationMesh.GetPolygon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_polygon", goArguments, "*PoolIntArray")

	returnValue := goRet.Interface().(*PoolIntArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetPolygonCount() int64 {
	log.Println("Calling NavigationMesh.GetPolygonCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_polygon_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetRegionMergeSize() float64 {
	log.Println("Calling NavigationMesh.GetRegionMergeSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_region_merge_size", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetRegionMinSize() float64 {
	log.Println("Calling NavigationMesh.GetRegionMinSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_region_min_size", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetSamplePartitionType() int64 {
	log.Println("Calling NavigationMesh.GetSamplePartitionType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_sample_partition_type", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetVertices() *PoolVector3Array {
	log.Println("Calling NavigationMesh.GetVertices()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vertices", goArguments, "*PoolVector3Array")

	returnValue := goRet.Interface().(*PoolVector3Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) GetVertsPerPoly() float64 {
	log.Println("Calling NavigationMesh.GetVertsPerPoly()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_verts_per_poly", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NavigationMesh) SetAgentHeight(agentHeight float64) {
	log.Println("Calling NavigationMesh.SetAgentHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(agentHeight)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_agent_height", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetAgentMaxClimb(agentMaxClimb float64) {
	log.Println("Calling NavigationMesh.SetAgentMaxClimb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(agentMaxClimb)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_agent_max_climb", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetAgentMaxSlope(agentMaxSlope float64) {
	log.Println("Calling NavigationMesh.SetAgentMaxSlope()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(agentMaxSlope)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_agent_max_slope", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetAgentRadius(agentRadius float64) {
	log.Println("Calling NavigationMesh.SetAgentRadius()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(agentRadius)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_agent_radius", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetCellHeight(cellHeight float64) {
	log.Println("Calling NavigationMesh.SetCellHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(cellHeight)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_cell_height", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetCellSize(cellSize float64) {
	log.Println("Calling NavigationMesh.SetCellSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(cellSize)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_cell_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetDetailSampleDistance(detailSampleDist float64) {
	log.Println("Calling NavigationMesh.SetDetailSampleDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(detailSampleDist)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_detail_sample_distance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetDetailSampleMaxError(detailSampleMaxError float64) {
	log.Println("Calling NavigationMesh.SetDetailSampleMaxError()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(detailSampleMaxError)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_detail_sample_max_error", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetEdgeMaxError(edgeMaxError float64) {
	log.Println("Calling NavigationMesh.SetEdgeMaxError()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(edgeMaxError)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_edge_max_error", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetEdgeMaxLength(edgeMaxLength float64) {
	log.Println("Calling NavigationMesh.SetEdgeMaxLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(edgeMaxLength)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_edge_max_length", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetFilterLedgeSpans(filterLedgeSpans bool) {
	log.Println("Calling NavigationMesh.SetFilterLedgeSpans()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(filterLedgeSpans)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_filter_ledge_spans", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetFilterLowHangingObstacles(filterLowHangingObstacles bool) {
	log.Println("Calling NavigationMesh.SetFilterLowHangingObstacles()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(filterLowHangingObstacles)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_filter_low_hanging_obstacles", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetFilterWalkableLowHeightSpans(filterWalkableLowHeightSpans bool) {
	log.Println("Calling NavigationMesh.SetFilterWalkableLowHeightSpans()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(filterWalkableLowHeightSpans)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_filter_walkable_low_height_spans", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetRegionMergeSize(regionMergeSize float64) {
	log.Println("Calling NavigationMesh.SetRegionMergeSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(regionMergeSize)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_region_merge_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetRegionMinSize(regionMinSize float64) {
	log.Println("Calling NavigationMesh.SetRegionMinSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(regionMinSize)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_region_min_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetSamplePartitionType(samplePartitionType int64) {
	log.Println("Calling NavigationMesh.SetSamplePartitionType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(samplePartitionType)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_sample_partition_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetVertices(vertices *PoolVector3Array) {
	log.Println("Calling NavigationMesh.SetVertices()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(vertices)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_vertices", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NavigationMesh) SetVertsPerPoly(vertsPerPoly float64) {
	log.Println("Calling NavigationMesh.SetVertsPerPoly()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(vertsPerPoly)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_verts_per_poly", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   NavigationMeshImplementer is an interface for NavigationMesh objects.
*/
type NavigationMeshImplementer interface {
	class.Class
}
