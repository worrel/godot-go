//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package giprobe

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/visualinstance"
)

/*

 */
type GIProbe struct {
	visualinstance.VisualInstance
}

func (o *GIProbe) baseClass() string {
	return "GIProbe"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *GIProbe) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *GIProbe) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *GIProbe) Bake(fromNode *Object, createVisualDebug bool) {
	log.Println("Calling GIProbe.Bake()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(fromNode)
	goArguments[1] = reflect.ValueOf(createVisualDebug)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "bake", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbe) DebugBake() {
	log.Println("Calling GIProbe.DebugBake()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "debug_bake", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbe) GetBias() float64 {
	log.Println("Calling GIProbe.GetBias()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bias", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbe) GetDynamicRange() int64 {
	log.Println("Calling GIProbe.GetDynamicRange()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_dynamic_range", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbe) GetEnergy() float64 {
	log.Println("Calling GIProbe.GetEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_energy", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbe) GetExtents() *Vector3 {
	log.Println("Calling GIProbe.GetExtents()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_extents", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbe) GetNormalBias() float64 {
	log.Println("Calling GIProbe.GetNormalBias()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_normal_bias", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbe) GetProbeData() *GIProbeData {
	log.Println("Calling GIProbe.GetProbeData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_probe_data", goArguments, "*GIProbeData")

	returnValue := goRet.Interface().(*GIProbeData)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbe) GetPropagation() float64 {
	log.Println("Calling GIProbe.GetPropagation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_propagation", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbe) GetSubdiv() int64 {
	log.Println("Calling GIProbe.GetSubdiv()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_subdiv", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbe) IsCompressed() bool {
	log.Println("Calling GIProbe.IsCompressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_compressed", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbe) IsInterior() bool {
	log.Println("Calling GIProbe.IsInterior()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_interior", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbe) SetBias(max float64) {
	log.Println("Calling GIProbe.SetBias()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(max)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bias", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbe) SetCompress(enable bool) {
	log.Println("Calling GIProbe.SetCompress()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_compress", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbe) SetDynamicRange(max int64) {
	log.Println("Calling GIProbe.SetDynamicRange()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(max)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dynamic_range", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbe) SetEnergy(max float64) {
	log.Println("Calling GIProbe.SetEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(max)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_energy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbe) SetExtents(extents *Vector3) {
	log.Println("Calling GIProbe.SetExtents()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(extents)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_extents", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbe) SetInterior(enable bool) {
	log.Println("Calling GIProbe.SetInterior()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_interior", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbe) SetNormalBias(max float64) {
	log.Println("Calling GIProbe.SetNormalBias()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(max)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_normal_bias", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbe) SetProbeData(data *GIProbeData) {
	log.Println("Calling GIProbe.SetProbeData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_probe_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbe) SetPropagation(max float64) {
	log.Println("Calling GIProbe.SetPropagation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(max)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_propagation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbe) SetSubdiv(subdiv int64) {
	log.Println("Calling GIProbe.SetSubdiv()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(subdiv)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_subdiv", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   GIProbeImplementer is an interface for GIProbe objects.
*/
type GIProbeImplementer interface {
	class.Class
}
