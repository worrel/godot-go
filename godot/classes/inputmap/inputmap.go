//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package inputmap

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/object"
)

func newSingletonInputMap() *inputMap {
	obj := &inputMap{}
	ptr := C.godot_global_get_singleton(C.CString("InputMap"))
	obj.owner = (*C.godot_object)(ptr)
	return obj
}

/*

 */
var InputMap = newSingletonInputMap()

/*

 */
type inputMap struct {
	object.Object
}

func (o *inputMap) baseClass() string {
	return "InputMap"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *inputMap) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *inputMap) getOwner() *C.godot_object {
	return o.owner
}

/*
   Add an [InputEvent] to an action. This [InputEvent] will trigger the action.
*/
func (o *inputMap) ActionAddEvent(action string, event *InputEvent) {
	log.Println("Calling InputMap.ActionAddEvent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(action)
	goArguments[1] = reflect.ValueOf(event)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "action_add_event", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remove an [InputEvent] from an action.
*/
func (o *inputMap) ActionEraseEvent(action string, event *InputEvent) {
	log.Println("Calling InputMap.ActionEraseEvent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(action)
	goArguments[1] = reflect.ValueOf(event)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "action_erase_event", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Whether an action has an [InputEvent] associated with it.
*/
func (o *inputMap) ActionHasEvent(action string, event *InputEvent) bool {
	log.Println("Calling InputMap.ActionHasEvent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(action)
	goArguments[1] = reflect.ValueOf(event)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "action_has_event", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Add an (empty) action to the [InputMap]. An [InputEvent] can then be added to this action with [method action_add_event].
*/
func (o *inputMap) AddAction(action string) {
	log.Println("Calling InputMap.AddAction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(action)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_action", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remove an action from the [InputMap].
*/
func (o *inputMap) EraseAction(action string) {
	log.Println("Calling InputMap.EraseAction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(action)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "erase_action", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return whether the given event is part of an existing action. This method ignores keyboard modifiers if the given [InputEvent] is not pressed (for proper release detection). See [method action_has_event] if you don't want this behavior.
*/
func (o *inputMap) EventIsAction(event *InputEvent, action string) bool {
	log.Println("Calling InputMap.EventIsAction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(event)
	goArguments[1] = reflect.ValueOf(action)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "event_is_action", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return an array of InputEvents associated with a given action.
*/
func (o *inputMap) GetActionList(action string) *Array {
	log.Println("Calling InputMap.GetActionList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(action)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_action_list", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return an array of all actions in the [InputMap].
*/
func (o *inputMap) GetActions() *Array {
	log.Println("Calling InputMap.GetActions()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_actions", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Whether this InputMap has a registered action with the given name.
*/
func (o *inputMap) HasAction(action string) bool {
	log.Println("Calling InputMap.HasAction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(action)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_action", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Clear the [InputMap] and load it anew from [ProjectSettings].
*/
func (o *inputMap) LoadFromGlobals() {
	log.Println("Calling InputMap.LoadFromGlobals()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "load_from_globals", goArguments, "")

	log.Println("  Function successfully completed.")

}
