//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package physics2dshapequeryparameters

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/reference"
)

/*
   This class contains the shape and other parameters for intersection/collision queries.
*/
type Physics2DShapeQueryParameters struct {
	reference.Reference
}

func (o *Physics2DShapeQueryParameters) baseClass() string {
	return "Physics2DShapeQueryParameters"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Physics2DShapeQueryParameters) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Physics2DShapeQueryParameters) getOwner() *C.godot_object {
	return o.owner
}

/*
   Return the physics layer the shape belongs to.
*/
func (o *Physics2DShapeQueryParameters) GetCollisionLayer() int64 {
	log.Println("Calling Physics2DShapeQueryParameters.GetCollisionLayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_collision_layer", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the list of objects, or object [RID]\ s, that will be excluded from collisions.
*/
func (o *Physics2DShapeQueryParameters) GetExclude() *Array {
	log.Println("Calling Physics2DShapeQueryParameters.GetExclude()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_exclude", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the collision margin for the shape.
*/
func (o *Physics2DShapeQueryParameters) GetMargin() float64 {
	log.Println("Calling Physics2DShapeQueryParameters.GetMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_margin", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the current movement speed of the shape.
*/
func (o *Physics2DShapeQueryParameters) GetMotion() *Vector2 {
	log.Println("Calling Physics2DShapeQueryParameters.GetMotion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_motion", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the type of object the shape belongs to.
*/
func (o *Physics2DShapeQueryParameters) GetObjectTypeMask() int64 {
	log.Println("Calling Physics2DShapeQueryParameters.GetObjectTypeMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_object_type_mask", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the [RID] of the shape queried.
*/
func (o *Physics2DShapeQueryParameters) GetShapeRid() *RID {
	log.Println("Calling Physics2DShapeQueryParameters.GetShapeRid()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shape_rid", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the transform matrix of the shape queried.
*/
func (o *Physics2DShapeQueryParameters) GetTransform() *Transform2D {
	log.Println("Calling Physics2DShapeQueryParameters.GetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_transform", goArguments, "*Transform2D")

	returnValue := goRet.Interface().(*Transform2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the physics layer the shape belongs to.
*/
func (o *Physics2DShapeQueryParameters) SetCollisionLayer(collisionLayer int64) {
	log.Println("Calling Physics2DShapeQueryParameters.SetCollisionLayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(collisionLayer)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_collision_layer", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the list of objects, or object [RID]\ s, that will be excluded from collisions.
*/
func (o *Physics2DShapeQueryParameters) SetExclude(exclude *Array) {
	log.Println("Calling Physics2DShapeQueryParameters.SetExclude()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(exclude)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_exclude", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the collision margin for the shape. A collision margin is an amount (in pixels) that the shape will grow when computing collisions, to account for numerical imprecision.
*/
func (o *Physics2DShapeQueryParameters) SetMargin(margin float64) {
	log.Println("Calling Physics2DShapeQueryParameters.SetMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(margin)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_margin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the current movement speed of the shape.
*/
func (o *Physics2DShapeQueryParameters) SetMotion(motion *Vector2) {
	log.Println("Calling Physics2DShapeQueryParameters.SetMotion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(motion)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_motion", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the type of object the shape belongs to (see Physics2DDirectSpaceState.TYPE_MASK_*).
*/
func (o *Physics2DShapeQueryParameters) SetObjectTypeMask(objectTypeMask int64) {
	log.Println("Calling Physics2DShapeQueryParameters.SetObjectTypeMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(objectTypeMask)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_object_type_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the [Shape2D] that will be used for collision/intersection queries.
*/
func (o *Physics2DShapeQueryParameters) SetShape(shape *Resource) {
	log.Println("Calling Physics2DShapeQueryParameters.SetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shape)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the [RID] of the shape to be used in queries.
*/
func (o *Physics2DShapeQueryParameters) SetShapeRid(shape *RID) {
	log.Println("Calling Physics2DShapeQueryParameters.SetShapeRid()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shape)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shape_rid", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the transformation matrix of the shape. This is necessary to set its position/rotation/scale.
*/
func (o *Physics2DShapeQueryParameters) SetTransform(transform *Transform2D) {
	log.Println("Calling Physics2DShapeQueryParameters.SetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Physics2DShapeQueryParametersImplementer is an interface for Physics2DShapeQueryParameters objects.
*/
type Physics2DShapeQueryParametersImplementer interface {
	class.Class
}
