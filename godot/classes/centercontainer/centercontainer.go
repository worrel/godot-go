//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package centercontainer

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/container"
)

/*
   CenterContainer Keeps children controls centered. This container keeps all children to their minimum size, in the center.
*/
type CenterContainer struct {
	container.Container
}

func (o *CenterContainer) baseClass() string {
	return "CenterContainer"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *CenterContainer) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *CenterContainer) getOwner() *C.godot_object {
	return o.owner
}

/*
   Should put children to the top left corner instead of center of the container.
*/
func (o *CenterContainer) IsUsingTopLeft() bool {
	log.Println("Calling CenterContainer.IsUsingTopLeft()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_using_top_left", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   This function will anchor the container children to the top left corner of the the container boundaries, moving all its children to that position, (the children new center will be the top left corner of the container).
*/
func (o *CenterContainer) SetUseTopLeft(enable bool) {
	log.Println("Calling CenterContainer.SetUseTopLeft()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_use_top_left", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   CenterContainerImplementer is an interface for CenterContainer objects.
*/
type CenterContainerImplementer interface {
	class.Class
}
