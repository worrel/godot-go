//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package texturerect

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/control"
)

/*
   Use TextureRect to draw icons and sprites in your User Interfaces. To create panels and menu boxes, take a look at [NinePatchFrame]. Its Stretch Mode property controls the texture's scale and placement. It can scale, tile and stay centered inside its bounding rectangle. TextureRect is one of the 5 most common nodes to create game UI.
*/
type TextureRect struct {
	control.Control
}

func (o *TextureRect) baseClass() string {
	return "TextureRect"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *TextureRect) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *TextureRect) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *TextureRect) GetStretchMode() int64 {
	log.Println("Calling TextureRect.GetStretchMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_stretch_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextureRect) GetTexture() *Texture {
	log.Println("Calling TextureRect.GetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_texture", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextureRect) HasExpand() bool {
	log.Println("Calling TextureRect.HasExpand()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_expand", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextureRect) SetExpand(enable bool) {
	log.Println("Calling TextureRect.SetExpand()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_expand", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextureRect) SetStretchMode(stretchMode int64) {
	log.Println("Calling TextureRect.SetStretchMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(stretchMode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_stretch_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextureRect) SetTexture(texture *Texture) {
	log.Println("Calling TextureRect.SetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_texture", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   TextureRectImplementer is an interface for TextureRect objects.
*/
type TextureRectImplementer interface {
	class.Class
}
