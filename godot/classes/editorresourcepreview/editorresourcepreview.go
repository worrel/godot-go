//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package editorresourcepreview

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node"
)

/*
   This object is used to generate previews for resources of files.
*/
type EditorResourcePreview struct {
	node.Node
}

func (o *EditorResourcePreview) baseClass() string {
	return "EditorResourcePreview"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *EditorResourcePreview) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *EditorResourcePreview) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *EditorResourcePreview) X_PreviewReady(arg0 string, arg1 *Texture, arg2 int64, arg3 string, arg4 *Variant) {
	log.Println("Calling EditorResourcePreview.X_PreviewReady()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(arg0)
	goArguments[1] = reflect.ValueOf(arg1)
	goArguments[2] = reflect.ValueOf(arg2)
	goArguments[3] = reflect.ValueOf(arg3)
	goArguments[4] = reflect.ValueOf(arg4)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_preview_ready", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Create an own, custom preview generator.
*/
func (o *EditorResourcePreview) AddPreviewGenerator(generator *EditorResourcePreviewGenerator) {
	log.Println("Calling EditorResourcePreview.AddPreviewGenerator()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(generator)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_preview_generator", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Check if the resource changed, if so it will be invalidated and the corresponding signal emitted.
*/
func (o *EditorResourcePreview) CheckForInvalidation(path string) {
	log.Println("Calling EditorResourcePreview.CheckForInvalidation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "check_for_invalidation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Queue a resource being edited for preview (using an instance). Once the preview is ready, your receiver.receiver_func will be called either containing the preview texture or an empty texture (if no preview was possible). Callback must have the format: (path,texture,userdata). Userdata can be anything.
*/
func (o *EditorResourcePreview) QueueEditedResourcePreview(resource *Resource, receiver *Object, receiverFunc string, userdata *Variant) {
	log.Println("Calling EditorResourcePreview.QueueEditedResourcePreview()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(resource)
	goArguments[1] = reflect.ValueOf(receiver)
	goArguments[2] = reflect.ValueOf(receiverFunc)
	goArguments[3] = reflect.ValueOf(userdata)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "queue_edited_resource_preview", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Queue a resource file for preview (using a path). Once the preview is ready, your receiver.receiver_func will be called either containing the preview texture or an empty texture (if no preview was possible). Callback must have the format: (path,texture,userdata). Userdata can be anything.
*/
func (o *EditorResourcePreview) QueueResourcePreview(path string, receiver *Object, receiverFunc string, userdata *Variant) {
	log.Println("Calling EditorResourcePreview.QueueResourcePreview()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(path)
	goArguments[1] = reflect.ValueOf(receiver)
	goArguments[2] = reflect.ValueOf(receiverFunc)
	goArguments[3] = reflect.ValueOf(userdata)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "queue_resource_preview", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remove a custom preview generator.
*/
func (o *EditorResourcePreview) RemovePreviewGenerator(generator *EditorResourcePreviewGenerator) {
	log.Println("Calling EditorResourcePreview.RemovePreviewGenerator()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(generator)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_preview_generator", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   EditorResourcePreviewImplementer is an interface for EditorResourcePreview objects.
*/
type EditorResourcePreviewImplementer interface {
	class.Class
}
