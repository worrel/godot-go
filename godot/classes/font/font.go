//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package font

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*
   Font contains a unicode compatible character set, as well as the ability to draw it with variable width, ascent, descent and kerning. For creating fonts from TTF files (or other font formats), see the editor support for fonts. TODO check wikipedia for graph of ascent/baseline/descent/height/etc.
*/
type Font struct {
	resource.Resource
}

func (o *Font) baseClass() string {
	return "Font"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Font) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Font) getOwner() *C.godot_object {
	return o.owner
}

/*
   Draw "string" into a canvas item using the font at a given position, with "modulate" color, and optionally clipping the width. "position" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis.
*/
func (o *Font) Draw(canvasItem *RID, position *Vector2, string string, modulate *Color, clipW int64) {
	log.Println("Calling Font.Draw()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(canvasItem)
	goArguments[1] = reflect.ValueOf(position)
	goArguments[2] = reflect.ValueOf(string)
	goArguments[3] = reflect.ValueOf(modulate)
	goArguments[4] = reflect.ValueOf(clipW)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "draw", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Draw character "char" into a canvas item using the font at a given position, with "modulate" color, and optionally kerning if "next" is passed. clipping the width. "position" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis. The width used by the character is returned, making this function useful for drawing strings character by character.
*/
func (o *Font) DrawChar(canvasItem *RID, position *Vector2, char int64, next int64, modulate *Color) float64 {
	log.Println("Calling Font.DrawChar()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(canvasItem)
	goArguments[1] = reflect.ValueOf(position)
	goArguments[2] = reflect.ValueOf(char)
	goArguments[3] = reflect.ValueOf(next)
	goArguments[4] = reflect.ValueOf(modulate)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "draw_char", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the font ascent (number of pixels above the baseline).
*/
func (o *Font) GetAscent() float64 {
	log.Println("Calling Font.GetAscent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ascent", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the font descent (number of pixels below the baseline).
*/
func (o *Font) GetDescent() float64 {
	log.Println("Calling Font.GetDescent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_descent", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the total font height (ascent plus descent) in pixels.
*/
func (o *Font) GetHeight() float64 {
	log.Println("Calling Font.GetHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_height", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the size of a string, taking kerning and advance into account.
*/
func (o *Font) GetStringSize(string string) *Vector2 {
	log.Println("Calling Font.GetStringSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(string)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_string_size", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Font) IsDistanceFieldHint() bool {
	log.Println("Calling Font.IsDistanceFieldHint()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_distance_field_hint", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   After editing a font (changing size, ascent, char rects, etc.). Call this function to propagate changes to controls that might use it.
*/
func (o *Font) UpdateChanges() {
	log.Println("Calling Font.UpdateChanges()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "update_changes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   FontImplementer is an interface for Font objects.
*/
type FontImplementer interface {
	class.Class
}
