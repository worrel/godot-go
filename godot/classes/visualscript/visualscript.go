//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package visualscript

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/script"
)

/*
   A script implemented in the Visual Script programming environment. The script extends the functionality of all objects that instance it. [method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes. You are most likely to use this class via the Visual Script editor or when writing plugins for it.
*/
type VisualScript struct {
	script.Script
}

func (o *VisualScript) baseClass() string {
	return "VisualScript"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *VisualScript) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *VisualScript) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *VisualScript) X_GetData() *Dictionary {
	log.Println("Calling VisualScript.X_GetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_data", goArguments, "*Dictionary")

	returnValue := goRet.Interface().(*Dictionary)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) X_NodePortsChanged(arg0 int64) {
	log.Println("Calling VisualScript.X_NodePortsChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_node_ports_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) X_SetData(data *Dictionary) {
	log.Println("Calling VisualScript.X_SetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add a custom signal with the specified name to the VisualScript.
*/
func (o *VisualScript) AddCustomSignal(name string) {
	log.Println("Calling VisualScript.AddCustomSignal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_custom_signal", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add a function with the specified name to the VisualScript.
*/
func (o *VisualScript) AddFunction(name string) {
	log.Println("Calling VisualScript.AddFunction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_function", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add a node to a function of the VisualScript.
*/
func (o *VisualScript) AddNode(function string, id int64, node *VisualScriptNode, position *Vector2) {
	log.Println("Calling VisualScript.AddNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(id)
	goArguments[2] = reflect.ValueOf(node)
	goArguments[3] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_node", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add a variable to the VisualScript, optionally giving it a default value or marking it as exported.
*/
func (o *VisualScript) AddVariable(name string, defaultValue *Variant, export bool) {
	log.Println("Calling VisualScript.AddVariable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(defaultValue)
	goArguments[2] = reflect.ValueOf(export)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_variable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add an argument to a custom signal added with [method add_custom_signal].
*/
func (o *VisualScript) CustomSignalAddArgument(name string, aType int64, argname string, index int64) {
	log.Println("Calling VisualScript.CustomSignalAddArgument()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)
	goArguments[2] = reflect.ValueOf(argname)
	goArguments[3] = reflect.ValueOf(index)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "custom_signal_add_argument", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Get the count of a custom signal's arguments.
*/
func (o *VisualScript) CustomSignalGetArgumentCount(name string) int64 {
	log.Println("Calling VisualScript.CustomSignalGetArgumentCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "custom_signal_get_argument_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the name of a custom signal's argument.
*/
func (o *VisualScript) CustomSignalGetArgumentName(name string, argidx int64) string {
	log.Println("Calling VisualScript.CustomSignalGetArgumentName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(argidx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "custom_signal_get_argument_name", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the type of a custom signal's argument.
*/
func (o *VisualScript) CustomSignalGetArgumentType(name string, argidx int64) int64 {
	log.Println("Calling VisualScript.CustomSignalGetArgumentType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(argidx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "custom_signal_get_argument_type", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Remove a specific custom signal's argument.
*/
func (o *VisualScript) CustomSignalRemoveArgument(name string, argidx int64) {
	log.Println("Calling VisualScript.CustomSignalRemoveArgument()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(argidx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "custom_signal_remove_argument", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Rename a custom signal's argument.
*/
func (o *VisualScript) CustomSignalSetArgumentName(name string, argidx int64, argname string) {
	log.Println("Calling VisualScript.CustomSignalSetArgumentName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(argidx)
	goArguments[2] = reflect.ValueOf(argname)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "custom_signal_set_argument_name", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Change the type of a custom signal's argument.
*/
func (o *VisualScript) CustomSignalSetArgumentType(name string, argidx int64, aType int64) {
	log.Println("Calling VisualScript.CustomSignalSetArgumentType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(argidx)
	goArguments[2] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "custom_signal_set_argument_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Swap two of the arguments of a custom signal.
*/
func (o *VisualScript) CustomSignalSwapArgument(name string, argidx int64, withidx int64) {
	log.Println("Calling VisualScript.CustomSignalSwapArgument()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(argidx)
	goArguments[2] = reflect.ValueOf(withidx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "custom_signal_swap_argument", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Connect two data ports. The value of [code]from_node[/code]'s [code]from_port[/code] would be fed into [code]to_node[/code]'s [code]to_port[/code].
*/
func (o *VisualScript) DataConnect(function string, fromNode int64, fromPort int64, toNode int64, toPort int64) {
	log.Println("Calling VisualScript.DataConnect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(fromNode)
	goArguments[2] = reflect.ValueOf(fromPort)
	goArguments[3] = reflect.ValueOf(toNode)
	goArguments[4] = reflect.ValueOf(toPort)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "data_connect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Disconnect two data ports previously connected with [method data_connect].
*/
func (o *VisualScript) DataDisconnect(function string, fromNode int64, fromPort int64, toNode int64, toPort int64) {
	log.Println("Calling VisualScript.DataDisconnect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(fromNode)
	goArguments[2] = reflect.ValueOf(fromPort)
	goArguments[3] = reflect.ValueOf(toNode)
	goArguments[4] = reflect.ValueOf(toPort)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "data_disconnect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the id of a function's entry point node.
*/
func (o *VisualScript) GetFunctionNodeId(name string) int64 {
	log.Println("Calling VisualScript.GetFunctionNodeId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_function_node_id", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the position of the center of the screen for a given function.
*/
func (o *VisualScript) GetFunctionScroll(name string) *Vector2 {
	log.Println("Calling VisualScript.GetFunctionScroll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_function_scroll", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a node given its id and its function.
*/
func (o *VisualScript) GetNode(function string, id int64) *VisualScriptNode {
	log.Println("Calling VisualScript.GetNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_node", goArguments, "*VisualScriptNode")

	returnValue := goRet.Interface().(*VisualScriptNode)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a node's position in pixels.
*/
func (o *VisualScript) GetNodePosition(function string, id int64) *Vector2 {
	log.Println("Calling VisualScript.GetNodePosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_node_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the default (initial) value of a variable.
*/
func (o *VisualScript) GetVariableDefaultValue(name string) *Variant {
	log.Println("Calling VisualScript.GetVariableDefaultValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_variable_default_value", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether a variable is exported.
*/
func (o *VisualScript) GetVariableExport(name string) bool {
	log.Println("Calling VisualScript.GetVariableExport()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_variable_export", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the info for a given variable as a dictionary. The information includes its name, type, hint and usage.
*/
func (o *VisualScript) GetVariableInfo(name string) *Dictionary {
	log.Println("Calling VisualScript.GetVariableInfo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_variable_info", goArguments, "*Dictionary")

	returnValue := goRet.Interface().(*Dictionary)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether a signal exists with the specified name.
*/
func (o *VisualScript) HasCustomSignal(name string) bool {
	log.Println("Calling VisualScript.HasCustomSignal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_custom_signal", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether the specified data ports are connected.
*/
func (o *VisualScript) HasDataConnection(function string, fromNode int64, fromPort int64, toNode int64, toPort int64) bool {
	log.Println("Calling VisualScript.HasDataConnection()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(fromNode)
	goArguments[2] = reflect.ValueOf(fromPort)
	goArguments[3] = reflect.ValueOf(toNode)
	goArguments[4] = reflect.ValueOf(toPort)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_data_connection", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether a function exists with the specified name.
*/
func (o *VisualScript) HasFunction(name string) bool {
	log.Println("Calling VisualScript.HasFunction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_function", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether a node exists with the given id.
*/
func (o *VisualScript) HasNode(function string, id int64) bool {
	log.Println("Calling VisualScript.HasNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_node", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether the specified sequence ports are connected.
*/
func (o *VisualScript) HasSequenceConnection(function string, fromNode int64, fromOutput int64, toNode int64) bool {
	log.Println("Calling VisualScript.HasSequenceConnection()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(fromNode)
	goArguments[2] = reflect.ValueOf(fromOutput)
	goArguments[3] = reflect.ValueOf(toNode)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_sequence_connection", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether a variable exists with the specified name.
*/
func (o *VisualScript) HasVariable(name string) bool {
	log.Println("Calling VisualScript.HasVariable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_variable", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Remove a custom signal with the given name.
*/
func (o *VisualScript) RemoveCustomSignal(name string) {
	log.Println("Calling VisualScript.RemoveCustomSignal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_custom_signal", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remove a specific function and its nodes from the script.
*/
func (o *VisualScript) RemoveFunction(name string) {
	log.Println("Calling VisualScript.RemoveFunction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_function", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remove a specific node.
*/
func (o *VisualScript) RemoveNode(function string, id int64) {
	log.Println("Calling VisualScript.RemoveNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_node", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remove a variable with the given name.
*/
func (o *VisualScript) RemoveVariable(name string) {
	log.Println("Calling VisualScript.RemoveVariable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_variable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Change the name of a custom signal.
*/
func (o *VisualScript) RenameCustomSignal(name string, newName string) {
	log.Println("Calling VisualScript.RenameCustomSignal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(newName)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "rename_custom_signal", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Change the name of a function.
*/
func (o *VisualScript) RenameFunction(name string, newName string) {
	log.Println("Calling VisualScript.RenameFunction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(newName)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "rename_function", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Change the name of a variable.
*/
func (o *VisualScript) RenameVariable(name string, newName string) {
	log.Println("Calling VisualScript.RenameVariable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(newName)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "rename_variable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Connect two sequence ports. The execution will flow from of [code]from_node[/code]'s [code]from_output[/code] into [code]to_node[/code]. Unlike [method data_connect], there isn't a [code]to_port[/code], since the target node can have only one sequence port.
*/
func (o *VisualScript) SequenceConnect(function string, fromNode int64, fromOutput int64, toNode int64) {
	log.Println("Calling VisualScript.SequenceConnect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(fromNode)
	goArguments[2] = reflect.ValueOf(fromOutput)
	goArguments[3] = reflect.ValueOf(toNode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "sequence_connect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Disconnect two sequence ports previously connected with [method sequence_connect].
*/
func (o *VisualScript) SequenceDisconnect(function string, fromNode int64, fromOutput int64, toNode int64) {
	log.Println("Calling VisualScript.SequenceDisconnect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(fromNode)
	goArguments[2] = reflect.ValueOf(fromOutput)
	goArguments[3] = reflect.ValueOf(toNode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "sequence_disconnect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Position the center of the screen for a function.
*/
func (o *VisualScript) SetFunctionScroll(name string, ofs *Vector2) {
	log.Println("Calling VisualScript.SetFunctionScroll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(ofs)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_function_scroll", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the base type of the script.
*/
func (o *VisualScript) SetInstanceBaseType(aType string) {
	log.Println("Calling VisualScript.SetInstanceBaseType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_instance_base_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Position a node on the screen.
*/
func (o *VisualScript) SetNodePosition(function string, id int64, position *Vector2) {
	log.Println("Calling VisualScript.SetNodePosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(id)
	goArguments[2] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_node_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Change the default (initial) value of a variable.
*/
func (o *VisualScript) SetVariableDefaultValue(name string, value *Variant) {
	log.Println("Calling VisualScript.SetVariableDefaultValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_variable_default_value", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Change whether a variable is exported.
*/
func (o *VisualScript) SetVariableExport(name string, enable bool) {
	log.Println("Calling VisualScript.SetVariableExport()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_variable_export", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set a variable's info, using the same format as [method get_variable_info].
*/
func (o *VisualScript) SetVariableInfo(name string, value *Dictionary) {
	log.Println("Calling VisualScript.SetVariableInfo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_variable_info", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   VisualScriptImplementer is an interface for VisualScript objects.
*/
type VisualScriptImplementer interface {
	class.Class
}
