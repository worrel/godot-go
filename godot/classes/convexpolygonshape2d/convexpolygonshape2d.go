//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package convexpolygonshape2d

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/shape2d"
)

/*
   Convex Polygon Shape for 2D physics. A convex polygon, whatever its shape, is internally decomposed into as many convex polygons as needed to ensure all collision checks against it are always done on convex polygons (which are faster to check). The main difference between a [ConvexPolygonShape2D] and a [ConcavePolygonShape2D] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.
*/
type ConvexPolygonShape2D struct {
	shape2d.Shape2D
}

func (o *ConvexPolygonShape2D) baseClass() string {
	return "ConvexPolygonShape2D"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ConvexPolygonShape2D) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *ConvexPolygonShape2D) getOwner() *C.godot_object {
	return o.owner
}

/*
   Returns a list of points in either clockwise or counter clockwise order, forming a convex polygon.
*/
func (o *ConvexPolygonShape2D) GetPoints() *PoolVector2Array {
	log.Println("Calling ConvexPolygonShape2D.GetPoints()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_points", goArguments, "*PoolVector2Array")

	returnValue := goRet.Interface().(*PoolVector2Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Currently, this method does nothing.
*/
func (o *ConvexPolygonShape2D) SetPointCloud(pointCloud *PoolVector2Array) {
	log.Println("Calling ConvexPolygonShape2D.SetPointCloud()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pointCloud)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_point_cloud", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a list of points in either clockwise or counter clockwise order, forming a convex polygon.
*/
func (o *ConvexPolygonShape2D) SetPoints(points *PoolVector2Array) {
	log.Println("Calling ConvexPolygonShape2D.SetPoints()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(points)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_points", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ConvexPolygonShape2DImplementer is an interface for ConvexPolygonShape2D objects.
*/
type ConvexPolygonShape2DImplementer interface {
	class.Class
}
