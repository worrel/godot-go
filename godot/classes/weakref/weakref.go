//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package weakref

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/reference"
)

/*
   A weakref can hold a [Reference], without contributing to the reference counter. A weakref can be created from an [Object] using [method @GDScript.weakref]. If this object is not a reference, weakref still works, however, it does not have any effect on the object. Weakrefs are useful in cases where multiple classes have variables that refer to each other. Without weakrefs, using these classes could lead to memory leaks, since both references keep each other from being released. Making part of the variables a weakref can prevent this cyclic dependency, and allows the references to be released.
*/
type WeakRef struct {
	reference.Reference
}

func (o *WeakRef) baseClass() string {
	return "WeakRef"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *WeakRef) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *WeakRef) getOwner() *C.godot_object {
	return o.owner
}

/*
   Returns the [Object] this weakref is referring to.
*/
func (o *WeakRef) GetRef() *Variant {
	log.Println("Calling WeakRef.GetRef()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ref", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   WeakRefImplementer is an interface for WeakRef objects.
*/
type WeakRefImplementer interface {
	class.Class
}
