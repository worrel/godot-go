//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package giprobedata

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*

 */
type GIProbeData struct {
	resource.Resource
}

func (o *GIProbeData) baseClass() string {
	return "GIProbeData"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *GIProbeData) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *GIProbeData) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *GIProbeData) GetBias() float64 {
	log.Println("Calling GIProbeData.GetBias()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bias", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbeData) GetBounds() *Rect3 {
	log.Println("Calling GIProbeData.GetBounds()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bounds", goArguments, "*Rect3")

	returnValue := goRet.Interface().(*Rect3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbeData) GetCellSize() float64 {
	log.Println("Calling GIProbeData.GetCellSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_cell_size", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbeData) GetDynamicData() *PoolIntArray {
	log.Println("Calling GIProbeData.GetDynamicData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_dynamic_data", goArguments, "*PoolIntArray")

	returnValue := goRet.Interface().(*PoolIntArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbeData) GetDynamicRange() int64 {
	log.Println("Calling GIProbeData.GetDynamicRange()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_dynamic_range", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbeData) GetEnergy() float64 {
	log.Println("Calling GIProbeData.GetEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_energy", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbeData) GetNormalBias() float64 {
	log.Println("Calling GIProbeData.GetNormalBias()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_normal_bias", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbeData) GetPropagation() float64 {
	log.Println("Calling GIProbeData.GetPropagation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_propagation", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbeData) GetToCellXform() *Transform {
	log.Println("Calling GIProbeData.GetToCellXform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_to_cell_xform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbeData) IsCompressed() bool {
	log.Println("Calling GIProbeData.IsCompressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_compressed", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbeData) IsInterior() bool {
	log.Println("Calling GIProbeData.IsInterior()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_interior", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GIProbeData) SetBias(bias float64) {
	log.Println("Calling GIProbeData.SetBias()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bias)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bias", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbeData) SetBounds(bounds *Rect3) {
	log.Println("Calling GIProbeData.SetBounds()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bounds)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bounds", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbeData) SetCellSize(cellSize float64) {
	log.Println("Calling GIProbeData.SetCellSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(cellSize)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_cell_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbeData) SetCompress(compress bool) {
	log.Println("Calling GIProbeData.SetCompress()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(compress)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_compress", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbeData) SetDynamicData(dynamicData *PoolIntArray) {
	log.Println("Calling GIProbeData.SetDynamicData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(dynamicData)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dynamic_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbeData) SetDynamicRange(dynamicRange int64) {
	log.Println("Calling GIProbeData.SetDynamicRange()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(dynamicRange)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dynamic_range", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbeData) SetEnergy(energy float64) {
	log.Println("Calling GIProbeData.SetEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(energy)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_energy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbeData) SetInterior(interior bool) {
	log.Println("Calling GIProbeData.SetInterior()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(interior)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_interior", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbeData) SetNormalBias(bias float64) {
	log.Println("Calling GIProbeData.SetNormalBias()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bias)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_normal_bias", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbeData) SetPropagation(propagation float64) {
	log.Println("Calling GIProbeData.SetPropagation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(propagation)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_propagation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GIProbeData) SetToCellXform(toCellXform *Transform) {
	log.Println("Calling GIProbeData.SetToCellXform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(toCellXform)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_to_cell_xform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   GIProbeDataImplementer is an interface for GIProbeData objects.
*/
type GIProbeDataImplementer interface {
	class.Class
}
