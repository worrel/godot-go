//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package scrollbar

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/ranges"
)

/*
   Scrollbars are a [Range] based [Control], that display a draggable area (the size of the page). Horizontal ([HScrollBar]) and Vertical ([VScrollBar]) versions are available.
*/
type ScrollBar struct {
	ranges.Range
}

func (o *ScrollBar) baseClass() string {
	return "ScrollBar"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ScrollBar) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *ScrollBar) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *ScrollBar) X_DragSlaveExit() {
	log.Println("Calling ScrollBar.X_DragSlaveExit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_drag_slave_exit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ScrollBar) X_DragSlaveInput(arg0 *InputEvent) {
	log.Println("Calling ScrollBar.X_DragSlaveInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_drag_slave_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ScrollBar) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling ScrollBar.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ScrollBar) GetCustomStep() float64 {
	log.Println("Calling ScrollBar.GetCustomStep()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_custom_step", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ScrollBar) SetCustomStep(step float64) {
	log.Println("Calling ScrollBar.SetCustomStep()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(step)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_custom_step", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ScrollBarImplementer is an interface for ScrollBar objects.
*/
type ScrollBarImplementer interface {
	class.Class
}
