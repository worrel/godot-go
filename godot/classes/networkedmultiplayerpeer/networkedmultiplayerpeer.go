//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package networkedmultiplayerpeer

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/packetpeer"
)

/*

 */
type NetworkedMultiplayerPeer struct {
	packetpeer.PacketPeer
}

func (o *NetworkedMultiplayerPeer) baseClass() string {
	return "NetworkedMultiplayerPeer"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *NetworkedMultiplayerPeer) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *NetworkedMultiplayerPeer) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *NetworkedMultiplayerPeer) GetConnectionStatus() int64 {
	log.Println("Calling NetworkedMultiplayerPeer.GetConnectionStatus()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_connection_status", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NetworkedMultiplayerPeer) GetPacketPeer() int64 {
	log.Println("Calling NetworkedMultiplayerPeer.GetPacketPeer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_packet_peer", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NetworkedMultiplayerPeer) GetUniqueId() int64 {
	log.Println("Calling NetworkedMultiplayerPeer.GetUniqueId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_unique_id", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return whether this [NetworkedMultiplayerPeer] is refusing new connections.
*/
func (o *NetworkedMultiplayerPeer) IsRefusingNewConnections() bool {
	log.Println("Calling NetworkedMultiplayerPeer.IsRefusingNewConnections()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_refusing_new_connections", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NetworkedMultiplayerPeer) Poll() {
	log.Println("Calling NetworkedMultiplayerPeer.Poll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "poll", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]endable[/code] is true, this [NetworkedMultiplayerPeer] will refuse new connections.
*/
func (o *NetworkedMultiplayerPeer) SetRefuseNewConnections(enable bool) {
	log.Println("Calling NetworkedMultiplayerPeer.SetRefuseNewConnections()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_refuse_new_connections", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NetworkedMultiplayerPeer) SetTargetPeer(id int64) {
	log.Println("Calling NetworkedMultiplayerPeer.SetTargetPeer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_target_peer", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NetworkedMultiplayerPeer) SetTransferMode(mode int64) {
	log.Println("Calling NetworkedMultiplayerPeer.SetTransferMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_transfer_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   NetworkedMultiplayerPeerImplementer is an interface for NetworkedMultiplayerPeer objects.
*/
type NetworkedMultiplayerPeerImplementer interface {
	class.Class
}
