//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package gdfunctionstate

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/reference"
)

/*
   Calling [method @GDScript.yield] within a function will cause that function to yield and return its current state as an object of this type. The yielded function call can then be resumed later by calling [method resume] on this state object.
*/
type GDFunctionState struct {
	reference.Reference
}

func (o *GDFunctionState) baseClass() string {
	return "GDFunctionState"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *GDFunctionState) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *GDFunctionState) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *GDFunctionState) X_SignalCallback() *Variant {
	log.Println("Calling GDFunctionState.X_SignalCallback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_signal_callback", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Check whether the function call may be resumed. This is not the case if the function state was already resumed. If [code]extended_check[/code] is enabled, it also checks if the associated script and object still exist. The extended check is done in debug mode as part of [method GDFunctionState.resume], but you can use this if you know you may be trying to resume without knowing for sure the object and/or script have survived up to that point.
*/
func (o *GDFunctionState) IsValid(extendedCheck bool) bool {
	log.Println("Calling GDFunctionState.IsValid()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(extendedCheck)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_valid", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Resume execution of the yielded function call. If handed an argument, return the argument from the [method @GDScript.yield] call in the yielded function call. You can pass e.g. an [Array] to hand multiple arguments. This function returns what the resumed function call returns, possibly another function state if yielded again.
*/
func (o *GDFunctionState) Resume(arg *Variant) *Variant {
	log.Println("Calling GDFunctionState.Resume()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "resume", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   GDFunctionStateImplementer is an interface for GDFunctionState objects.
*/
type GDFunctionStateImplementer interface {
	class.Class
}
