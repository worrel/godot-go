//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package graphedit

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/control"
)

/*
   GraphEdit manages the showing of GraphNodes it contains, as well as connections and disconnections between them. Signals are sent for each of these two events. Disconnection between GraphNodes slots is disabled by default. It is greatly advised to enable low processor usage mode (see [method OS.set_low_processor_usage_mode]) when using GraphEdits.
*/
type GraphEdit struct {
	control.Control
}

func (o *GraphEdit) baseClass() string {
	return "GraphEdit"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *GraphEdit) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *GraphEdit) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *GraphEdit) X_ConnectionsLayerDraw() {
	log.Println("Calling GraphEdit.X_ConnectionsLayerDraw()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_connections_layer_draw", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_GraphNodeMoved(arg0 *Object) {
	log.Println("Calling GraphEdit.X_GraphNodeMoved()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_graph_node_moved", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_GraphNodeRaised(arg0 *Object) {
	log.Println("Calling GraphEdit.X_GraphNodeRaised()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_graph_node_raised", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling GraphEdit.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_ScrollMoved(arg0 float64) {
	log.Println("Calling GraphEdit.X_ScrollMoved()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_scroll_moved", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_SnapToggled() {
	log.Println("Calling GraphEdit.X_SnapToggled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_snap_toggled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_SnapValueChanged(arg0 float64) {
	log.Println("Calling GraphEdit.X_SnapValueChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_snap_value_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_TopLayerDraw() {
	log.Println("Calling GraphEdit.X_TopLayerDraw()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_top_layer_draw", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_TopLayerInput(arg0 *InputEvent) {
	log.Println("Calling GraphEdit.X_TopLayerInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_top_layer_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_UpdateScrollOffset() {
	log.Println("Calling GraphEdit.X_UpdateScrollOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_update_scroll_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_ZoomMinus() {
	log.Println("Calling GraphEdit.X_ZoomMinus()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_zoom_minus", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_ZoomPlus() {
	log.Println("Calling GraphEdit.X_ZoomPlus()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_zoom_plus", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_ZoomReset() {
	log.Println("Calling GraphEdit.X_ZoomReset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_zoom_reset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Create a connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode. If the connection already exists, no connection is created.
*/
func (o *GraphEdit) ConnectNode(from string, fromPort int64, to string, toPort int64) int64 {
	log.Println("Calling GraphEdit.ConnectNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(from)
	goArguments[1] = reflect.ValueOf(fromPort)
	goArguments[2] = reflect.ValueOf(to)
	goArguments[3] = reflect.ValueOf(toPort)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "connect_node", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Remove the connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode, if connection exists.
*/
func (o *GraphEdit) DisconnectNode(from string, fromPort int64, to string, toPort int64) {
	log.Println("Calling GraphEdit.DisconnectNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(from)
	goArguments[1] = reflect.ValueOf(fromPort)
	goArguments[2] = reflect.ValueOf(to)
	goArguments[3] = reflect.ValueOf(toPort)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "disconnect_node", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return an Array containing the list of connections. A connection consists in a structure of the form {from_slot: 0, from: "GraphNode name 0", to_slot: 1, to: "GraphNode name 1" }
*/
func (o *GraphEdit) GetConnectionList() *Array {
	log.Println("Calling GraphEdit.GetConnectionList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_connection_list", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the scroll offset.
*/
func (o *GraphEdit) GetScrollOfs() *Vector2 {
	log.Println("Calling GraphEdit.GetScrollOfs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_scroll_ofs", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GraphEdit) GetSnap() int64 {
	log.Println("Calling GraphEdit.GetSnap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_snap", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the current zoom value.
*/
func (o *GraphEdit) GetZoom() float64 {
	log.Println("Calling GraphEdit.GetZoom()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_zoom", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if the 'from_port' slot of 'from' GraphNode is connected to the 'to_port' slot of 'to' GraphNode.
*/
func (o *GraphEdit) IsNodeConnected(from string, fromPort int64, to string, toPort int64) bool {
	log.Println("Calling GraphEdit.IsNodeConnected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(from)
	goArguments[1] = reflect.ValueOf(fromPort)
	goArguments[2] = reflect.ValueOf(to)
	goArguments[3] = reflect.ValueOf(toPort)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_node_connected", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true is the disconnection of connections is enable in the visual GraphEdit. False otherwise.
*/
func (o *GraphEdit) IsRightDisconnectsEnabled() bool {
	log.Println("Calling GraphEdit.IsRightDisconnectsEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_right_disconnects_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GraphEdit) IsUsingSnap() bool {
	log.Println("Calling GraphEdit.IsUsingSnap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_using_snap", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Enable the disconnection of existing connections in the visual GraphEdit by left-clicking a connection and releasing into the void.
*/
func (o *GraphEdit) SetRightDisconnects(enable bool) {
	log.Println("Calling GraphEdit.SetRightDisconnects()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_right_disconnects", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GraphEdit) SetScrollOfs(ofs *Vector2) {
	log.Println("Calling GraphEdit.SetScrollOfs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ofs)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_scroll_ofs", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GraphEdit) SetSelected(node *Object) {
	log.Println("Calling GraphEdit.SetSelected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(node)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_selected", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GraphEdit) SetSnap(pixels int64) {
	log.Println("Calling GraphEdit.SetSnap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pixels)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_snap", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GraphEdit) SetUseSnap(enable bool) {
	log.Println("Calling GraphEdit.SetUseSnap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_use_snap", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the zoom value of the GraphEdit. Zoom value is between [0.01; 1.728].
*/
func (o *GraphEdit) SetZoom(pZoom float64) {
	log.Println("Calling GraphEdit.SetZoom()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pZoom)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_zoom", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   GraphEditImplementer is an interface for GraphEdit objects.
*/
type GraphEditImplementer interface {
	class.Class
}
