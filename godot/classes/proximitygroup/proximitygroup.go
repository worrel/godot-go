//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package proximitygroup

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/spatial"
)

/*
   General purpose proximity-detection node.
*/
type ProximityGroup struct {
	spatial.Spatial
}

func (o *ProximityGroup) baseClass() string {
	return "ProximityGroup"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ProximityGroup) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *ProximityGroup) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *ProximityGroup) X_ProximityGroupBroadcast(name string, params *Variant) {
	log.Println("Calling ProximityGroup.X_ProximityGroupBroadcast()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(params)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_proximity_group_broadcast", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ProximityGroup) Broadcast(name string, parameters *Variant) {
	log.Println("Calling ProximityGroup.Broadcast()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(parameters)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "broadcast", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ProximityGroup) GetGridRadius() *Vector3 {
	log.Println("Calling ProximityGroup.GetGridRadius()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_grid_radius", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ProximityGroup) SetDispatchMode(mode int64) {
	log.Println("Calling ProximityGroup.SetDispatchMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dispatch_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ProximityGroup) SetGridRadius(radius *Vector3) {
	log.Println("Calling ProximityGroup.SetGridRadius()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(radius)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_grid_radius", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ProximityGroup) SetGroupName(name string) {
	log.Println("Calling ProximityGroup.SetGroupName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_group_name", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ProximityGroupImplementer is an interface for ProximityGroup objects.
*/
type ProximityGroupImplementer interface {
	class.Class
}
