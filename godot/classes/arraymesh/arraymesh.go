//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package arraymesh

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/mesh"
)

/*

 */
type ArrayMesh struct {
	mesh.Mesh
}

func (o *ArrayMesh) baseClass() string {
	return "ArrayMesh"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ArrayMesh) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *ArrayMesh) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *ArrayMesh) AddBlendShape(name string) {
	log.Println("Calling ArrayMesh.AddBlendShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_blend_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Create a new surface ([method get_surface_count] that will become surf_idx for this. Surfaces are created to be rendered using a "primitive", which may be PRIMITIVE_POINTS, PRIMITIVE_LINES, PRIMITIVE_LINE_STRIP, PRIMITIVE_LINE_LOOP, PRIMITIVE_TRIANGLES, PRIMITIVE_TRIANGLE_STRIP, PRIMITIVE_TRIANGLE_FAN. (As a note, when using indices, it is recommended to only use just points, lines or triangles).
*/
func (o *ArrayMesh) AddSurfaceFromArrays(primitive int64, arrays *Array, blendShapes *Array, compressFlags int64) {
	log.Println("Calling ArrayMesh.AddSurfaceFromArrays()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(primitive)
	goArguments[1] = reflect.ValueOf(arrays)
	goArguments[2] = reflect.ValueOf(blendShapes)
	goArguments[3] = reflect.ValueOf(compressFlags)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_surface_from_arrays", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ArrayMesh) CenterGeometry() {
	log.Println("Calling ArrayMesh.CenterGeometry()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "center_geometry", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ArrayMesh) ClearBlendShapes() {
	log.Println("Calling ArrayMesh.ClearBlendShapes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_blend_shapes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ArrayMesh) GetBlendShapeCount() int64 {
	log.Println("Calling ArrayMesh.GetBlendShapeCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_blend_shape_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ArrayMesh) GetBlendShapeMode() int64 {
	log.Println("Calling ArrayMesh.GetBlendShapeMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_blend_shape_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ArrayMesh) GetBlendShapeName(index int64) string {
	log.Println("Calling ArrayMesh.GetBlendShapeName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(index)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_blend_shape_name", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ArrayMesh) GetCustomAabb() *Rect3 {
	log.Println("Calling ArrayMesh.GetCustomAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_custom_aabb", goArguments, "*Rect3")

	returnValue := goRet.Interface().(*Rect3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the amount of surfaces that the [ArrayMesh] holds.
*/
func (o *ArrayMesh) GetSurfaceCount() int64 {
	log.Println("Calling ArrayMesh.GetSurfaceCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_surface_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ArrayMesh) RegenNormalmaps() {
	log.Println("Calling ArrayMesh.RegenNormalmaps()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "regen_normalmaps", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ArrayMesh) SetBlendShapeMode(mode int64) {
	log.Println("Calling ArrayMesh.SetBlendShapeMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_blend_shape_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ArrayMesh) SetCustomAabb(aabb *Rect3) {
	log.Println("Calling ArrayMesh.SetCustomAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aabb)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_custom_aabb", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the length in indices of the index array in the requested surface (see [method add_surface]).
*/
func (o *ArrayMesh) SurfaceGetArrayIndexLen(surfIdx int64) int64 {
	log.Println("Calling ArrayMesh.SurfaceGetArrayIndexLen()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "surface_get_array_index_len", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the length in vertices of the vertex array in the requested surface (see [method add_surface]).
*/
func (o *ArrayMesh) SurfaceGetArrayLen(surfIdx int64) int64 {
	log.Println("Calling ArrayMesh.SurfaceGetArrayLen()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "surface_get_array_len", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ArrayMesh) SurfaceGetArrays(surfIdx int64) *Array {
	log.Println("Calling ArrayMesh.SurfaceGetArrays()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "surface_get_arrays", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ArrayMesh) SurfaceGetBlendShapeArrays(surfIdx int64) *Array {
	log.Println("Calling ArrayMesh.SurfaceGetBlendShapeArrays()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "surface_get_blend_shape_arrays", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the format mask of the requested surface (see [method add_surface]).
*/
func (o *ArrayMesh) SurfaceGetFormat(surfIdx int64) int64 {
	log.Println("Calling ArrayMesh.SurfaceGetFormat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "surface_get_format", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return a [Material] in a given surface. Surface is rendered using this material.
*/
func (o *ArrayMesh) SurfaceGetMaterial(surfIdx int64) *Material {
	log.Println("Calling ArrayMesh.SurfaceGetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "surface_get_material", goArguments, "*Material")

	returnValue := goRet.Interface().(*Material)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ArrayMesh) SurfaceGetName(surfIdx int64) string {
	log.Println("Calling ArrayMesh.SurfaceGetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "surface_get_name", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the primitive type of the requested surface (see [method add_surface]).
*/
func (o *ArrayMesh) SurfaceGetPrimitiveType(surfIdx int64) int64 {
	log.Println("Calling ArrayMesh.SurfaceGetPrimitiveType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "surface_get_primitive_type", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Remove a surface at position surf_idx, shifting greater surfaces one surf_idx slot down.
*/
func (o *ArrayMesh) SurfaceRemove(surfIdx int64) {
	log.Println("Calling ArrayMesh.SurfaceRemove()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "surface_remove", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ArrayMesh) SurfaceSetMaterial(surfIdx int64, material *Material) {
	log.Println("Calling ArrayMesh.SurfaceSetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(surfIdx)
	goArguments[1] = reflect.ValueOf(material)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "surface_set_material", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set a [Material] for a given surface. Surface will be rendered using this material.
*/
func (o *ArrayMesh) SurfaceSetName(surfIdx int64, name string) {
	log.Println("Calling ArrayMesh.SurfaceSetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(surfIdx)
	goArguments[1] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "surface_set_name", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ArrayMeshImplementer is an interface for ArrayMesh objects.
*/
type ArrayMeshImplementer interface {
	class.Class
}
