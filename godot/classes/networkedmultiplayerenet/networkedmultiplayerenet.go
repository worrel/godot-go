//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package networkedmultiplayerenet

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/networkedmultiplayerpeer"
)

/*
   A connection (or a listening server) that should be passed to [method SceneTree.set_network_peer]. Socket events can be handled by connecting to [SceneTree] signals.
*/
type NetworkedMultiplayerENet struct {
	networkedmultiplayerpeer.NetworkedMultiplayerPeer
}

func (o *NetworkedMultiplayerENet) baseClass() string {
	return "NetworkedMultiplayerENet"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *NetworkedMultiplayerENet) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *NetworkedMultiplayerENet) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *NetworkedMultiplayerENet) CloseConnection() {
	log.Println("Calling NetworkedMultiplayerENet.CloseConnection()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "close_connection", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Create client that connects to a server at address [code]ip[/code] using specified [code]port[/code].
*/
func (o *NetworkedMultiplayerENet) CreateClient(ip string, port int64, inBandwidth int64, outBandwidth int64) int64 {
	log.Println("Calling NetworkedMultiplayerENet.CreateClient()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(ip)
	goArguments[1] = reflect.ValueOf(port)
	goArguments[2] = reflect.ValueOf(inBandwidth)
	goArguments[3] = reflect.ValueOf(outBandwidth)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "create_client", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Create server that listens to connections via [code]port[/code].
*/
func (o *NetworkedMultiplayerENet) CreateServer(port int64, maxClients int64, inBandwidth int64, outBandwidth int64) int64 {
	log.Println("Calling NetworkedMultiplayerENet.CreateServer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(port)
	goArguments[1] = reflect.ValueOf(maxClients)
	goArguments[2] = reflect.ValueOf(inBandwidth)
	goArguments[3] = reflect.ValueOf(outBandwidth)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "create_server", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NetworkedMultiplayerENet) GetCompressionMode() int64 {
	log.Println("Calling NetworkedMultiplayerENet.GetCompressionMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_compression_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *NetworkedMultiplayerENet) SetBindIp(ip string) {
	log.Println("Calling NetworkedMultiplayerENet.SetBindIp()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ip)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bind_ip", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *NetworkedMultiplayerENet) SetCompressionMode(mode int64) {
	log.Println("Calling NetworkedMultiplayerENet.SetCompressionMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_compression_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   NetworkedMultiplayerENetImplementer is an interface for NetworkedMultiplayerENet objects.
*/
type NetworkedMultiplayerENetImplementer interface {
	class.Class
}
