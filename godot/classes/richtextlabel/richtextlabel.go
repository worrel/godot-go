//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package richtextlabel

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/control"
)

/*
   Label that displays rich text. Rich text can contain custom text, fonts, images and some basic formatting. It also adapts itself to given width/heights.
*/
type RichTextLabel struct {
	control.Control
}

func (o *RichTextLabel) baseClass() string {
	return "RichTextLabel"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *RichTextLabel) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *RichTextLabel) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *RichTextLabel) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling RichTextLabel.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *RichTextLabel) X_ScrollChanged(arg0 float64) {
	log.Println("Calling RichTextLabel.X_ScrollChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_scroll_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) AddImage(image *Texture) {
	log.Println("Calling RichTextLabel.AddImage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(image)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_image", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) AddText(text string) {
	log.Println("Calling RichTextLabel.AddText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) AppendBbcode(bbcode string) int64 {
	log.Println("Calling RichTextLabel.AppendBbcode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bbcode)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "append_bbcode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RichTextLabel) Clear() {
	log.Println("Calling RichTextLabel.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) GetBbcode() string {
	log.Println("Calling RichTextLabel.GetBbcode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bbcode", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RichTextLabel) GetLineCount() int64 {
	log.Println("Calling RichTextLabel.GetLineCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_line_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RichTextLabel) GetPercentVisible() float64 {
	log.Println("Calling RichTextLabel.GetPercentVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_percent_visible", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RichTextLabel) GetTabSize() int64 {
	log.Println("Calling RichTextLabel.GetTabSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tab_size", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the raw text, stripping out the formatting information.
*/
func (o *RichTextLabel) GetText() string {
	log.Println("Calling RichTextLabel.GetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_text", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RichTextLabel) GetTotalCharacterCount() int64 {
	log.Println("Calling RichTextLabel.GetTotalCharacterCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_total_character_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RichTextLabel) GetVScroll() *VScrollBar {
	log.Println("Calling RichTextLabel.GetVScroll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_v_scroll", goArguments, "*VScrollBar")

	returnValue := goRet.Interface().(*VScrollBar)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RichTextLabel) GetVisibleCharacters() int64 {
	log.Println("Calling RichTextLabel.GetVisibleCharacters()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_visible_characters", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RichTextLabel) GetVisibleLineCount() int64 {
	log.Println("Calling RichTextLabel.GetVisibleLineCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_visible_line_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RichTextLabel) IsMetaUnderlined() bool {
	log.Println("Calling RichTextLabel.IsMetaUnderlined()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_meta_underlined", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RichTextLabel) IsScrollActive() bool {
	log.Println("Calling RichTextLabel.IsScrollActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_scroll_active", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RichTextLabel) IsScrollFollowing() bool {
	log.Println("Calling RichTextLabel.IsScrollFollowing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_scroll_following", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if selecting the text inside this richtext is allowed.
*/
func (o *RichTextLabel) IsSelectionEnabled() bool {
	log.Println("Calling RichTextLabel.IsSelectionEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_selection_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RichTextLabel) IsUsingBbcode() bool {
	log.Println("Calling RichTextLabel.IsUsingBbcode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_using_bbcode", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RichTextLabel) Newline() {
	log.Println("Calling RichTextLabel.Newline()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "newline", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) ParseBbcode(bbcode string) int64 {
	log.Println("Calling RichTextLabel.ParseBbcode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bbcode)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "parse_bbcode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RichTextLabel) Pop() {
	log.Println("Calling RichTextLabel.Pop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "pop", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) PushAlign(align int64) {
	log.Println("Calling RichTextLabel.PushAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(align)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "push_align", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) PushCell() {
	log.Println("Calling RichTextLabel.PushCell()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "push_cell", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) PushColor(color *Color) {
	log.Println("Calling RichTextLabel.PushColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "push_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) PushFont(font *Font) {
	log.Println("Calling RichTextLabel.PushFont()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(font)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "push_font", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) PushIndent(level int64) {
	log.Println("Calling RichTextLabel.PushIndent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(level)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "push_indent", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) PushList(aType int64) {
	log.Println("Calling RichTextLabel.PushList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "push_list", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) PushMeta(data *Variant) {
	log.Println("Calling RichTextLabel.PushMeta()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "push_meta", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) PushTable(columns int64) {
	log.Println("Calling RichTextLabel.PushTable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(columns)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "push_table", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) PushUnderline() {
	log.Println("Calling RichTextLabel.PushUnderline()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "push_underline", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) RemoveLine(line int64) bool {
	log.Println("Calling RichTextLabel.RemoveLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(line)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "remove_line", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RichTextLabel) ScrollToLine(line int64) {
	log.Println("Calling RichTextLabel.ScrollToLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(line)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "scroll_to_line", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) SetBbcode(text string) {
	log.Println("Calling RichTextLabel.SetBbcode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bbcode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) SetMetaUnderline(enable bool) {
	log.Println("Calling RichTextLabel.SetMetaUnderline()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_meta_underline", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) SetPercentVisible(percentVisible float64) {
	log.Println("Calling RichTextLabel.SetPercentVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(percentVisible)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_percent_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) SetScrollActive(active bool) {
	log.Println("Calling RichTextLabel.SetScrollActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(active)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_scroll_active", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) SetScrollFollow(follow bool) {
	log.Println("Calling RichTextLabel.SetScrollFollow()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(follow)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_scroll_follow", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set to true if selecting the text inside this richtext is allowed.
*/
func (o *RichTextLabel) SetSelectionEnabled(enabled bool) {
	log.Println("Calling RichTextLabel.SetSelectionEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_selection_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) SetTabSize(spaces int64) {
	log.Println("Calling RichTextLabel.SetTabSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(spaces)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tab_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) SetTableColumnExpand(column int64, expand bool, ratio int64) {
	log.Println("Calling RichTextLabel.SetTableColumnExpand()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(column)
	goArguments[1] = reflect.ValueOf(expand)
	goArguments[2] = reflect.ValueOf(ratio)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_table_column_expand", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) SetText(text string) {
	log.Println("Calling RichTextLabel.SetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) SetUseBbcode(enable bool) {
	log.Println("Calling RichTextLabel.SetUseBbcode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_use_bbcode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RichTextLabel) SetVisibleCharacters(amount int64) {
	log.Println("Calling RichTextLabel.SetVisibleCharacters()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_visible_characters", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   RichTextLabelImplementer is an interface for RichTextLabel objects.
*/
type RichTextLabelImplementer interface {
	class.Class
}
