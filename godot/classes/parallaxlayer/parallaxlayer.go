//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package parallaxlayer

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node2d"
)

/*
   A ParallaxLayer must be the child of a [ParallaxBackground] node. All child nodes will be affected by the parallax scrolling of this layer.
*/
type ParallaxLayer struct {
	node2d.Node2D
}

func (o *ParallaxLayer) baseClass() string {
	return "ParallaxLayer"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ParallaxLayer) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *ParallaxLayer) getOwner() *C.godot_object {
	return o.owner
}

/*
   Return the mirroring of the ParallaxLayer.
*/
func (o *ParallaxLayer) GetMirroring() *Vector2 {
	log.Println("Calling ParallaxLayer.GetMirroring()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_mirroring", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ParallaxLayer) GetMotionOffset() *Vector2 {
	log.Println("Calling ParallaxLayer.GetMotionOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_motion_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the motion scale of the ParallaxLayer.
*/
func (o *ParallaxLayer) GetMotionScale() *Vector2 {
	log.Println("Calling ParallaxLayer.GetMotionScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_motion_scale", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the mirroring of the ParallaxLayer. If an axis is set to 0 then that axis will have no mirroring.
*/
func (o *ParallaxLayer) SetMirroring(mirror *Vector2) {
	log.Println("Calling ParallaxLayer.SetMirroring()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mirror)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_mirroring", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ParallaxLayer) SetMotionOffset(offset *Vector2) {
	log.Println("Calling ParallaxLayer.SetMotionOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_motion_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the motion scale of the ParallaxLayer. If an axis is set to 0 then it will not move at all, it will stick with the camera.
*/
func (o *ParallaxLayer) SetMotionScale(scale *Vector2) {
	log.Println("Calling ParallaxLayer.SetMotionScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_motion_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ParallaxLayerImplementer is an interface for ParallaxLayer objects.
*/
type ParallaxLayerImplementer interface {
	class.Class
}
