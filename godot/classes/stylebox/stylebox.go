//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package stylebox

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*
   StyleBox is [Resource] that provides an abstract base class for drawing stylized boxes for the UI. StyleBoxes are used for drawing the styles of buttons, line edit backgrounds, tree backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a StyleBox assigned as mask to a control, clicks and motion signals will go through it to the one below.
*/
type StyleBox struct {
	resource.Resource
}

func (o *StyleBox) baseClass() string {
	return "StyleBox"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *StyleBox) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *StyleBox) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *StyleBox) Draw(canvasItem *RID, rect *Rect2) {
	log.Println("Calling StyleBox.Draw()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(canvasItem)
	goArguments[1] = reflect.ValueOf(rect)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "draw", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *StyleBox) GetCenterSize() *Vector2 {
	log.Println("Calling StyleBox.GetCenterSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_center_size", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the default offset of the margin "margin" (see MARGIN_* enum) of a StyleBox, Controls that draw styleboxes with context inside need to know the margin, so the border of the stylebox is not occluded.
*/
func (o *StyleBox) GetDefaultMargin(margin int64) float64 {
	log.Println("Calling StyleBox.GetDefaultMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(margin)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_default_margin", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the offset of margin "margin" (see MARGIN_* enum).
*/
func (o *StyleBox) GetMargin(margin int64) float64 {
	log.Println("Calling StyleBox.GetMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(margin)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_margin", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the minimum size that this stylebox can be shrunk to.
*/
func (o *StyleBox) GetMinimumSize() *Vector2 {
	log.Println("Calling StyleBox.GetMinimumSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_minimum_size", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the "offset" of a stylebox, this is a helper function, like writing [code]Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))[/code].
*/
func (o *StyleBox) GetOffset() *Vector2 {
	log.Println("Calling StyleBox.GetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the default offset "offset" of the margin "margin" (see MARGIN_* enum) for a StyleBox, Controls that draw styleboxes with context inside need to know the margin, so the border of the stylebox is not occluded.
*/
func (o *StyleBox) SetDefaultMargin(margin int64, offset float64) {
	log.Println("Calling StyleBox.SetDefaultMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(margin)
	goArguments[1] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_default_margin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Test a position in a rectangle, return whether it passes the mask test.
*/
func (o *StyleBox) TestMask(point *Vector2, rect *Rect2) bool {
	log.Println("Calling StyleBox.TestMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(point)
	goArguments[1] = reflect.ValueOf(rect)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "test_mask", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   StyleBoxImplementer is an interface for StyleBox objects.
*/
type StyleBoxImplementer interface {
	class.Class
}
