//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package collisionobject2d

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node2d"
)

/*
   CollisionObject2D is the base class for 2D physics objects. It can hold any number of 2D collision [Shape2D]\ s. Each shape must be assigned to a [i]shape owner[/i]. The CollisionObject2D can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the [code]shape_owner_*[/code] methods.
*/
type CollisionObject2D struct {
	node2d.Node2D
}

func (o *CollisionObject2D) baseClass() string {
	return "CollisionObject2D"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *CollisionObject2D) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *CollisionObject2D) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *CollisionObject2D) X_InputEvent(viewport *Object, event *InputEvent, shapeIdx int64) {
	log.Println("Calling CollisionObject2D.X_InputEvent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(event)
	goArguments[2] = reflect.ValueOf(shapeIdx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_input_event", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference.
*/
func (o *CollisionObject2D) CreateShapeOwner(owner *Object) int64 {
	log.Println("Calling CollisionObject2D.CreateShapeOwner()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(owner)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "create_shape_owner", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the object's [RID].
*/
func (o *CollisionObject2D) GetRid() *RID {
	log.Println("Calling CollisionObject2D.GetRid()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_rid", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument.
*/
func (o *CollisionObject2D) GetShapeOwners() *Array {
	log.Println("Calling CollisionObject2D.GetShapeOwners()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shape_owners", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return whether this object is pickable.
*/
func (o *CollisionObject2D) IsPickable() bool {
	log.Println("Calling CollisionObject2D.IsPickable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_pickable", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   If [code]true[/code] the shape owner and its shapes are disabled.
*/
func (o *CollisionObject2D) IsShapeOwnerDisabled(ownerId int64) bool {
	log.Println("Calling CollisionObject2D.IsShapeOwnerDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ownerId)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_shape_owner_disabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *CollisionObject2D) IsShapeOwnerOneWayCollisionEnabled(ownerId int64) bool {
	log.Println("Calling CollisionObject2D.IsShapeOwnerOneWayCollisionEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ownerId)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_shape_owner_one_way_collision_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Removes the given shape owner.
*/
func (o *CollisionObject2D) RemoveShapeOwner(ownerId int64) {
	log.Println("Calling CollisionObject2D.RemoveShapeOwner()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ownerId)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_shape_owner", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set whether this object is pickable. A pickable object can detect the mouse pointer enter/leave it and, if the mouse is inside it, report input events.
*/
func (o *CollisionObject2D) SetPickable(enabled bool) {
	log.Println("Calling CollisionObject2D.SetPickable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_pickable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the [code]owner_id[/code] of the given shape.
*/
func (o *CollisionObject2D) ShapeFindOwner(shapeIndex int64) int64 {
	log.Println("Calling CollisionObject2D.ShapeFindOwner()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shapeIndex)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shape_find_owner", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Adds a [Shape2D] to the shape owner.
*/
func (o *CollisionObject2D) ShapeOwnerAddShape(ownerId int64, shape *Shape2D) {
	log.Println("Calling CollisionObject2D.ShapeOwnerAddShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(ownerId)
	goArguments[1] = reflect.ValueOf(shape)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "shape_owner_add_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes all shapes from the shape owner.
*/
func (o *CollisionObject2D) ShapeOwnerClearShapes(ownerId int64) {
	log.Println("Calling CollisionObject2D.ShapeOwnerClearShapes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ownerId)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "shape_owner_clear_shapes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the parent object of the given shape owner.
*/
func (o *CollisionObject2D) ShapeOwnerGetOwner(ownerId int64) *Object {
	log.Println("Calling CollisionObject2D.ShapeOwnerGetOwner()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ownerId)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shape_owner_get_owner", goArguments, "*Object")

	returnValue := goRet.Interface().(*Object)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [Shape2D] with the given id from the given shape owner.
*/
func (o *CollisionObject2D) ShapeOwnerGetShape(ownerId int64, shapeId int64) *Shape2D {
	log.Println("Calling CollisionObject2D.ShapeOwnerGetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(ownerId)
	goArguments[1] = reflect.ValueOf(shapeId)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shape_owner_get_shape", goArguments, "*Shape2D")

	returnValue := goRet.Interface().(*Shape2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of shapes the given shape owner contains.
*/
func (o *CollisionObject2D) ShapeOwnerGetShapeCount(ownerId int64) int64 {
	log.Println("Calling CollisionObject2D.ShapeOwnerGetShapeCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ownerId)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shape_owner_get_shape_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *CollisionObject2D) ShapeOwnerGetShapeIndex(ownerId int64, shapeId int64) int64 {
	log.Println("Calling CollisionObject2D.ShapeOwnerGetShapeIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(ownerId)
	goArguments[1] = reflect.ValueOf(shapeId)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shape_owner_get_shape_index", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the shape owner's [Transform2D].
*/
func (o *CollisionObject2D) ShapeOwnerGetTransform(ownerId int64) *Transform2D {
	log.Println("Calling CollisionObject2D.ShapeOwnerGetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ownerId)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shape_owner_get_transform", goArguments, "*Transform2D")

	returnValue := goRet.Interface().(*Transform2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Removes a shape from the given shape owner.
*/
func (o *CollisionObject2D) ShapeOwnerRemoveShape(ownerId int64, shapeId int64) {
	log.Println("Calling CollisionObject2D.ShapeOwnerRemoveShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(ownerId)
	goArguments[1] = reflect.ValueOf(shapeId)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "shape_owner_remove_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] disables the given shape owner.
*/
func (o *CollisionObject2D) ShapeOwnerSetDisabled(ownerId int64, disabled bool) {
	log.Println("Calling CollisionObject2D.ShapeOwnerSetDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(ownerId)
	goArguments[1] = reflect.ValueOf(disabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "shape_owner_set_disabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *CollisionObject2D) ShapeOwnerSetOneWayCollision(ownerId int64, enable bool) {
	log.Println("Calling CollisionObject2D.ShapeOwnerSetOneWayCollision()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(ownerId)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "shape_owner_set_one_way_collision", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the [Transform2D] of the given shape owner.
*/
func (o *CollisionObject2D) ShapeOwnerSetTransform(ownerId int64, transform *Transform2D) {
	log.Println("Calling CollisionObject2D.ShapeOwnerSetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(ownerId)
	goArguments[1] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "shape_owner_set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   CollisionObject2DImplementer is an interface for CollisionObject2D objects.
*/
type CollisionObject2DImplementer interface {
	class.Class
}
