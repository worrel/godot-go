//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package visualscriptnode

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*
   A node which is part of a [VisualScript]. Not to be confused with [Node], which is a part of a [SceneTree].
*/
type VisualScriptNode struct {
	resource.Resource
}

func (o *VisualScriptNode) baseClass() string {
	return "VisualScriptNode"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *VisualScriptNode) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *VisualScriptNode) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *VisualScriptNode) X_GetDefaultInputValues() *Array {
	log.Println("Calling VisualScriptNode.X_GetDefaultInputValues()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_default_input_values", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptNode) X_SetDefaultInputValues(values *Array) {
	log.Println("Calling VisualScriptNode.X_SetDefaultInputValues()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(values)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_default_input_values", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the default value of a given port. The default value is used when nothing is connected to the port.
*/
func (o *VisualScriptNode) GetDefaultInputValue(portIdx int64) *Variant {
	log.Println("Calling VisualScriptNode.GetDefaultInputValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(portIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_default_input_value", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [VisualScript] instance the node is bound to.
*/
func (o *VisualScriptNode) GetVisualScript() *VisualScript {
	log.Println("Calling VisualScriptNode.GetVisualScript()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_visual_script", goArguments, "*VisualScript")

	returnValue := goRet.Interface().(*VisualScript)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Change the default value of a given port.
*/
func (o *VisualScriptNode) SetDefaultInputValue(portIdx int64, value *Variant) {
	log.Println("Calling VisualScriptNode.SetDefaultInputValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(portIdx)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_default_input_value", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   VisualScriptNodeImplementer is an interface for VisualScriptNode objects.
*/
type VisualScriptNodeImplementer interface {
	class.Class
}
