//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package physics2dserver

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/object"
)

func newSingletonPhysics2DServer() *physics2DServer {
	obj := &physics2DServer{}
	ptr := C.godot_global_get_singleton(C.CString("Physics2DServer"))
	obj.owner = (*C.godot_object)(ptr)
	return obj
}

/*
   Physics 2D Server is the server responsible for all 2D physics. It can create many kinds of physics objects, but does not insert them on the node tree.
*/
var Physics2DServer = newSingletonPhysics2DServer()

/*
   Physics 2D Server is the server responsible for all 2D physics. It can create many kinds of physics objects, but does not insert them on the node tree.
*/
type physics2DServer struct {
	object.Object
}

func (o *physics2DServer) baseClass() string {
	return "Physics2DServer"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *physics2DServer) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *physics2DServer) getOwner() *C.godot_object {
	return o.owner
}

/*
   Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
*/
func (o *physics2DServer) AreaAddShape(area *RID, shape *RID, transform *Transform2D) {
	log.Println("Calling Physics2DServer.AreaAddShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(shape)
	goArguments[2] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "area_add_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Assigns the area to a descendant of [Object], so it can exist in the node tree.
*/
func (o *physics2DServer) AreaAttachObjectInstanceId(area *RID, id int64) {
	log.Println("Calling Physics2DServer.AreaAttachObjectInstanceId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "area_attach_object_instance_id", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.
*/
func (o *physics2DServer) AreaClearShapes(area *RID) {
	log.Println("Calling Physics2DServer.AreaClearShapes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(area)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "area_clear_shapes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates an [Area2D].
*/
func (o *physics2DServer) AreaCreate() *RID {
	log.Println("Calling Physics2DServer.AreaCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "area_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Gets the instance ID of the object the area is assigned to.
*/
func (o *physics2DServer) AreaGetObjectInstanceId(area *RID) int64 {
	log.Println("Calling Physics2DServer.AreaGetObjectInstanceId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(area)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "area_get_object_instance_id", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns an area parameter value. A list of available parameters is on the AREA_PARAM_* constants.
*/
func (o *physics2DServer) AreaGetParam(area *RID, param int64) *Variant {
	log.Println("Calling Physics2DServer.AreaGetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "area_get_param", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [RID] of the nth shape of an area.
*/
func (o *physics2DServer) AreaGetShape(area *RID, shapeIdx int64) *RID {
	log.Println("Calling Physics2DServer.AreaGetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(shapeIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "area_get_shape", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of shapes assigned to an area.
*/
func (o *physics2DServer) AreaGetShapeCount(area *RID) int64 {
	log.Println("Calling Physics2DServer.AreaGetShapeCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(area)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "area_get_shape_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the transform matrix of a shape within an area.
*/
func (o *physics2DServer) AreaGetShapeTransform(area *RID, shapeIdx int64) *Transform2D {
	log.Println("Calling Physics2DServer.AreaGetShapeTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(shapeIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "area_get_shape_transform", goArguments, "*Transform2D")

	returnValue := goRet.Interface().(*Transform2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the space assigned to the area.
*/
func (o *physics2DServer) AreaGetSpace(area *RID) *RID {
	log.Println("Calling Physics2DServer.AreaGetSpace()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(area)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "area_get_space", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the space override mode for the area.
*/
func (o *physics2DServer) AreaGetSpaceOverrideMode(area *RID) int64 {
	log.Println("Calling Physics2DServer.AreaGetSpaceOverrideMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(area)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "area_get_space_override_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the transform matrix for an area.
*/
func (o *physics2DServer) AreaGetTransform(area *RID) *Transform2D {
	log.Println("Calling Physics2DServer.AreaGetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(area)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "area_get_transform", goArguments, "*Transform2D")

	returnValue := goRet.Interface().(*Transform2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Removes a shape from an area. It does not delete the shape, so it can be reassigned later.
*/
func (o *physics2DServer) AreaRemoveShape(area *RID, shapeIdx int64) {
	log.Println("Calling Physics2DServer.AreaRemoveShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(shapeIdx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "area_remove_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Assigns the area to one or many physics layers.
*/
func (o *physics2DServer) AreaSetCollisionLayer(area *RID, layer int64) {
	log.Println("Calling Physics2DServer.AreaSetCollisionLayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(layer)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "area_set_collision_layer", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets which physics layers the area will monitor.
*/
func (o *physics2DServer) AreaSetCollisionMask(area *RID, mask int64) {
	log.Println("Calling Physics2DServer.AreaSetCollisionMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(mask)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "area_set_collision_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters: 1: AREA_BODY_ADDED or AREA_BODY_REMOVED, depending on whether the object entered or exited the area. 2: [RID] of the object that entered/exited the area. 3: Instance ID of the object that entered/exited the area. 4: The shape index of the object that entered/exited the area. 5: The shape index of the area where the object entered/exited.
*/
func (o *physics2DServer) AreaSetMonitorCallback(area *RID, receiver *Object, method string) {
	log.Println("Calling Physics2DServer.AreaSetMonitorCallback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(receiver)
	goArguments[2] = reflect.ValueOf(method)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "area_set_monitor_callback", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the value for an area parameter. A list of available parameters is on the AREA_PARAM_* constants.
*/
func (o *physics2DServer) AreaSetParam(area *RID, param int64, value *Variant) {
	log.Println("Calling Physics2DServer.AreaSetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(param)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "area_set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Substitutes a given area shape by another. The old shape is selected by its index, the new one by its [RID].
*/
func (o *physics2DServer) AreaSetShape(area *RID, shapeIdx int64, shape *RID) {
	log.Println("Calling Physics2DServer.AreaSetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(shapeIdx)
	goArguments[2] = reflect.ValueOf(shape)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "area_set_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Disables a given shape in this area if [code]disable is true[/code]
*/
func (o *physics2DServer) AreaSetShapeDisabled(area *RID, shapeIdx int64, disable bool) {
	log.Println("Calling Physics2DServer.AreaSetShapeDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(shapeIdx)
	goArguments[2] = reflect.ValueOf(disable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "area_set_shape_disabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the transform matrix for an area shape.
*/
func (o *physics2DServer) AreaSetShapeTransform(area *RID, shapeIdx int64, transform *Transform2D) {
	log.Println("Calling Physics2DServer.AreaSetShapeTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(shapeIdx)
	goArguments[2] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "area_set_shape_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Assigns a space to the area.
*/
func (o *physics2DServer) AreaSetSpace(area *RID, space *RID) {
	log.Println("Calling Physics2DServer.AreaSetSpace()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(space)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "area_set_space", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the space override mode for the area. The modes are described in the constants AREA_SPACE_OVERRIDE_*.
*/
func (o *physics2DServer) AreaSetSpaceOverrideMode(area *RID, mode int64) {
	log.Println("Calling Physics2DServer.AreaSetSpaceOverrideMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "area_set_space_override_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the transform matrix for an area.
*/
func (o *physics2DServer) AreaSetTransform(area *RID, transform *Transform2D) {
	log.Println("Calling Physics2DServer.AreaSetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "area_set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a body to the list of bodies exempt from collisions.
*/
func (o *physics2DServer) BodyAddCollisionException(body *RID, exceptedBody *RID) {
	log.Println("Calling Physics2DServer.BodyAddCollisionException()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(exceptedBody)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_add_collision_exception", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a positioned force to the applied force and torque. As with [method body_apply_impulse], both the force and the offset from the body origin are in global coordinates. A force differs from an impulse in that, while the two are forces, the impulse clears itself after being applied.
*/
func (o *physics2DServer) BodyAddForce(body *RID, offset *Vector2, force *Vector2) {
	log.Println("Calling Physics2DServer.BodyAddForce()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(offset)
	goArguments[2] = reflect.ValueOf(force)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_add_force", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
*/
func (o *physics2DServer) BodyAddShape(body *RID, shape *RID, transform *Transform2D) {
	log.Println("Calling Physics2DServer.BodyAddShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shape)
	goArguments[2] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_add_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a positioned impulse to the applied force and torque. Both the force and the offset from the body origin are in global coordinates.
*/
func (o *physics2DServer) BodyApplyImpulse(body *RID, position *Vector2, impulse *Vector2) {
	log.Println("Calling Physics2DServer.BodyApplyImpulse()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(position)
	goArguments[2] = reflect.ValueOf(impulse)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_apply_impulse", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Assigns the area to a descendant of [Object], so it can exist in the node tree.
*/
func (o *physics2DServer) BodyAttachObjectInstanceId(body *RID, id int64) {
	log.Println("Calling Physics2DServer.BodyAttachObjectInstanceId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_attach_object_instance_id", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes all shapes from a body.
*/
func (o *physics2DServer) BodyClearShapes(body *RID) {
	log.Println("Calling Physics2DServer.BodyClearShapes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_clear_shapes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a physics body. The first parameter can be any value from constants BODY_MODE*, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.
*/
func (o *physics2DServer) BodyCreate(mode int64, initSleeping bool) *RID {
	log.Println("Calling Physics2DServer.BodyCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mode)
	goArguments[1] = reflect.ValueOf(initSleeping)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the physics layer or layers a body belongs to.
*/
func (o *physics2DServer) BodyGetCollisionLayer(body *RID) int64 {
	log.Println("Calling Physics2DServer.BodyGetCollisionLayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_get_collision_layer", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the physics layer or layers a body can collide with.
*/
func (o *physics2DServer) BodyGetCollisionMask(body *RID) int64 {
	log.Println("Calling Physics2DServer.BodyGetCollisionMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_get_collision_mask", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the continuous collision detection mode.
*/
func (o *physics2DServer) BodyGetContinuousCollisionDetectionMode(body *RID) int64 {
	log.Println("Calling Physics2DServer.BodyGetContinuousCollisionDetectionMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_get_continuous_collision_detection_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the maximum contacts that can be reported. See [method body_set_max_contacts_reported].
*/
func (o *physics2DServer) BodyGetMaxContactsReported(body *RID) int64 {
	log.Println("Calling Physics2DServer.BodyGetMaxContactsReported()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_get_max_contacts_reported", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the body mode.
*/
func (o *physics2DServer) BodyGetMode(body *RID) int64 {
	log.Println("Calling Physics2DServer.BodyGetMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_get_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Gets the instance ID of the object the area is assigned to.
*/
func (o *physics2DServer) BodyGetObjectInstanceId(body *RID) int64 {
	log.Println("Calling Physics2DServer.BodyGetObjectInstanceId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_get_object_instance_id", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the value of a body parameter. A list of available parameters is on the BODY_PARAM_* constants.
*/
func (o *physics2DServer) BodyGetParam(body *RID, param int64) float64 {
	log.Println("Calling Physics2DServer.BodyGetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_get_param", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [RID] of the nth shape of a body.
*/
func (o *physics2DServer) BodyGetShape(body *RID, shapeIdx int64) *RID {
	log.Println("Calling Physics2DServer.BodyGetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shapeIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_get_shape", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of shapes assigned to a body.
*/
func (o *physics2DServer) BodyGetShapeCount(body *RID) int64 {
	log.Println("Calling Physics2DServer.BodyGetShapeCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_get_shape_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the metadata of a shape of a body.
*/
func (o *physics2DServer) BodyGetShapeMetadata(body *RID, shapeIdx int64) *Variant {
	log.Println("Calling Physics2DServer.BodyGetShapeMetadata()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shapeIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_get_shape_metadata", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the transform matrix of a body shape.
*/
func (o *physics2DServer) BodyGetShapeTransform(body *RID, shapeIdx int64) *Transform2D {
	log.Println("Calling Physics2DServer.BodyGetShapeTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shapeIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_get_shape_transform", goArguments, "*Transform2D")

	returnValue := goRet.Interface().(*Transform2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [RID] of the space assigned to a body.
*/
func (o *physics2DServer) BodyGetSpace(body *RID) *RID {
	log.Println("Calling Physics2DServer.BodyGetSpace()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_get_space", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a body state.
*/
func (o *physics2DServer) BodyGetState(body *RID, state int64) *Variant {
	log.Println("Calling Physics2DServer.BodyGetState()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(state)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_get_state", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).
*/
func (o *physics2DServer) BodyIsOmittingForceIntegration(body *RID) bool {
	log.Println("Calling Physics2DServer.BodyIsOmittingForceIntegration()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_is_omitting_force_integration", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Removes a body from the list of bodies exempt from collisions.
*/
func (o *physics2DServer) BodyRemoveCollisionException(body *RID, exceptedBody *RID) {
	log.Println("Calling Physics2DServer.BodyRemoveCollisionException()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(exceptedBody)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_remove_collision_exception", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.
*/
func (o *physics2DServer) BodyRemoveShape(body *RID, shapeIdx int64) {
	log.Println("Calling Physics2DServer.BodyRemoveShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shapeIdx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_remove_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
*/
func (o *physics2DServer) BodySetAxisVelocity(body *RID, axisVelocity *Vector2) {
	log.Println("Calling Physics2DServer.BodySetAxisVelocity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(axisVelocity)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_axis_velocity", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the physics layer or layers a body belongs to.
*/
func (o *physics2DServer) BodySetCollisionLayer(body *RID, layer int64) {
	log.Println("Calling Physics2DServer.BodySetCollisionLayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(layer)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_collision_layer", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the physics layer or layers a body can collide with.
*/
func (o *physics2DServer) BodySetCollisionMask(body *RID, mask int64) {
	log.Println("Calling Physics2DServer.BodySetCollisionMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(mask)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_collision_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the continuous collision detection mode from any of the CCD_MODE_* constants. Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
*/
func (o *physics2DServer) BodySetContinuousCollisionDetectionMode(body *RID, mode int64) {
	log.Println("Calling Physics2DServer.BodySetContinuousCollisionDetectionMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_continuous_collision_detection_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the function used to calculate physics for an object, if that object allows it (see [method body_set_omit_force integration]).
*/
func (o *physics2DServer) BodySetForceIntegrationCallback(body *RID, receiver *Object, method string, userdata *Variant) {
	log.Println("Calling Physics2DServer.BodySetForceIntegrationCallback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(receiver)
	goArguments[2] = reflect.ValueOf(method)
	goArguments[3] = reflect.ValueOf(userdata)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_force_integration_callback", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.
*/
func (o *physics2DServer) BodySetMaxContactsReported(body *RID, amount int64) {
	log.Println("Calling Physics2DServer.BodySetMaxContactsReported()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_max_contacts_reported", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the body mode, from one of the constants BODY_MODE*.
*/
func (o *physics2DServer) BodySetMode(body *RID, mode int64) {
	log.Println("Calling Physics2DServer.BodySetMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).
*/
func (o *physics2DServer) BodySetOmitForceIntegration(body *RID, enable bool) {
	log.Println("Calling Physics2DServer.BodySetOmitForceIntegration()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_omit_force_integration", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a body parameter. A list of available parameters is on the BODY_PARAM_* constants.
*/
func (o *physics2DServer) BodySetParam(body *RID, param int64, value float64) {
	log.Println("Calling Physics2DServer.BodySetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(param)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Substitutes a given body shape by another. The old shape is selected by its index, the new one by its [RID].
*/
func (o *physics2DServer) BodySetShape(body *RID, shapeIdx int64, shape *RID) {
	log.Println("Calling Physics2DServer.BodySetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shapeIdx)
	goArguments[2] = reflect.ValueOf(shape)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Enables one way collision on body if [code]enable is true[/code].
*/
func (o *physics2DServer) BodySetShapeAsOneWayCollision(body *RID, shapeIdx int64, enable bool) {
	log.Println("Calling Physics2DServer.BodySetShapeAsOneWayCollision()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shapeIdx)
	goArguments[2] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_shape_as_one_way_collision", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Disables shape in body if [code]disable is true[/code].
*/
func (o *physics2DServer) BodySetShapeDisabled(body *RID, shapeIdx int64, disable bool) {
	log.Println("Calling Physics2DServer.BodySetShapeDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shapeIdx)
	goArguments[2] = reflect.ValueOf(disable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_shape_disabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets metadata of a shape within a body. This metadata is different from [method Object.set_meta], and can be retrieved on shape queries.
*/
func (o *physics2DServer) BodySetShapeMetadata(body *RID, shapeIdx int64, metadata *Variant) {
	log.Println("Calling Physics2DServer.BodySetShapeMetadata()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shapeIdx)
	goArguments[2] = reflect.ValueOf(metadata)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_shape_metadata", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the transform matrix for a body shape.
*/
func (o *physics2DServer) BodySetShapeTransform(body *RID, shapeIdx int64, transform *Transform2D) {
	log.Println("Calling Physics2DServer.BodySetShapeTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shapeIdx)
	goArguments[2] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_shape_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Assigns a space to the body (see [method create_space]).
*/
func (o *physics2DServer) BodySetSpace(body *RID, space *RID) {
	log.Println("Calling Physics2DServer.BodySetSpace()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(space)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_space", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a body state (see BODY_STATE* constants).
*/
func (o *physics2DServer) BodySetState(body *RID, state int64, value *Variant) {
	log.Println("Calling Physics2DServer.BodySetState()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(state)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "body_set_state", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns whether a body can move from a given point in a given direction. Apart from the boolean return value, a [Physics2DTestMotionResult] can be passed to return additional information in.
*/
func (o *physics2DServer) BodyTestMotion(body *RID, from *Transform2D, motion *Vector2, margin float64, result *Physics2DTestMotionResult) bool {
	log.Println("Calling Physics2DServer.BodyTestMotion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(from)
	goArguments[2] = reflect.ValueOf(motion)
	goArguments[3] = reflect.ValueOf(margin)
	goArguments[4] = reflect.ValueOf(result)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "body_test_motion", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Creates a damped spring joint between two bodies. If not specified, the second body is assumed to be the joint itself.
*/
func (o *physics2DServer) DampedSpringJointCreate(anchorA *Vector2, anchorB *Vector2, bodyA *RID, bodyB *RID) *RID {
	log.Println("Calling Physics2DServer.DampedSpringJointCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(anchorA)
	goArguments[1] = reflect.ValueOf(anchorB)
	goArguments[2] = reflect.ValueOf(bodyA)
	goArguments[3] = reflect.ValueOf(bodyB)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "damped_spring_joint_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the value of a damped spring joint parameter.
*/
func (o *physics2DServer) DampedStringJointGetParam(joint *RID, param int64) float64 {
	log.Println("Calling Physics2DServer.DampedStringJointGetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "damped_string_joint_get_param", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets a damped spring joint parameter. Parameters are explained in the DAMPED_STRING* constants.
*/
func (o *physics2DServer) DampedStringJointSetParam(joint *RID, param int64, value float64) {
	log.Println("Calling Physics2DServer.DampedStringJointSetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(param)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "damped_string_joint_set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Destroys any of the objects created by Physics2DServer. If the [RID] passed is not one of the objects that can be created by Physics2DServer, an error will be sent to the console.
*/
func (o *physics2DServer) FreeRid(rid *RID) {
	log.Println("Calling Physics2DServer.FreeRid()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rid)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "free_rid", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns information about the current state of the 2D physics engine. The states are listed under the INFO_* constants.
*/
func (o *physics2DServer) GetProcessInfo(processInfo int64) int64 {
	log.Println("Calling Physics2DServer.GetProcessInfo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(processInfo)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_process_info", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Creates a groove joint between two bodies. If not specified, the bodyies are assumed to be the joint itself.
*/
func (o *physics2DServer) GrooveJointCreate(groove1A *Vector2, groove2A *Vector2, anchorB *Vector2, bodyA *RID, bodyB *RID) *RID {
	log.Println("Calling Physics2DServer.GrooveJointCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(groove1A)
	goArguments[1] = reflect.ValueOf(groove2A)
	goArguments[2] = reflect.ValueOf(anchorB)
	goArguments[3] = reflect.ValueOf(bodyA)
	goArguments[4] = reflect.ValueOf(bodyB)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "groove_joint_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the value of a joint parameter.
*/
func (o *physics2DServer) JointGetParam(joint *RID, param int64) float64 {
	log.Println("Calling Physics2DServer.JointGetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "joint_get_param", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the type of a joint (see JOINT_* constants).
*/
func (o *physics2DServer) JointGetType(joint *RID) int64 {
	log.Println("Calling Physics2DServer.JointGetType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(joint)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "joint_get_type", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets a joint parameter. Parameters are explained in the JOINT_PARAM* constants.
*/
func (o *physics2DServer) JointSetParam(joint *RID, param int64, value float64) {
	log.Println("Calling Physics2DServer.JointSetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(param)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "joint_set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a pin joint between two bodies. If not specified, the second body is assumed to be the joint itself.
*/
func (o *physics2DServer) PinJointCreate(anchor *Vector2, bodyA *RID, bodyB *RID) *RID {
	log.Println("Calling Physics2DServer.PinJointCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(anchor)
	goArguments[1] = reflect.ValueOf(bodyA)
	goArguments[2] = reflect.ValueOf(bodyB)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "pin_joint_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Activates or deactivates the 2D physics engine.
*/
func (o *physics2DServer) SetActive(active bool) {
	log.Println("Calling Physics2DServer.SetActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(active)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_active", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a shape of type SHAPE_*. Does not assign it to a body or an area. To do so, you must use [method area_set_shape] or [method body_set_shape].
*/
func (o *physics2DServer) ShapeCreate(aType int64) *RID {
	log.Println("Calling Physics2DServer.ShapeCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shape_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the shape data.
*/
func (o *physics2DServer) ShapeGetData(shape *RID) *Variant {
	log.Println("Calling Physics2DServer.ShapeGetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shape)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shape_get_data", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the type of shape (see SHAPE_* constants).
*/
func (o *physics2DServer) ShapeGetType(shape *RID) int64 {
	log.Println("Calling Physics2DServer.ShapeGetType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shape)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shape_get_type", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type].
*/
func (o *physics2DServer) ShapeSetData(shape *RID, data *Variant) {
	log.Println("Calling Physics2DServer.ShapeSetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(shape)
	goArguments[1] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "shape_set_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space].
*/
func (o *physics2DServer) SpaceCreate() *RID {
	log.Println("Calling Physics2DServer.SpaceCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "space_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the state of a space, a [Physics2DDirectSpaceState]. This object can be used to make collision/intersection queries.
*/
func (o *physics2DServer) SpaceGetDirectState(space *RID) *Physics2DDirectSpaceState {
	log.Println("Calling Physics2DServer.SpaceGetDirectState()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(space)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "space_get_direct_state", goArguments, "*Physics2DDirectSpaceState")

	returnValue := goRet.Interface().(*Physics2DDirectSpaceState)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the value of a space parameter.
*/
func (o *physics2DServer) SpaceGetParam(space *RID, param int64) float64 {
	log.Println("Calling Physics2DServer.SpaceGetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(space)
	goArguments[1] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "space_get_param", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether the space is active.
*/
func (o *physics2DServer) SpaceIsActive(space *RID) bool {
	log.Println("Calling Physics2DServer.SpaceIsActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(space)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "space_is_active", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Marks a space as active. It will not have an effect, unless it is assigned to an area or body.
*/
func (o *physics2DServer) SpaceSetActive(space *RID, active bool) {
	log.Println("Calling Physics2DServer.SpaceSetActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(space)
	goArguments[1] = reflect.ValueOf(active)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "space_set_active", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the value for a space parameter. A list of available parameters is on the SPACE_PARAM_* constants.
*/
func (o *physics2DServer) SpaceSetParam(space *RID, param int64, value float64) {
	log.Println("Calling Physics2DServer.SpaceSetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(space)
	goArguments[1] = reflect.ValueOf(param)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "space_set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}
