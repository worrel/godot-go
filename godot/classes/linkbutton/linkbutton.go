//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package linkbutton

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/basebutton"
)

/*
   This kind of buttons are primarily used when the interaction with the button causes a context change (like linking to a web page).
*/
type LinkButton struct {
	basebutton.BaseButton
}

func (o *LinkButton) baseClass() string {
	return "LinkButton"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *LinkButton) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *LinkButton) getOwner() *C.godot_object {
	return o.owner
}

/*
   Returns the text of the button.
*/
func (o *LinkButton) GetText() string {
	log.Println("Calling LinkButton.GetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_text", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the underline mode for this button.
*/
func (o *LinkButton) GetUnderlineMode() int64 {
	log.Println("Calling LinkButton.GetUnderlineMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_underline_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the text of the button.
*/
func (o *LinkButton) SetText(text string) {
	log.Println("Calling LinkButton.SetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the underline mode for this button, the argument must be one of the [LinkButton] constants (see constants section).
*/
func (o *LinkButton) SetUnderlineMode(underlineMode int64) {
	log.Println("Calling LinkButton.SetUnderlineMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(underlineMode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_underline_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   LinkButtonImplementer is an interface for LinkButton objects.
*/
type LinkButtonImplementer interface {
	class.Class
}
