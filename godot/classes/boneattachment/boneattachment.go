//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package boneattachment

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/spatial"
)

/*
   This node must be the child of a [Skeleton] node. You can then select a bone for this node to attach to. The BoneAttachment node will copy the transform of the selected bone.
*/
type BoneAttachment struct {
	spatial.Spatial
}

func (o *BoneAttachment) baseClass() string {
	return "BoneAttachment"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *BoneAttachment) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *BoneAttachment) getOwner() *C.godot_object {
	return o.owner
}

/*
   Returns the name of the bone node attached to.
*/
func (o *BoneAttachment) GetBoneName() string {
	log.Println("Calling BoneAttachment.GetBoneName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bone_name", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Changes the name of the bone node
*/
func (o *BoneAttachment) SetBoneName(boneName string) {
	log.Println("Calling BoneAttachment.SetBoneName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(boneName)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bone_name", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   BoneAttachmentImplementer is an interface for BoneAttachment objects.
*/
type BoneAttachmentImplementer interface {
	class.Class
}
