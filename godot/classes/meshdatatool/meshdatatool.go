//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package meshdatatool

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/reference"
)

/*

 */
type MeshDataTool struct {
	reference.Reference
}

func (o *MeshDataTool) baseClass() string {
	return "MeshDataTool"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *MeshDataTool) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *MeshDataTool) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *MeshDataTool) Clear() {
	log.Println("Calling MeshDataTool.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshDataTool) CommitToSurface(mesh *ArrayMesh) int64 {
	log.Println("Calling MeshDataTool.CommitToSurface()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mesh)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "commit_to_surface", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) CreateFromSurface(mesh *ArrayMesh, surface int64) int64 {
	log.Println("Calling MeshDataTool.CreateFromSurface()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(surface)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "create_from_surface", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetEdgeCount() int64 {
	log.Println("Calling MeshDataTool.GetEdgeCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_edge_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetEdgeFaces(idx int64) *PoolIntArray {
	log.Println("Calling MeshDataTool.GetEdgeFaces()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_edge_faces", goArguments, "*PoolIntArray")

	returnValue := goRet.Interface().(*PoolIntArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetEdgeMeta(idx int64) *Variant {
	log.Println("Calling MeshDataTool.GetEdgeMeta()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_edge_meta", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetEdgeVertex(idx int64, vertex int64) int64 {
	log.Println("Calling MeshDataTool.GetEdgeVertex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(vertex)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_edge_vertex", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetFaceCount() int64 {
	log.Println("Calling MeshDataTool.GetFaceCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_face_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetFaceEdge(idx int64, edge int64) int64 {
	log.Println("Calling MeshDataTool.GetFaceEdge()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(edge)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_face_edge", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetFaceMeta(idx int64) *Variant {
	log.Println("Calling MeshDataTool.GetFaceMeta()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_face_meta", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetFaceNormal(idx int64) *Vector3 {
	log.Println("Calling MeshDataTool.GetFaceNormal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_face_normal", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetFaceVertex(idx int64, vertex int64) int64 {
	log.Println("Calling MeshDataTool.GetFaceVertex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(vertex)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_face_vertex", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetFormat() int64 {
	log.Println("Calling MeshDataTool.GetFormat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_format", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetMaterial() *Material {
	log.Println("Calling MeshDataTool.GetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_material", goArguments, "*Material")

	returnValue := goRet.Interface().(*Material)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetVertex(idx int64) *Vector3 {
	log.Println("Calling MeshDataTool.GetVertex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vertex", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetVertexBones(idx int64) *PoolIntArray {
	log.Println("Calling MeshDataTool.GetVertexBones()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vertex_bones", goArguments, "*PoolIntArray")

	returnValue := goRet.Interface().(*PoolIntArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetVertexColor(idx int64) *Color {
	log.Println("Calling MeshDataTool.GetVertexColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vertex_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetVertexCount() int64 {
	log.Println("Calling MeshDataTool.GetVertexCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vertex_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetVertexEdges(idx int64) *PoolIntArray {
	log.Println("Calling MeshDataTool.GetVertexEdges()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vertex_edges", goArguments, "*PoolIntArray")

	returnValue := goRet.Interface().(*PoolIntArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetVertexFaces(idx int64) *PoolIntArray {
	log.Println("Calling MeshDataTool.GetVertexFaces()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vertex_faces", goArguments, "*PoolIntArray")

	returnValue := goRet.Interface().(*PoolIntArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetVertexMeta(idx int64) *Variant {
	log.Println("Calling MeshDataTool.GetVertexMeta()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vertex_meta", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetVertexNormal(idx int64) *Vector3 {
	log.Println("Calling MeshDataTool.GetVertexNormal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vertex_normal", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetVertexTangent(idx int64) *Plane {
	log.Println("Calling MeshDataTool.GetVertexTangent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vertex_tangent", goArguments, "*Plane")

	returnValue := goRet.Interface().(*Plane)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetVertexUv(idx int64) *Vector2 {
	log.Println("Calling MeshDataTool.GetVertexUv()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vertex_uv", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetVertexUv2(idx int64) *Vector2 {
	log.Println("Calling MeshDataTool.GetVertexUv2()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vertex_uv2", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) GetVertexWeights(idx int64) *PoolRealArray {
	log.Println("Calling MeshDataTool.GetVertexWeights()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vertex_weights", goArguments, "*PoolRealArray")

	returnValue := goRet.Interface().(*PoolRealArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshDataTool) SetEdgeMeta(idx int64, meta *Variant) {
	log.Println("Calling MeshDataTool.SetEdgeMeta()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(meta)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_edge_meta", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshDataTool) SetFaceMeta(idx int64, meta *Variant) {
	log.Println("Calling MeshDataTool.SetFaceMeta()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(meta)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_face_meta", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshDataTool) SetMaterial(material *Material) {
	log.Println("Calling MeshDataTool.SetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(material)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_material", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshDataTool) SetVertex(idx int64, vertex *Vector3) {
	log.Println("Calling MeshDataTool.SetVertex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(vertex)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_vertex", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshDataTool) SetVertexBones(idx int64, bones *PoolIntArray) {
	log.Println("Calling MeshDataTool.SetVertexBones()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(bones)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_vertex_bones", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshDataTool) SetVertexColor(idx int64, color *Color) {
	log.Println("Calling MeshDataTool.SetVertexColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_vertex_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshDataTool) SetVertexMeta(idx int64, meta *Variant) {
	log.Println("Calling MeshDataTool.SetVertexMeta()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(meta)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_vertex_meta", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshDataTool) SetVertexNormal(idx int64, normal *Vector3) {
	log.Println("Calling MeshDataTool.SetVertexNormal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(normal)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_vertex_normal", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshDataTool) SetVertexTangent(idx int64, tangent *Plane) {
	log.Println("Calling MeshDataTool.SetVertexTangent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(tangent)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_vertex_tangent", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshDataTool) SetVertexUv(idx int64, uv *Vector2) {
	log.Println("Calling MeshDataTool.SetVertexUv()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(uv)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_vertex_uv", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshDataTool) SetVertexUv2(idx int64, uv2 *Vector2) {
	log.Println("Calling MeshDataTool.SetVertexUv2()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(uv2)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_vertex_uv2", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshDataTool) SetVertexWeights(idx int64, weights *PoolRealArray) {
	log.Println("Calling MeshDataTool.SetVertexWeights()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(weights)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_vertex_weights", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   MeshDataToolImplementer is an interface for MeshDataTool objects.
*/
type MeshDataToolImplementer interface {
	class.Class
}
