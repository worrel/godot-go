//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package theme

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*
   Theme for skinning controls. Controls can be skinned individually, but for complex applications it's more efficient to just create a global theme that defines everything. This theme can be applied to any [Control], and it and its children will automatically use it. Theme resources can be alternatively loaded by writing them in a .theme file, see docs for more info.
*/
type Theme struct {
	resource.Resource
}

func (o *Theme) baseClass() string {
	return "Theme"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Theme) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Theme) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *Theme) X_EmitThemeChanged() {
	log.Println("Calling Theme.X_EmitThemeChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_emit_theme_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Theme) ClearColor(name string, aType string) {
	log.Println("Calling Theme.ClearColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Theme) ClearConstant(name string, aType string) {
	log.Println("Calling Theme.ClearConstant()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_constant", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Theme) ClearFont(name string, aType string) {
	log.Println("Calling Theme.ClearFont()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_font", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Theme) ClearIcon(name string, aType string) {
	log.Println("Calling Theme.ClearIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_icon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Theme) ClearStylebox(name string, aType string) {
	log.Println("Calling Theme.ClearStylebox()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_stylebox", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Theme) CopyDefaultTheme() {
	log.Println("Calling Theme.CopyDefaultTheme()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "copy_default_theme", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Theme) GetColor(name string, aType string) *Color {
	log.Println("Calling Theme.GetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) GetColorList(aType string) *PoolStringArray {
	log.Println("Calling Theme.GetColorList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_color_list", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) GetConstant(name string, aType string) int64 {
	log.Println("Calling Theme.GetConstant()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_constant", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) GetConstantList(aType string) *PoolStringArray {
	log.Println("Calling Theme.GetConstantList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_constant_list", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) GetDefaultFont() *Font {
	log.Println("Calling Theme.GetDefaultFont()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_default_font", goArguments, "*Font")

	returnValue := goRet.Interface().(*Font)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) GetFont(name string, aType string) *Font {
	log.Println("Calling Theme.GetFont()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_font", goArguments, "*Font")

	returnValue := goRet.Interface().(*Font)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) GetFontList(aType string) *PoolStringArray {
	log.Println("Calling Theme.GetFontList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_font_list", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) GetIcon(name string, aType string) *Texture {
	log.Println("Calling Theme.GetIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_icon", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) GetIconList(aType string) *PoolStringArray {
	log.Println("Calling Theme.GetIconList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_icon_list", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) GetStylebox(name string, aType string) *StyleBox {
	log.Println("Calling Theme.GetStylebox()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_stylebox", goArguments, "*StyleBox")

	returnValue := goRet.Interface().(*StyleBox)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) GetStyleboxList(aType string) *PoolStringArray {
	log.Println("Calling Theme.GetStyleboxList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_stylebox_list", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) GetStyleboxTypes() *PoolStringArray {
	log.Println("Calling Theme.GetStyleboxTypes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_stylebox_types", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) GetTypeList(aType string) *PoolStringArray {
	log.Println("Calling Theme.GetTypeList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_type_list", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) HasColor(name string, aType string) bool {
	log.Println("Calling Theme.HasColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_color", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) HasConstant(name string, aType string) bool {
	log.Println("Calling Theme.HasConstant()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_constant", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) HasFont(name string, aType string) bool {
	log.Println("Calling Theme.HasFont()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_font", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) HasIcon(name string, aType string) bool {
	log.Println("Calling Theme.HasIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_icon", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) HasStylebox(name string, aType string) bool {
	log.Println("Calling Theme.HasStylebox()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_stylebox", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Theme) SetColor(name string, aType string, color *Color) {
	log.Println("Calling Theme.SetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)
	goArguments[2] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Theme) SetConstant(name string, aType string, constant int64) {
	log.Println("Calling Theme.SetConstant()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)
	goArguments[2] = reflect.ValueOf(constant)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_constant", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Theme) SetDefaultFont(font *Font) {
	log.Println("Calling Theme.SetDefaultFont()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(font)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_default_font", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Theme) SetFont(name string, aType string, font *Font) {
	log.Println("Calling Theme.SetFont()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)
	goArguments[2] = reflect.ValueOf(font)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_font", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Theme) SetIcon(name string, aType string, texture *Texture) {
	log.Println("Calling Theme.SetIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)
	goArguments[2] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_icon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Theme) SetStylebox(name string, aType string, texture *StyleBox) {
	log.Println("Calling Theme.SetStylebox()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)
	goArguments[2] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_stylebox", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ThemeImplementer is an interface for Theme objects.
*/
type ThemeImplementer interface {
	class.Class
}
