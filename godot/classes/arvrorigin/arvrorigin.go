//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package arvrorigin

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/spatial"
)

/*
   This is a special node within the AR/VR system that maps the physical location of the center of our tracking space to the virtual location within our game world. There should be only one of these nodes in your scene and you must have one. All the ARVRCamera, ARVRController and ARVRAnchor nodes should be direct children of this node for spatial tracking to work correctly. It is the position of this node that you update when you're character needs to move through your game world while we're not moving in the real world. Movement in the real world is always in relation to this origin point. So say that your character is driving a car, the ARVROrigin node should be a child node of this car. If you implement a teleport system to move your character, you change the position of this node. Etc.
*/
type ARVROrigin struct {
	spatial.Spatial
}

func (o *ARVROrigin) baseClass() string {
	return "ARVROrigin"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ARVROrigin) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *ARVROrigin) getOwner() *C.godot_object {
	return o.owner
}

/*
   Get the world scale applied to our positioning.
*/
func (o *ARVROrigin) GetWorldScale() float64 {
	log.Println("Calling ARVROrigin.GetWorldScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_world_scale", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Changes the world scaling factor. Most AR/VR platforms will assume a unit size of 1 unit in your game world = 1 meter in the real world. This scale allows you to adjust this to the unit system you use in your game. Note that this method is a passthrough to the ARVRServer itself.
*/
func (o *ARVROrigin) SetWorldScale(worldScale float64) {
	log.Println("Calling ARVROrigin.SetWorldScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(worldScale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_world_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ARVROriginImplementer is an interface for ARVROrigin objects.
*/
type ARVROriginImplementer interface {
	class.Class
}
