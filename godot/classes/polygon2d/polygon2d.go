//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package polygon2d

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node2d"
)

/*
   A Polygon2D is defined by a set of points. Each point is connected to the next, with the final point being connected to the first, resulting in a closed polygon. Polygon2Ds can be filled with color (solid or gradient) or filled with a given texture.
*/
type Polygon2D struct {
	node2d.Node2D
}

func (o *Polygon2D) baseClass() string {
	return "Polygon2D"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Polygon2D) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Polygon2D) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *Polygon2D) X_GetTextureRotationd() float64 {
	log.Println("Calling Polygon2D.X_GetTextureRotationd()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_texture_rotationd", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Polygon2D) X_SetTextureRotationd(textureRotation float64) {
	log.Println("Calling Polygon2D.X_SetTextureRotationd()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(textureRotation)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_texture_rotationd", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Polygon2D) GetAntialiased() bool {
	log.Println("Calling Polygon2D.GetAntialiased()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_antialiased", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the polygon fill color.
*/
func (o *Polygon2D) GetColor() *Color {
	log.Println("Calling Polygon2D.GetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return whether this polygon is inverted or not.
*/
func (o *Polygon2D) GetInvert() bool {
	log.Println("Calling Polygon2D.GetInvert()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_invert", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the added padding around the bounding box.
*/
func (o *Polygon2D) GetInvertBorder() float64 {
	log.Println("Calling Polygon2D.GetInvertBorder()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_invert_border", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the offset for the polygon vertices.
*/
func (o *Polygon2D) GetOffset() *Vector2 {
	log.Println("Calling Polygon2D.GetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the set of vertices that defines this polygon.
*/
func (o *Polygon2D) GetPolygon() *PoolVector2Array {
	log.Println("Calling Polygon2D.GetPolygon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_polygon", goArguments, "*PoolVector2Array")

	returnValue := goRet.Interface().(*PoolVector2Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the polygon texture
*/
func (o *Polygon2D) GetTexture() *Texture {
	log.Println("Calling Polygon2D.GetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_texture", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the polygon texture offset.
*/
func (o *Polygon2D) GetTextureOffset() *Vector2 {
	log.Println("Calling Polygon2D.GetTextureOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_texture_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the rotation in radians of the texture polygon.
*/
func (o *Polygon2D) GetTextureRotation() float64 {
	log.Println("Calling Polygon2D.GetTextureRotation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_texture_rotation", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the uv coordinate multiplier.
*/
func (o *Polygon2D) GetTextureScale() *Vector2 {
	log.Println("Calling Polygon2D.GetTextureScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_texture_scale", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the texture coordinates associated with every vertex of the polygon.
*/
func (o *Polygon2D) GetUv() *PoolVector2Array {
	log.Println("Calling Polygon2D.GetUv()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_uv", goArguments, "*PoolVector2Array")

	returnValue := goRet.Interface().(*PoolVector2Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the list of vertex colors.
*/
func (o *Polygon2D) GetVertexColors() *PoolColorArray {
	log.Println("Calling Polygon2D.GetVertexColors()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vertex_colors", goArguments, "*PoolColorArray")

	returnValue := goRet.Interface().(*PoolColorArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Polygon2D) SetAntialiased(antialiased bool) {
	log.Println("Calling Polygon2D.SetAntialiased()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(antialiased)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_antialiased", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the polygon fill color. If the polygon has a texture defined, the defined texture will be multiplied by the polygon fill color. This, also, is the default color for those vertices that are not defined by [method get_vertex_colors].
*/
func (o *Polygon2D) SetColor(color *Color) {
	log.Println("Calling Polygon2D.SetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the polygon as the defined polygon bounding box minus the defined polygon (the defined polygon will appear as a hole on the square that contains the defined polygon).
*/
func (o *Polygon2D) SetInvert(invert bool) {
	log.Println("Calling Polygon2D.SetInvert()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(invert)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_invert", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add extra padding around the bounding box, making it bigger. Too small a value can make the polygon triangulate strangely, due to numerical imprecision.
*/
func (o *Polygon2D) SetInvertBorder(invertBorder float64) {
	log.Println("Calling Polygon2D.SetInvertBorder()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(invertBorder)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_invert_border", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the an offset that will be added to the vertices' position. E.g. if the offset is set to (10,10) then all the polygon points will move 10 units to the right and 10 units to the bottom.
*/
func (o *Polygon2D) SetOffset(offset *Vector2) {
	log.Println("Calling Polygon2D.SetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Define the set of vertices that will represent the polygon.
*/
func (o *Polygon2D) SetPolygon(polygon *PoolVector2Array) {
	log.Println("Calling Polygon2D.SetPolygon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(polygon)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_polygon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Polygon2D) SetTexture(texture *Texture) {
	log.Println("Calling Polygon2D.SetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_texture", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the offset of the polygon texture. Initially the texture will appear anchored to the polygon position, the offset is used to move the texture location away from that point (notice that the texture origin is set to its top left corner, so when offset is 0,0 the top left corner of the texture is at the polygon position), for example setting the offset to 10, 10 will move the texture 10 units to the left and 10 units to the top.
*/
func (o *Polygon2D) SetTextureOffset(textureOffset *Vector2) {
	log.Println("Calling Polygon2D.SetTextureOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(textureOffset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_texture_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the amount of rotation of the polygon texture, [code]texture_rotation[/code] is specified in radians and clockwise rotation.
*/
func (o *Polygon2D) SetTextureRotation(textureRotation float64) {
	log.Println("Calling Polygon2D.SetTextureRotation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(textureRotation)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_texture_rotation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the value that will multiply the uv coordinates ([method get_uv]) when applying the texture. Larger values make the texture smaller, and vice versa.
*/
func (o *Polygon2D) SetTextureScale(textureScale *Vector2) {
	log.Println("Calling Polygon2D.SetTextureScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(textureScale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_texture_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the texture coordinates for every vertex of the polygon. There should be one uv vertex for every vertex in the polygon. If there are less, the undefined ones will be assumed to be (0,0). Extra uv vertices are ignored.
*/
func (o *Polygon2D) SetUv(uv *PoolVector2Array) {
	log.Println("Calling Polygon2D.SetUv()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(uv)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_uv", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the color for each vertex of the polygon. There should be one color for every vertex in the polygon. If there are less, the undefined ones will be assumed to be [method get_color]. Extra color entries are ignored. Colors are interpolated between vertices, resulting in smooth gradients when they differ.
*/
func (o *Polygon2D) SetVertexColors(vertexColors *PoolColorArray) {
	log.Println("Calling Polygon2D.SetVertexColors()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(vertexColors)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_vertex_colors", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Polygon2DImplementer is an interface for Polygon2D objects.
*/
type Polygon2DImplementer interface {
	class.Class
}
