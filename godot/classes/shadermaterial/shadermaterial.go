//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package shadermaterial

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/material"
)

/*

 */
type ShaderMaterial struct {
	material.Material
}

func (o *ShaderMaterial) baseClass() string {
	return "ShaderMaterial"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ShaderMaterial) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *ShaderMaterial) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *ShaderMaterial) GetShader() *Shader {
	log.Println("Calling ShaderMaterial.GetShader()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shader", goArguments, "*Shader")

	returnValue := goRet.Interface().(*Shader)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ShaderMaterial) GetShaderParam(param string) *Variant {
	log.Println("Calling ShaderMaterial.GetShaderParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shader_param", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ShaderMaterial) SetShader(shader *Shader) {
	log.Println("Calling ShaderMaterial.SetShader()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shader)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shader", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ShaderMaterial) SetShaderParam(param string, value *Variant) {
	log.Println("Calling ShaderMaterial.SetShaderParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(param)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shader_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ShaderMaterialImplementer is an interface for ShaderMaterial objects.
*/
type ShaderMaterialImplementer interface {
	class.Class
}
