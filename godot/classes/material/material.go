//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package material

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*
   Material is a base [Resource] used for coloring and shading geometry. All materials inherit from it and almost all [VisualInstance] derived nodes carry a Material. A few flags and parameters are shared between all material types and are configured here.
*/
type Material struct {
	resource.Resource
}

func (o *Material) baseClass() string {
	return "Material"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Material) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Material) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *Material) GetNextPass() *Material {
	log.Println("Calling Material.GetNextPass()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_next_pass", goArguments, "*Material")

	returnValue := goRet.Interface().(*Material)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Material) GetRenderPriority() int64 {
	log.Println("Calling Material.GetRenderPriority()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_render_priority", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Material) SetNextPass(nextPass *Material) {
	log.Println("Calling Material.SetNextPass()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(nextPass)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_next_pass", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Material) SetRenderPriority(priority int64) {
	log.Println("Calling Material.SetRenderPriority()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(priority)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_render_priority", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   MaterialImplementer is an interface for Material objects.
*/
type MaterialImplementer interface {
	class.Class
}
