//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package curve

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*

 */
type Curve struct {
	resource.Resource
}

func (o *Curve) baseClass() string {
	return "Curve"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Curve) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Curve) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *Curve) X_GetData() *Array {
	log.Println("Calling Curve.X_GetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_data", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Curve) X_SetData(data *Array) {
	log.Println("Calling Curve.X_SetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Curve) AddPoint(position *Vector2, leftTangent float64, rightTangent float64, leftMode int64, rightMode int64) int64 {
	log.Println("Calling Curve.AddPoint()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(position)
	goArguments[1] = reflect.ValueOf(leftTangent)
	goArguments[2] = reflect.ValueOf(rightTangent)
	goArguments[3] = reflect.ValueOf(leftMode)
	goArguments[4] = reflect.ValueOf(rightMode)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "add_point", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Curve) Bake() {
	log.Println("Calling Curve.Bake()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "bake", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Curve) CleanDupes() {
	log.Println("Calling Curve.CleanDupes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clean_dupes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Curve) ClearPoints() {
	log.Println("Calling Curve.ClearPoints()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_points", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Curve) GetBakeResolution() int64 {
	log.Println("Calling Curve.GetBakeResolution()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bake_resolution", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Curve) GetMaxValue() float64 {
	log.Println("Calling Curve.GetMaxValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_max_value", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Curve) GetMinValue() float64 {
	log.Println("Calling Curve.GetMinValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_min_value", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Curve) GetPointLeftMode(index int64) int64 {
	log.Println("Calling Curve.GetPointLeftMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(index)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_point_left_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Curve) GetPointLeftTangent(index int64) float64 {
	log.Println("Calling Curve.GetPointLeftTangent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(index)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_point_left_tangent", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Curve) GetPointPosition(index int64) *Vector2 {
	log.Println("Calling Curve.GetPointPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(index)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_point_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Curve) GetPointRightMode(index int64) int64 {
	log.Println("Calling Curve.GetPointRightMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(index)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_point_right_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Curve) GetPointRightTangent(index int64) float64 {
	log.Println("Calling Curve.GetPointRightTangent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(index)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_point_right_tangent", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Curve) Interpolate(offset float64) float64 {
	log.Println("Calling Curve.Interpolate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "interpolate", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Curve) InterpolateBaked(offset float64) float64 {
	log.Println("Calling Curve.InterpolateBaked()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "interpolate_baked", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Curve) RemovePoint(index int64) {
	log.Println("Calling Curve.RemovePoint()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(index)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_point", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Curve) SetBakeResolution(resolution int64) {
	log.Println("Calling Curve.SetBakeResolution()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(resolution)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bake_resolution", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Curve) SetMaxValue(max float64) {
	log.Println("Calling Curve.SetMaxValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(max)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_max_value", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Curve) SetMinValue(min float64) {
	log.Println("Calling Curve.SetMinValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(min)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_min_value", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Curve) SetPointLeftMode(index int64, mode int64) {
	log.Println("Calling Curve.SetPointLeftMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(index)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_point_left_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Curve) SetPointLeftTangent(index int64, tangent float64) {
	log.Println("Calling Curve.SetPointLeftTangent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(index)
	goArguments[1] = reflect.ValueOf(tangent)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_point_left_tangent", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Curve) SetPointOffset(index int64, offset float64) {
	log.Println("Calling Curve.SetPointOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(index)
	goArguments[1] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_point_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Curve) SetPointRightMode(index int64, mode int64) {
	log.Println("Calling Curve.SetPointRightMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(index)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_point_right_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Curve) SetPointRightTangent(index int64, tangent float64) {
	log.Println("Calling Curve.SetPointRightTangent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(index)
	goArguments[1] = reflect.ValueOf(tangent)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_point_right_tangent", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Curve) SetPointValue(index int64, y float64) {
	log.Println("Calling Curve.SetPointValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(index)
	goArguments[1] = reflect.ValueOf(y)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_point_value", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   CurveImplementer is an interface for Curve objects.
*/
type CurveImplementer interface {
	class.Class
}
