//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package navigation

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/spatial"
)

/*

 */
type Navigation struct {
	spatial.Spatial
}

func (o *Navigation) baseClass() string {
	return "Navigation"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Navigation) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Navigation) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *Navigation) GetClosestPoint(toPoint *Vector3) *Vector3 {
	log.Println("Calling Navigation.GetClosestPoint()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(toPoint)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_closest_point", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Navigation) GetClosestPointNormal(toPoint *Vector3) *Vector3 {
	log.Println("Calling Navigation.GetClosestPointNormal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(toPoint)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_closest_point_normal", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Navigation) GetClosestPointOwner(toPoint *Vector3) *Object {
	log.Println("Calling Navigation.GetClosestPointOwner()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(toPoint)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_closest_point_owner", goArguments, "*Object")

	returnValue := goRet.Interface().(*Object)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Navigation) GetClosestPointToSegment(start *Vector3, end *Vector3, useCollision bool) *Vector3 {
	log.Println("Calling Navigation.GetClosestPointToSegment()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(start)
	goArguments[1] = reflect.ValueOf(end)
	goArguments[2] = reflect.ValueOf(useCollision)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_closest_point_to_segment", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Navigation) GetSimplePath(start *Vector3, end *Vector3, optimize bool) *PoolVector3Array {
	log.Println("Calling Navigation.GetSimplePath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(start)
	goArguments[1] = reflect.ValueOf(end)
	goArguments[2] = reflect.ValueOf(optimize)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_simple_path", goArguments, "*PoolVector3Array")

	returnValue := goRet.Interface().(*PoolVector3Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Navigation) GetUpVector() *Vector3 {
	log.Println("Calling Navigation.GetUpVector()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_up_vector", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Navigation) NavmeshCreate(mesh *NavigationMesh, xform *Transform, owner *Object) int64 {
	log.Println("Calling Navigation.NavmeshCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(xform)
	goArguments[2] = reflect.ValueOf(owner)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "navmesh_create", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Navigation) NavmeshRemove(id int64) {
	log.Println("Calling Navigation.NavmeshRemove()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "navmesh_remove", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Navigation) NavmeshSetTransform(id int64, xform *Transform) {
	log.Println("Calling Navigation.NavmeshSetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(xform)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "navmesh_set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Navigation) SetUpVector(up *Vector3) {
	log.Println("Calling Navigation.SetUpVector()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(up)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_up_vector", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   NavigationImplementer is an interface for Navigation objects.
*/
type NavigationImplementer interface {
	class.Class
}
