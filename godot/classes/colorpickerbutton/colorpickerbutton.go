//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package colorpickerbutton

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/button"
)

/*
   Encapsulates a [ColorPicker] making it accesible by pressing a button, pressing the button will toggle the [ColorPicker] visibility
*/
type ColorPickerButton struct {
	button.Button
}

func (o *ColorPickerButton) baseClass() string {
	return "ColorPickerButton"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ColorPickerButton) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *ColorPickerButton) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *ColorPickerButton) X_ColorChanged(arg0 *Color) {
	log.Println("Calling ColorPickerButton.X_ColorChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_color_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ColorPickerButton) GetPickColor() *Color {
	log.Println("Calling ColorPickerButton.GetPickColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_pick_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ColorPickerButton) GetPicker() *ColorPicker {
	log.Println("Calling ColorPickerButton.GetPicker()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_picker", goArguments, "*ColorPicker")

	returnValue := goRet.Interface().(*ColorPicker)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   See [method ColorPicker.is_edit_alpha]
*/
func (o *ColorPickerButton) IsEditingAlpha() bool {
	log.Println("Calling ColorPickerButton.IsEditingAlpha()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_editing_alpha", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   See [method ColorPicker.set_edit_alpha]
*/
func (o *ColorPickerButton) SetEditAlpha(show bool) {
	log.Println("Calling ColorPickerButton.SetEditAlpha()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(show)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_edit_alpha", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set new color to ColorRect. [codeblock] var cr = get_node("colorrect_node") cr.set_frame_color(Color(1, 0, 0, 1)) # Set color rect node to red [/codeblock]
*/
func (o *ColorPickerButton) SetPickColor(color *Color) {
	log.Println("Calling ColorPickerButton.SetPickColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_pick_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ColorPickerButtonImplementer is an interface for ColorPickerButton objects.
*/
type ColorPickerButtonImplementer interface {
	class.Class
}
