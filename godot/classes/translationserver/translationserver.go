//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package translationserver

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/object"
)

func newSingletonTranslationServer() *translationServer {
	obj := &translationServer{}
	ptr := C.godot_global_get_singleton(C.CString("TranslationServer"))
	obj.owner = (*C.godot_object)(ptr)
	return obj
}

/*

 */
var TranslationServer = newSingletonTranslationServer()

/*

 */
type translationServer struct {
	object.Object
}

func (o *translationServer) baseClass() string {
	return "TranslationServer"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *translationServer) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *translationServer) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *translationServer) AddTranslation(translation *Translation) {
	log.Println("Calling TranslationServer.AddTranslation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(translation)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_translation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *translationServer) Clear() {
	log.Println("Calling TranslationServer.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *translationServer) GetLocale() string {
	log.Println("Calling TranslationServer.GetLocale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_locale", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *translationServer) RemoveTranslation(translation *Translation) {
	log.Println("Calling TranslationServer.RemoveTranslation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(translation)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_translation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *translationServer) SetLocale(locale string) {
	log.Println("Calling TranslationServer.SetLocale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(locale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_locale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *translationServer) Translate(message string) string {
	log.Println("Calling TranslationServer.Translate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(message)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "translate", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}
