//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package packedscene

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*
   TODO: explain ownership, and that node does not need to own itself
*/
type PackedScene struct {
	resource.Resource
}

func (o *PackedScene) baseClass() string {
	return "PackedScene"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *PackedScene) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *PackedScene) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *PackedScene) X_GetBundledScene() *Dictionary {
	log.Println("Calling PackedScene.X_GetBundledScene()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_bundled_scene", goArguments, "*Dictionary")

	returnValue := goRet.Interface().(*Dictionary)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PackedScene) X_SetBundledScene(arg0 *Dictionary) {
	log.Println("Calling PackedScene.X_SetBundledScene()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_bundled_scene", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *PackedScene) CanInstance() bool {
	log.Println("Calling PackedScene.CanInstance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "can_instance", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PackedScene) GetState() *SceneState {
	log.Println("Calling PackedScene.GetState()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_state", goArguments, "*SceneState")

	returnValue := goRet.Interface().(*SceneState)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PackedScene) Instance(editState int64) *Node {
	log.Println("Calling PackedScene.Instance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(editState)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "instance", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Pack will ignore any sub-nodes not owned by given node. See [method Node.set_owner].
*/
func (o *PackedScene) Pack(path *Object) int64 {
	log.Println("Calling PackedScene.Pack()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "pack", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   PackedSceneImplementer is an interface for PackedScene objects.
*/
type PackedSceneImplementer interface {
	class.Class
}
