//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package funcref

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/reference"
)

/*
   In GDScript, functions are not [i]first-class objects[/i]. This means it is impossible to store them directly as variables, return them from another function, or pass them as arguments. However, by creating a [FuncRef] using the [method @GDScript.funcref] function, a reference to a function in a given object can be created, passed around and called.
*/
type FuncRef struct {
	reference.Reference
}

func (o *FuncRef) baseClass() string {
	return "FuncRef"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *FuncRef) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *FuncRef) getOwner() *C.godot_object {
	return o.owner
}

/*
   Calls the referenced function previously set by [method set_function] or [method @GDScript.funcref].
*/
func (o *FuncRef) CallFunc() *Variant {
	log.Println("Calling FuncRef.CallFunc()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "call_func", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   The name of the referenced function to call on the object, without parentheses or any parameters.
*/
func (o *FuncRef) SetFunction(name string) {
	log.Println("Calling FuncRef.SetFunction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_function", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The object containing the referenced function. This object must be of a type actually inheriting from [Object], not a built-in type such as [int], [Vector2] or [Dictionary].
*/
func (o *FuncRef) SetInstance(instance *Object) {
	log.Println("Calling FuncRef.SetInstance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(instance)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_instance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   FuncRefImplementer is an interface for FuncRef objects.
*/
type FuncRefImplementer interface {
	class.Class
}
