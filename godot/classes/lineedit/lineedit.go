//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package lineedit

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/control"
)

/*
   LineEdit provides a single line string editor, used for text fields.
*/
type LineEdit struct {
	control.Control
}

func (o *LineEdit) baseClass() string {
	return "LineEdit"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *LineEdit) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *LineEdit) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *LineEdit) X_EditorSettingsChanged() {
	log.Println("Calling LineEdit.X_EditorSettingsChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_editor_settings_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling LineEdit.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) X_ToggleDrawCaret() {
	log.Println("Calling LineEdit.X_ToggleDrawCaret()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_toggle_draw_caret", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Append text at cursor, scrolling the [LineEdit] when needed.
*/
func (o *LineEdit) AppendAtCursor(text string) {
	log.Println("Calling LineEdit.AppendAtCursor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "append_at_cursor", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clear the [LineEdit] text.
*/
func (o *LineEdit) Clear() {
	log.Println("Calling LineEdit.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Gets whether the line edit caret is blinking.
*/
func (o *LineEdit) CursorGetBlinkEnabled() bool {
	log.Println("Calling LineEdit.CursorGetBlinkEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "cursor_get_blink_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Gets the line edit caret blink speed.
*/
func (o *LineEdit) CursorGetBlinkSpeed() float64 {
	log.Println("Calling LineEdit.CursorGetBlinkSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "cursor_get_blink_speed", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the line edit caret to blink.
*/
func (o *LineEdit) CursorSetBlinkEnabled(enabled bool) {
	log.Println("Calling LineEdit.CursorSetBlinkEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "cursor_set_blink_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the line edit caret blink speed. Cannot be less then or equal to 0.
*/
func (o *LineEdit) CursorSetBlinkSpeed(blinkSpeed float64) {
	log.Println("Calling LineEdit.CursorSetBlinkSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(blinkSpeed)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "cursor_set_blink_speed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the align mode of the [LineEdit].
*/
func (o *LineEdit) GetAlign() int64 {
	log.Println("Calling LineEdit.GetAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_align", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the cursor position inside the [LineEdit].
*/
func (o *LineEdit) GetCursorPosition() int64 {
	log.Println("Calling LineEdit.GetCursorPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_cursor_position", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *LineEdit) GetExpandToTextLength() bool {
	log.Println("Calling LineEdit.GetExpandToTextLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_expand_to_text_length", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the maximum amount of characters the [LineEdit] can edit. If 0 is returned, no limit exists.
*/
func (o *LineEdit) GetMaxLength() int64 {
	log.Println("Calling LineEdit.GetMaxLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_max_length", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the [PopupMenu] of this [LineEdit].
*/
func (o *LineEdit) GetMenu() *PopupMenu {
	log.Println("Calling LineEdit.GetMenu()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_menu", goArguments, "*PopupMenu")

	returnValue := goRet.Interface().(*PopupMenu)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the placeholder text.
*/
func (o *LineEdit) GetPlaceholder() string {
	log.Println("Calling LineEdit.GetPlaceholder()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_placeholder", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return transparency of the placeholder text.
*/
func (o *LineEdit) GetPlaceholderAlpha() float64 {
	log.Println("Calling LineEdit.GetPlaceholderAlpha()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_placeholder_alpha", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the text in the [LineEdit].
*/
func (o *LineEdit) GetText() string {
	log.Println("Calling LineEdit.GetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_text", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the [i]editable[/i] status of the [LineEdit] (see [method set_editable]).
*/
func (o *LineEdit) IsEditable() bool {
	log.Println("Calling LineEdit.IsEditable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_editable", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the [i]secret[/i] status of the [LineEdit] (see [method set_secret]).
*/
func (o *LineEdit) IsSecret() bool {
	log.Println("Calling LineEdit.IsSecret()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_secret", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Execute a given action as defined in the MENU_* enum.
*/
func (o *LineEdit) MenuOption(option int64) {
	log.Println("Calling LineEdit.MenuOption()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(option)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "menu_option", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Select the text inside [LineEdit] by the given character positions. [code]from[/code] is default to the beginning. [code]to[/code] is default to the end. [codeblock] select() # select all select(5) # select from the fifth character to the end. select(2, 5) # select from the second to the fifth character. [/codeblock]
*/
func (o *LineEdit) Select(from int64, to int64) {
	log.Println("Calling LineEdit.Select()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(from)
	goArguments[1] = reflect.ValueOf(to)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "select", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Select the whole string.
*/
func (o *LineEdit) SelectAll() {
	log.Println("Calling LineEdit.SelectAll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "select_all", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set text alignment of the [LineEdit].
*/
func (o *LineEdit) SetAlign(align int64) {
	log.Println("Calling LineEdit.SetAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(align)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_align", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the cursor position inside the [LineEdit], causing it to scroll if needed.
*/
func (o *LineEdit) SetCursorPosition(position int64) {
	log.Println("Calling LineEdit.SetCursorPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_cursor_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the [i]editable[/i] status of the [LineEdit]. When disabled, existing text can't be modified and new text can't be added.
*/
func (o *LineEdit) SetEditable(enabled bool) {
	log.Println("Calling LineEdit.SetEditable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_editable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *LineEdit) SetExpandToTextLength(enabled bool) {
	log.Println("Calling LineEdit.SetExpandToTextLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_expand_to_text_length", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the maximum amount of characters the [LineEdit] can edit, and cropping existing text in case it exceeds that limit. Setting 0 removes the limit.
*/
func (o *LineEdit) SetMaxLength(chars int64) {
	log.Println("Calling LineEdit.SetMaxLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(chars)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_max_length", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the placeholder text.
*/
func (o *LineEdit) SetPlaceholder(text string) {
	log.Println("Calling LineEdit.SetPlaceholder()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_placeholder", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set transparency of the placeholder text.
*/
func (o *LineEdit) SetPlaceholderAlpha(alpha float64) {
	log.Println("Calling LineEdit.SetPlaceholderAlpha()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(alpha)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_placeholder_alpha", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the [i]secret[/i] status of the [LineEdit]. When enabled, every character is displayed as "*".
*/
func (o *LineEdit) SetSecret(enabled bool) {
	log.Println("Calling LineEdit.SetSecret()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_secret", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the text in the [LineEdit], clearing the existing one and the selection.
*/
func (o *LineEdit) SetText(text string) {
	log.Println("Calling LineEdit.SetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   LineEditImplementer is an interface for LineEdit objects.
*/
type LineEditImplementer interface {
	class.Class
}
