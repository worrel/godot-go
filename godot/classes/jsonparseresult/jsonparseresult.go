//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package jsonparseresult

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/reference"
)

/*
   Returned by [method JSON.parse], [JSONParseResult] contains decoded JSON or error information if JSON source not successfully parsed. You can check if JSON source was successfully parsed with [code]if json_result.error == 0[/code].
*/
type JSONParseResult struct {
	reference.Reference
}

func (o *JSONParseResult) baseClass() string {
	return "JSONParseResult"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *JSONParseResult) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *JSONParseResult) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *JSONParseResult) GetError() int64 {
	log.Println("Calling JSONParseResult.GetError()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_error", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *JSONParseResult) GetErrorLine() int64 {
	log.Println("Calling JSONParseResult.GetErrorLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_error_line", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *JSONParseResult) GetErrorString() string {
	log.Println("Calling JSONParseResult.GetErrorString()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_error_string", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *JSONParseResult) GetResult() *Variant {
	log.Println("Calling JSONParseResult.GetResult()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_result", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *JSONParseResult) SetError(error int64) {
	log.Println("Calling JSONParseResult.SetError()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(error)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_error", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *JSONParseResult) SetErrorLine(errorLine int64) {
	log.Println("Calling JSONParseResult.SetErrorLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(errorLine)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_error_line", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *JSONParseResult) SetErrorString(errorString string) {
	log.Println("Calling JSONParseResult.SetErrorString()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(errorString)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_error_string", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *JSONParseResult) SetResult(result *Variant) {
	log.Println("Calling JSONParseResult.SetResult()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(result)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_result", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   JSONParseResultImplementer is an interface for JSONParseResult objects.
*/
type JSONParseResultImplementer interface {
	class.Class
}
