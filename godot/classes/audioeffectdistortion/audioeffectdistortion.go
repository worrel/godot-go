//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package audioeffectdistortion

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/audioeffect"
)

/*
   Modify the sound and make it dirty. Different types are available : clip, tan, lofi (bit crushing), overdrive, or waveshape. By distorting the waveform the frequency content change, which will often make the sound "crunchy" or "abrasive". For games, it can simulate sound coming from some saturated device or speaker very efficiently.
*/
type AudioEffectDistortion struct {
	audioeffect.AudioEffect
}

func (o *AudioEffectDistortion) baseClass() string {
	return "AudioEffectDistortion"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *AudioEffectDistortion) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *AudioEffectDistortion) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *AudioEffectDistortion) GetDrive() float64 {
	log.Println("Calling AudioEffectDistortion.GetDrive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_drive", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDistortion) GetKeepHfHz() float64 {
	log.Println("Calling AudioEffectDistortion.GetKeepHfHz()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_keep_hf_hz", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDistortion) GetMode() int64 {
	log.Println("Calling AudioEffectDistortion.GetMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDistortion) GetPostGain() float64 {
	log.Println("Calling AudioEffectDistortion.GetPostGain()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_post_gain", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDistortion) GetPreGain() float64 {
	log.Println("Calling AudioEffectDistortion.GetPreGain()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_pre_gain", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDistortion) SetDrive(drive float64) {
	log.Println("Calling AudioEffectDistortion.SetDrive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(drive)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_drive", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDistortion) SetKeepHfHz(keepHfHz float64) {
	log.Println("Calling AudioEffectDistortion.SetKeepHfHz()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(keepHfHz)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_keep_hf_hz", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDistortion) SetMode(mode int64) {
	log.Println("Calling AudioEffectDistortion.SetMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDistortion) SetPostGain(postGain float64) {
	log.Println("Calling AudioEffectDistortion.SetPostGain()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(postGain)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_post_gain", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDistortion) SetPreGain(preGain float64) {
	log.Println("Calling AudioEffectDistortion.SetPreGain()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(preGain)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_pre_gain", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   AudioEffectDistortionImplementer is an interface for AudioEffectDistortion objects.
*/
type AudioEffectDistortionImplementer interface {
	class.Class
}
