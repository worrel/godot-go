//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package cubemap

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*

 */
type CubeMap struct {
	resource.Resource
}

func (o *CubeMap) baseClass() string {
	return "CubeMap"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *CubeMap) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *CubeMap) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *CubeMap) GetFlags() int64 {
	log.Println("Calling CubeMap.GetFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_flags", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *CubeMap) GetHeight() int64 {
	log.Println("Calling CubeMap.GetHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_height", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *CubeMap) GetLossyStorageQuality() float64 {
	log.Println("Calling CubeMap.GetLossyStorageQuality()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_lossy_storage_quality", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *CubeMap) GetSide(side int64) *Image {
	log.Println("Calling CubeMap.GetSide()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(side)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_side", goArguments, "*Image")

	returnValue := goRet.Interface().(*Image)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *CubeMap) GetStorage() int64 {
	log.Println("Calling CubeMap.GetStorage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_storage", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *CubeMap) GetWidth() int64 {
	log.Println("Calling CubeMap.GetWidth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_width", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *CubeMap) SetFlags(flags int64) {
	log.Println("Calling CubeMap.SetFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flags)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_flags", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *CubeMap) SetLossyStorageQuality(quality float64) {
	log.Println("Calling CubeMap.SetLossyStorageQuality()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(quality)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_lossy_storage_quality", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *CubeMap) SetSide(side int64, image *Image) {
	log.Println("Calling CubeMap.SetSide()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(side)
	goArguments[1] = reflect.ValueOf(image)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_side", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *CubeMap) SetStorage(mode int64) {
	log.Println("Calling CubeMap.SetStorage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_storage", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   CubeMapImplementer is an interface for CubeMap objects.
*/
type CubeMapImplementer interface {
	class.Class
}
