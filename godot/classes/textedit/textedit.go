//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package textedit

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/control"
)

/*
   TextEdit is meant for editing large, multiline text. It also has facilities for editing code, such as syntax highlighting support and multiple levels of undo/redo.
*/
type TextEdit struct {
	control.Control
}

func (o *TextEdit) baseClass() string {
	return "TextEdit"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *TextEdit) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *TextEdit) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *TextEdit) X_ClickSelectionHeld() {
	log.Println("Calling TextEdit.X_ClickSelectionHeld()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_click_selection_held", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) X_CursorChangedEmit() {
	log.Println("Calling TextEdit.X_CursorChangedEmit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_cursor_changed_emit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling TextEdit.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) X_PushCurrentOp() {
	log.Println("Calling TextEdit.X_PushCurrentOp()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_push_current_op", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) X_ScrollMoved(arg0 float64) {
	log.Println("Calling TextEdit.X_ScrollMoved()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_scroll_moved", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) X_TextChangedEmit() {
	log.Println("Calling TextEdit.X_TextChangedEmit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_text_changed_emit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) X_ToggleDrawCaret() {
	log.Println("Calling TextEdit.X_ToggleDrawCaret()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_toggle_draw_caret", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) X_VScrollInput() {
	log.Println("Calling TextEdit.X_VScrollInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_v_scroll_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add color region (given the delimiters) and its colors.
*/
func (o *TextEdit) AddColorRegion(beginKey string, endKey string, color *Color, lineOnly bool) {
	log.Println("Calling TextEdit.AddColorRegion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(beginKey)
	goArguments[1] = reflect.ValueOf(endKey)
	goArguments[2] = reflect.ValueOf(color)
	goArguments[3] = reflect.ValueOf(lineOnly)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_color_region", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add a keyword and its color.
*/
func (o *TextEdit) AddKeywordColor(keyword string, color *Color) {
	log.Println("Calling TextEdit.AddKeywordColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(keyword)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_keyword_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clear all the syntax coloring information.
*/
func (o *TextEdit) ClearColors() {
	log.Println("Calling TextEdit.ClearColors()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_colors", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clear the undo history.
*/
func (o *TextEdit) ClearUndoHistory() {
	log.Println("Calling TextEdit.ClearUndoHistory()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_undo_history", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Copy the current selection.
*/
func (o *TextEdit) Copy() {
	log.Println("Calling TextEdit.Copy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "copy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Gets whether the text editor caret is blinking.
*/
func (o *TextEdit) CursorGetBlinkEnabled() bool {
	log.Println("Calling TextEdit.CursorGetBlinkEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "cursor_get_blink_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Gets the text editor caret blink speed.
*/
func (o *TextEdit) CursorGetBlinkSpeed() float64 {
	log.Println("Calling TextEdit.CursorGetBlinkSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "cursor_get_blink_speed", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the column the editing cursor is at.
*/
func (o *TextEdit) CursorGetColumn() int64 {
	log.Println("Calling TextEdit.CursorGetColumn()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "cursor_get_column", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the line the editing cursor is at.
*/
func (o *TextEdit) CursorGetLine() int64 {
	log.Println("Calling TextEdit.CursorGetLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "cursor_get_line", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Gets whether the text editor caret is in block mode.
*/
func (o *TextEdit) CursorIsBlockMode() bool {
	log.Println("Calling TextEdit.CursorIsBlockMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "cursor_is_block_mode", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the text editor caret to blink.
*/
func (o *TextEdit) CursorSetBlinkEnabled(enable bool) {
	log.Println("Calling TextEdit.CursorSetBlinkEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "cursor_set_blink_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the text editor caret blink speed. Cannot be less then or equal to 0.
*/
func (o *TextEdit) CursorSetBlinkSpeed(blinkSpeed float64) {
	log.Println("Calling TextEdit.CursorSetBlinkSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(blinkSpeed)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "cursor_set_blink_speed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the text editor caret to block mode.
*/
func (o *TextEdit) CursorSetBlockMode(enable bool) {
	log.Println("Calling TextEdit.CursorSetBlockMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "cursor_set_block_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextEdit) CursorSetColumn(column int64, adjustViewport bool) {
	log.Println("Calling TextEdit.CursorSetColumn()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(column)
	goArguments[1] = reflect.ValueOf(adjustViewport)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "cursor_set_column", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextEdit) CursorSetLine(line int64, adjustViewport bool) {
	log.Println("Calling TextEdit.CursorSetLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(line)
	goArguments[1] = reflect.ValueOf(adjustViewport)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "cursor_set_line", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Cut the current selection.
*/
func (o *TextEdit) Cut() {
	log.Println("Calling TextEdit.Cut()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "cut", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the text of a specific line.
*/
func (o *TextEdit) GetLine(line int64) string {
	log.Println("Calling TextEdit.GetLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(line)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_line", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the amount of total lines in the text.
*/
func (o *TextEdit) GetLineCount() int64 {
	log.Println("Calling TextEdit.GetLineCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_line_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextEdit) GetMenu() *PopupMenu {
	log.Println("Calling TextEdit.GetMenu()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_menu", goArguments, "*PopupMenu")

	returnValue := goRet.Interface().(*PopupMenu)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the selection begin column.
*/
func (o *TextEdit) GetSelectionFromColumn() int64 {
	log.Println("Calling TextEdit.GetSelectionFromColumn()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_selection_from_column", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the selection begin line.
*/
func (o *TextEdit) GetSelectionFromLine() int64 {
	log.Println("Calling TextEdit.GetSelectionFromLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_selection_from_line", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the text inside the selection.
*/
func (o *TextEdit) GetSelectionText() string {
	log.Println("Calling TextEdit.GetSelectionText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_selection_text", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the selection end column.
*/
func (o *TextEdit) GetSelectionToColumn() int64 {
	log.Println("Calling TextEdit.GetSelectionToColumn()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_selection_to_column", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the selection end line.
*/
func (o *TextEdit) GetSelectionToLine() int64 {
	log.Println("Calling TextEdit.GetSelectionToLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_selection_to_line", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the whole text.
*/
func (o *TextEdit) GetText() string {
	log.Println("Calling TextEdit.GetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_text", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextEdit) GetVScrollSpeed() float64 {
	log.Println("Calling TextEdit.GetVScrollSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_v_scroll_speed", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextEdit) GetWordUnderCursor() string {
	log.Println("Calling TextEdit.GetWordUnderCursor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_word_under_cursor", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Insert a given text at the cursor position.
*/
func (o *TextEdit) InsertTextAtCursor(text string) {
	log.Println("Calling TextEdit.InsertTextAtCursor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "insert_text_at_cursor", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns true if highlight all occurrences is enabled.
*/
func (o *TextEdit) IsHighlightAllOccurrencesEnabled() bool {
	log.Println("Calling TextEdit.IsHighlightAllOccurrencesEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_highlight_all_occurrences_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if the selection is active.
*/
func (o *TextEdit) IsSelectionActive() bool {
	log.Println("Calling TextEdit.IsSelectionActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_selection_active", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if line numbers are enabled.
*/
func (o *TextEdit) IsShowLineNumbersEnabled() bool {
	log.Println("Calling TextEdit.IsShowLineNumbersEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_show_line_numbers_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextEdit) IsSmoothScrollEnabled() bool {
	log.Println("Calling TextEdit.IsSmoothScrollEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_smooth_scroll_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if the syntax coloring is enabled.
*/
func (o *TextEdit) IsSyntaxColoringEnabled() bool {
	log.Println("Calling TextEdit.IsSyntaxColoringEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_syntax_coloring_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextEdit) MenuOption(option int64) {
	log.Println("Calling TextEdit.MenuOption()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(option)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "menu_option", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Paste the current selection.
*/
func (o *TextEdit) Paste() {
	log.Println("Calling TextEdit.Paste()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "paste", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Perform redo operation.
*/
func (o *TextEdit) Redo() {
	log.Println("Calling TextEdit.Redo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "redo", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Perform a search inside the text. Search flags can be specified in the SEARCH_* enum.
*/
func (o *TextEdit) Search(key string, flags int64, fromLine int64, fromColumn int64) *PoolIntArray {
	log.Println("Calling TextEdit.Search()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(key)
	goArguments[1] = reflect.ValueOf(flags)
	goArguments[2] = reflect.ValueOf(fromLine)
	goArguments[3] = reflect.ValueOf(fromColumn)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "search", goArguments, "*PoolIntArray")

	returnValue := goRet.Interface().(*PoolIntArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Perform selection, from line/column to line/column.
*/
func (o *TextEdit) Select(fromLine int64, fromColumn int64, toLine int64, toColumn int64) {
	log.Println("Calling TextEdit.Select()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(fromLine)
	goArguments[1] = reflect.ValueOf(fromColumn)
	goArguments[2] = reflect.ValueOf(toLine)
	goArguments[3] = reflect.ValueOf(toColumn)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "select", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Select all the text.
*/
func (o *TextEdit) SelectAll() {
	log.Println("Calling TextEdit.SelectAll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "select_all", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set to enable highlighting all occurrences of the current selection.
*/
func (o *TextEdit) SetHighlightAllOccurrences(enable bool) {
	log.Println("Calling TextEdit.SetHighlightAllOccurrences()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_highlight_all_occurrences", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the maximum amount of characters editable.
*/
func (o *TextEdit) SetMaxChars(amount int64) {
	log.Println("Calling TextEdit.SetMaxChars()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_max_chars", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the text editor as read-only. Text can be displayed but not edited.
*/
func (o *TextEdit) SetReadonly(enable bool) {
	log.Println("Calling TextEdit.SetReadonly()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_readonly", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set to enable showing line numbers.
*/
func (o *TextEdit) SetShowLineNumbers(enable bool) {
	log.Println("Calling TextEdit.SetShowLineNumbers()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_show_line_numbers", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextEdit) SetSmoothScrollEnable(enable bool) {
	log.Println("Calling TextEdit.SetSmoothScrollEnable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_smooth_scroll_enable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set to enable the syntax coloring.
*/
func (o *TextEdit) SetSyntaxColoring(enable bool) {
	log.Println("Calling TextEdit.SetSyntaxColoring()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_syntax_coloring", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the entire text.
*/
func (o *TextEdit) SetText(text string) {
	log.Println("Calling TextEdit.SetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextEdit) SetVScrollSpeed(speed float64) {
	log.Println("Calling TextEdit.SetVScrollSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(speed)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_v_scroll_speed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Enable text wrapping when it goes beyond he edge of what is visible.
*/
func (o *TextEdit) SetWrap(enable bool) {
	log.Println("Calling TextEdit.SetWrap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_wrap", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Perform undo operation.
*/
func (o *TextEdit) Undo() {
	log.Println("Calling TextEdit.Undo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "undo", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   TextEditImplementer is an interface for TextEdit objects.
*/
type TextEditImplementer interface {
	class.Class
}
