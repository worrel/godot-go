//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package tabcontainer

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/control"
)

/*
   Tabbed Container. Contains several children controls, but shows only one at the same time. Clicking on the top tabs allows to change the currently visible one. Children controls of this one automatically.
*/
type TabContainer struct {
	control.Control
}

func (o *TabContainer) baseClass() string {
	return "TabContainer"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *TabContainer) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *TabContainer) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *TabContainer) X_ChildRenamedCallback() {
	log.Println("Calling TabContainer.X_ChildRenamedCallback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_child_renamed_callback", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TabContainer) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling TabContainer.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns [code]true[/code] if the tabs are visible.
*/
func (o *TabContainer) AreTabsVisible() bool {
	log.Println("Calling TabContainer.AreTabsVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "are_tabs_visible", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the current tab index that is being shown.
*/
func (o *TabContainer) GetCurrentTab() int64 {
	log.Println("Calling TabContainer.GetCurrentTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_current_tab", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TabContainer) GetCurrentTabControl() *Control {
	log.Println("Calling TabContainer.GetCurrentTabControl()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_current_tab_control", goArguments, "*Control")

	returnValue := goRet.Interface().(*Control)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TabContainer) GetPopup() *Popup {
	log.Println("Calling TabContainer.GetPopup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_popup", goArguments, "*Popup")

	returnValue := goRet.Interface().(*Popup)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the previous tab index that was being shown.
*/
func (o *TabContainer) GetPreviousTab() int64 {
	log.Println("Calling TabContainer.GetPreviousTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_previous_tab", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the tab alignment.See the ALIGN_* constants.
*/
func (o *TabContainer) GetTabAlign() int64 {
	log.Println("Calling TabContainer.GetTabAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tab_align", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the current tab control that is being shown.
*/
func (o *TabContainer) GetTabControl(idx int64) *Control {
	log.Println("Calling TabContainer.GetTabControl()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tab_control", goArguments, "*Control")

	returnValue := goRet.Interface().(*Control)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the amount of tabs.
*/
func (o *TabContainer) GetTabCount() int64 {
	log.Println("Calling TabContainer.GetTabCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tab_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if the tab at index [code]tab_idx[/code] is disabled.
*/
func (o *TabContainer) GetTabDisabled(tabIdx int64) bool {
	log.Println("Calling TabContainer.GetTabDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tab_disabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [Texture] for the tab at index [code]tab_idx[/code] or null if the tab has no [Texture].
*/
func (o *TabContainer) GetTabIcon(tabIdx int64) *Texture {
	log.Println("Calling TabContainer.GetTabIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tab_icon", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the title for the tab at index [code]tab_idx[/code]. Tab titles are by default the children node name, but this can be overridden.
*/
func (o *TabContainer) GetTabTitle(tabIdx int64) string {
	log.Println("Calling TabContainer.GetTabTitle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tab_title", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Bring a tab (and the Control it represents) to the front, and hide the rest.
*/
func (o *TabContainer) SetCurrentTab(tabIdx int64) {
	log.Println("Calling TabContainer.SetCurrentTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_current_tab", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TabContainer) SetPopup(popup *Object) {
	log.Println("Calling TabContainer.SetPopup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(popup)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_popup", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set tab alignment, from the ALIGN_* enum. Moves tabs to the left, right or center.
*/
func (o *TabContainer) SetTabAlign(align int64) {
	log.Println("Calling TabContainer.SetTabAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(align)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tab_align", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set tab at index [code]tab_idx[/code] disabled.
*/
func (o *TabContainer) SetTabDisabled(tabIdx int64, disabled bool) {
	log.Println("Calling TabContainer.SetTabDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(tabIdx)
	goArguments[1] = reflect.ValueOf(disabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tab_disabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set an icon for a tab at index [code]tab_idx[/code].
*/
func (o *TabContainer) SetTabIcon(tabIdx int64, icon *Texture) {
	log.Println("Calling TabContainer.SetTabIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(tabIdx)
	goArguments[1] = reflect.ValueOf(icon)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tab_icon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set a title for the tab at index [code]tab_idx[/code]. Tab titles are by default the children node name, but this can be overridden.
*/
func (o *TabContainer) SetTabTitle(tabIdx int64, title string) {
	log.Println("Calling TabContainer.SetTabTitle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(tabIdx)
	goArguments[1] = reflect.ValueOf(title)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tab_title", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] all the tabs will be visible.
*/
func (o *TabContainer) SetTabsVisible(visible bool) {
	log.Println("Calling TabContainer.SetTabsVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(visible)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tabs_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   TabContainerImplementer is an interface for TabContainer objects.
*/
type TabContainerImplementer interface {
	class.Class
}
