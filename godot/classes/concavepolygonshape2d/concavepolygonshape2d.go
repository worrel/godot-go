//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package concavepolygonshape2d

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/shape2d"
)

/*
   Concave polygon 2D shape resource for physics. It is made out of segments and is very optimal for complex polygonal concave collisions. It is really not advised to use for [RigidBody2D] nodes. A CollisionPolygon2D in convex decomposition mode (solids) or several convex objects are advised for that instead. Otherwise, a concave polygon 2D shape is better for static collisions. The main difference between a [ConvexPolygonShape2D] and a [ConcavePolygonShape2D] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.
*/
type ConcavePolygonShape2D struct {
	shape2d.Shape2D
}

func (o *ConcavePolygonShape2D) baseClass() string {
	return "ConcavePolygonShape2D"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ConcavePolygonShape2D) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *ConcavePolygonShape2D) getOwner() *C.godot_object {
	return o.owner
}

/*
   Return the array of segments.
*/
func (o *ConcavePolygonShape2D) GetSegments() *PoolVector2Array {
	log.Println("Calling ConcavePolygonShape2D.GetSegments()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_segments", goArguments, "*PoolVector2Array")

	returnValue := goRet.Interface().(*PoolVector2Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the array of segments.
*/
func (o *ConcavePolygonShape2D) SetSegments(segments *PoolVector2Array) {
	log.Println("Calling ConcavePolygonShape2D.SetSegments()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(segments)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_segments", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ConcavePolygonShape2DImplementer is an interface for ConcavePolygonShape2D objects.
*/
type ConcavePolygonShape2DImplementer interface {
	class.Class
}
