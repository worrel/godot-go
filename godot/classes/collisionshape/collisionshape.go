//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package collisionshape

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/spatial"
)

/*
   Editor facility for creating and editing collision shapes in 3D space. You can use this node to represent all sorts of collision shapes, for example, add this to an [Area] to give it a detection shape, or add it to a [PhysicsBody] to give create solid object. [b]IMPORTANT[/b]: this is an Editor-only helper to create shapes, use [method get_shape] to get the actual shape.
*/
type CollisionShape struct {
	spatial.Spatial
}

func (o *CollisionShape) baseClass() string {
	return "CollisionShape"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *CollisionShape) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *CollisionShape) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *CollisionShape) GetShape() *Shape {
	log.Println("Calling CollisionShape.GetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shape", goArguments, "*Shape")

	returnValue := goRet.Interface().(*Shape)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *CollisionShape) IsDisabled() bool {
	log.Println("Calling CollisionShape.IsDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_disabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the collision shape's shape to the addition of all its convexed [MeshInstance] siblings geometry.
*/
func (o *CollisionShape) MakeConvexFromBrothers() {
	log.Println("Calling CollisionShape.MakeConvexFromBrothers()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "make_convex_from_brothers", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If this method exists within a script it will be called whenever the shape resource has been modified.
*/
func (o *CollisionShape) ResourceChanged(resource *Resource) {
	log.Println("Calling CollisionShape.ResourceChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(resource)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "resource_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *CollisionShape) SetDisabled(enable bool) {
	log.Println("Calling CollisionShape.SetDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_disabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *CollisionShape) SetShape(shape *Shape) {
	log.Println("Calling CollisionShape.SetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shape)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   CollisionShapeImplementer is an interface for CollisionShape objects.
*/
type CollisionShapeImplementer interface {
	class.Class
}
