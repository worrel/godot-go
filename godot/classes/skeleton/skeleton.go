//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package skeleton

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/spatial"
)

/*
   Skeleton provides a hierarchical interface for managing bones, including pose, rest and animation (see [Animation]). Skeleton will support rag doll dynamics in the future.
*/
type Skeleton struct {
	spatial.Spatial
}

func (o *Skeleton) baseClass() string {
	return "Skeleton"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Skeleton) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Skeleton) getOwner() *C.godot_object {
	return o.owner
}

/*
   Add a bone, with name "name". [method get_bone_count] will become the bone index.
*/
func (o *Skeleton) AddBone(name string) {
	log.Println("Calling Skeleton.AddBone()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_bone", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Deprecated soon.
*/
func (o *Skeleton) BindChildNodeToBone(boneIdx int64, node *Object) {
	log.Println("Calling Skeleton.BindChildNodeToBone()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(boneIdx)
	goArguments[1] = reflect.ValueOf(node)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "bind_child_node_to_bone", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clear all the bones in this skeleton.
*/
func (o *Skeleton) ClearBones() {
	log.Println("Calling Skeleton.ClearBones()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_bones", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the bone index that matches "name" as its name.
*/
func (o *Skeleton) FindBone(name string) int64 {
	log.Println("Calling Skeleton.FindBone()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "find_bone", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the amount of bones in the skeleton.
*/
func (o *Skeleton) GetBoneCount() int64 {
	log.Println("Calling Skeleton.GetBoneCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bone_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Skeleton) GetBoneCustomPose(boneIdx int64) *Transform {
	log.Println("Calling Skeleton.GetBoneCustomPose()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(boneIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bone_custom_pose", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Skeleton) GetBoneGlobalPose(boneIdx int64) *Transform {
	log.Println("Calling Skeleton.GetBoneGlobalPose()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(boneIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bone_global_pose", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the name of the bone at index "index"
*/
func (o *Skeleton) GetBoneName(boneIdx int64) string {
	log.Println("Calling Skeleton.GetBoneName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(boneIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bone_name", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the bone index which is the parent of the bone at "bone_idx". If -1, then bone has no parent. Note that the parent bone returned will always be less than "bone_idx".
*/
func (o *Skeleton) GetBoneParent(boneIdx int64) int64 {
	log.Println("Calling Skeleton.GetBoneParent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(boneIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bone_parent", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the pose transform for bone "bone_idx".
*/
func (o *Skeleton) GetBonePose(boneIdx int64) *Transform {
	log.Println("Calling Skeleton.GetBonePose()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(boneIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bone_pose", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the rest transform for a bone "bone_idx".
*/
func (o *Skeleton) GetBoneRest(boneIdx int64) *Transform {
	log.Println("Calling Skeleton.GetBoneRest()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(boneIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bone_rest", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Skeleton) GetBoneTransform(boneIdx int64) *Transform {
	log.Println("Calling Skeleton.GetBoneTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(boneIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bone_transform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Deprecated soon.
*/
func (o *Skeleton) GetBoundChildNodesToBone(boneIdx int64) *Array {
	log.Println("Calling Skeleton.GetBoundChildNodesToBone()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(boneIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bound_child_nodes_to_bone", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Skeleton) IsBoneRestDisabled(boneIdx int64) bool {
	log.Println("Calling Skeleton.IsBoneRestDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(boneIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_bone_rest_disabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Skeleton) SetBoneCustomPose(boneIdx int64, customPose *Transform) {
	log.Println("Calling Skeleton.SetBoneCustomPose()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(boneIdx)
	goArguments[1] = reflect.ValueOf(customPose)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bone_custom_pose", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Skeleton) SetBoneDisableRest(boneIdx int64, disable bool) {
	log.Println("Calling Skeleton.SetBoneDisableRest()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(boneIdx)
	goArguments[1] = reflect.ValueOf(disable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bone_disable_rest", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Skeleton) SetBoneGlobalPose(boneIdx int64, pose *Transform) {
	log.Println("Calling Skeleton.SetBoneGlobalPose()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(boneIdx)
	goArguments[1] = reflect.ValueOf(pose)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bone_global_pose", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the bone index "parent_idx" as the parent of the bone at "bone_idx". If -1, then bone has no parent. Note: "parent_idx" must be less than "bone_idx".
*/
func (o *Skeleton) SetBoneParent(boneIdx int64, parentIdx int64) {
	log.Println("Calling Skeleton.SetBoneParent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(boneIdx)
	goArguments[1] = reflect.ValueOf(parentIdx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bone_parent", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the pose transform for bone "bone_idx".
*/
func (o *Skeleton) SetBonePose(boneIdx int64, pose *Transform) {
	log.Println("Calling Skeleton.SetBonePose()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(boneIdx)
	goArguments[1] = reflect.ValueOf(pose)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bone_pose", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the rest transform for bone "bone_idx"
*/
func (o *Skeleton) SetBoneRest(boneIdx int64, rest *Transform) {
	log.Println("Calling Skeleton.SetBoneRest()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(boneIdx)
	goArguments[1] = reflect.ValueOf(rest)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bone_rest", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Deprecated soon.
*/
func (o *Skeleton) UnbindChildNodeFromBone(boneIdx int64, node *Object) {
	log.Println("Calling Skeleton.UnbindChildNodeFromBone()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(boneIdx)
	goArguments[1] = reflect.ValueOf(node)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "unbind_child_node_from_bone", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Skeleton) UnparentBoneAndRest(boneIdx int64) {
	log.Println("Calling Skeleton.UnparentBoneAndRest()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(boneIdx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "unparent_bone_and_rest", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SkeletonImplementer is an interface for Skeleton objects.
*/
type SkeletonImplementer interface {
	class.Class
}
