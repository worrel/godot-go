//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package textureprogress

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/ranges"
)

/*
   TextureProgress works like [ProgressBar] but it uses up to 3 textures instead of Godot's [Theme] resource. Works horizontally, vertically, and radially.
*/
type TextureProgress struct {
	ranges.Range
}

func (o *TextureProgress) baseClass() string {
	return "TextureProgress"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *TextureProgress) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *TextureProgress) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *TextureProgress) GetFillDegrees() float64 {
	log.Println("Calling TextureProgress.GetFillDegrees()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fill_degrees", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextureProgress) GetFillMode() int64 {
	log.Println("Calling TextureProgress.GetFillMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fill_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if textures are stretched as nine-patches or false otherwise.
*/
func (o *TextureProgress) GetNinePatchStretch() bool {
	log.Println("Calling TextureProgress.GetNinePatchStretch()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_nine_patch_stretch", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextureProgress) GetOverTexture() *Texture {
	log.Println("Calling TextureProgress.GetOverTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_over_texture", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextureProgress) GetProgressTexture() *Texture {
	log.Println("Calling TextureProgress.GetProgressTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_progress_texture", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextureProgress) GetRadialCenterOffset() *Vector2 {
	log.Println("Calling TextureProgress.GetRadialCenterOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_radial_center_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextureProgress) GetRadialInitialAngle() float64 {
	log.Println("Calling TextureProgress.GetRadialInitialAngle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_radial_initial_angle", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return nine-patch texture offset for a given margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM).
*/
func (o *TextureProgress) GetStretchMargin(margin int64) int64 {
	log.Println("Calling TextureProgress.GetStretchMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(margin)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_stretch_margin", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextureProgress) GetUnderTexture() *Texture {
	log.Println("Calling TextureProgress.GetUnderTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_under_texture", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextureProgress) SetFillDegrees(mode float64) {
	log.Println("Calling TextureProgress.SetFillDegrees()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fill_degrees", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextureProgress) SetFillMode(mode int64) {
	log.Println("Calling TextureProgress.SetFillMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fill_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set if textures should be stretched as nine-patches.
*/
func (o *TextureProgress) SetNinePatchStretch(stretch bool) {
	log.Println("Calling TextureProgress.SetNinePatchStretch()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(stretch)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_nine_patch_stretch", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextureProgress) SetOverTexture(tex *Texture) {
	log.Println("Calling TextureProgress.SetOverTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tex)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_over_texture", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextureProgress) SetProgressTexture(tex *Texture) {
	log.Println("Calling TextureProgress.SetProgressTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tex)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_progress_texture", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextureProgress) SetRadialCenterOffset(mode *Vector2) {
	log.Println("Calling TextureProgress.SetRadialCenterOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_radial_center_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextureProgress) SetRadialInitialAngle(mode float64) {
	log.Println("Calling TextureProgress.SetRadialInitialAngle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_radial_initial_angle", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set nine-patch texture offset for a given margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM).
*/
func (o *TextureProgress) SetStretchMargin(margin int64, value int64) {
	log.Println("Calling TextureProgress.SetStretchMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(margin)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_stretch_margin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextureProgress) SetUnderTexture(tex *Texture) {
	log.Println("Calling TextureProgress.SetUnderTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tex)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_under_texture", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   TextureProgressImplementer is an interface for TextureProgress objects.
*/
type TextureProgressImplementer interface {
	class.Class
}
