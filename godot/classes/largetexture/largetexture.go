//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package largetexture

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/texture"
)

/*
   A Texture capable of storing many smaller Textures with offsets. You can dynamically add pieces([Texture]) to this [code]LargeTexture[/code] using different offsets.
*/
type LargeTexture struct {
	texture.Texture
}

func (o *LargeTexture) baseClass() string {
	return "LargeTexture"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *LargeTexture) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *LargeTexture) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *LargeTexture) X_GetData() *Array {
	log.Println("Calling LargeTexture.X_GetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_data", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *LargeTexture) X_SetData(data *Array) {
	log.Println("Calling LargeTexture.X_SetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add another [Texture] to this [code]LargeTexture[/code], starting on offset "ofs".
*/
func (o *LargeTexture) AddPiece(ofs *Vector2, texture *Texture) int64 {
	log.Println("Calling LargeTexture.AddPiece()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(ofs)
	goArguments[1] = reflect.ValueOf(texture)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "add_piece", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Clears the [code]LargeTexture[/code].
*/
func (o *LargeTexture) Clear() {
	log.Println("Calling LargeTexture.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the number of pieces currently in this [code]LargeTexture[/code].
*/
func (o *LargeTexture) GetPieceCount() int64 {
	log.Println("Calling LargeTexture.GetPieceCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_piece_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the offset of the piece with index "idx".
*/
func (o *LargeTexture) GetPieceOffset(idx int64) *Vector2 {
	log.Println("Calling LargeTexture.GetPieceOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_piece_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [Texture] of the piece with index "idx".
*/
func (o *LargeTexture) GetPieceTexture(idx int64) *Texture {
	log.Println("Calling LargeTexture.GetPieceTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_piece_texture", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the offset of the piece with index "idx" to "ofs".
*/
func (o *LargeTexture) SetPieceOffset(idx int64, ofs *Vector2) {
	log.Println("Calling LargeTexture.SetPieceOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(ofs)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_piece_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the [Texture] of the piece with index "idx" to "ofs".
*/
func (o *LargeTexture) SetPieceTexture(idx int64, texture *Texture) {
	log.Println("Calling LargeTexture.SetPieceTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_piece_texture", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the size of this [code]LargeTexture[/code].
*/
func (o *LargeTexture) SetSize(size *Vector2) {
	log.Println("Calling LargeTexture.SetSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(size)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   LargeTextureImplementer is an interface for LargeTexture objects.
*/
type LargeTextureImplementer interface {
	class.Class
}
