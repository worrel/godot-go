//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package editorfilesystemdirectory

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/object"
)

/*

 */
type EditorFileSystemDirectory struct {
	object.Object
}

func (o *EditorFileSystemDirectory) baseClass() string {
	return "EditorFileSystemDirectory"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *EditorFileSystemDirectory) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *EditorFileSystemDirectory) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *EditorFileSystemDirectory) FindDirIndex(name string) int64 {
	log.Println("Calling EditorFileSystemDirectory.FindDirIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "find_dir_index", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileSystemDirectory) FindFileIndex(name string) int64 {
	log.Println("Calling EditorFileSystemDirectory.FindFileIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "find_file_index", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileSystemDirectory) GetFile(idx int64) string {
	log.Println("Calling EditorFileSystemDirectory.GetFile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_file", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileSystemDirectory) GetFileCount() int64 {
	log.Println("Calling EditorFileSystemDirectory.GetFileCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_file_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileSystemDirectory) GetFileImportIsValid(idx int64) bool {
	log.Println("Calling EditorFileSystemDirectory.GetFileImportIsValid()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_file_import_is_valid", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileSystemDirectory) GetFilePath(idx int64) string {
	log.Println("Calling EditorFileSystemDirectory.GetFilePath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_file_path", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileSystemDirectory) GetFileType(idx int64) string {
	log.Println("Calling EditorFileSystemDirectory.GetFileType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_file_type", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileSystemDirectory) GetName() string {
	log.Println("Calling EditorFileSystemDirectory.GetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_name", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileSystemDirectory) GetParent() *EditorFileSystemDirectory {
	log.Println("Calling EditorFileSystemDirectory.GetParent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_parent", goArguments, "*EditorFileSystemDirectory")

	returnValue := goRet.Interface().(*EditorFileSystemDirectory)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileSystemDirectory) GetPath() string {
	log.Println("Calling EditorFileSystemDirectory.GetPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_path", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileSystemDirectory) GetSubdir(idx int64) *EditorFileSystemDirectory {
	log.Println("Calling EditorFileSystemDirectory.GetSubdir()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_subdir", goArguments, "*EditorFileSystemDirectory")

	returnValue := goRet.Interface().(*EditorFileSystemDirectory)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileSystemDirectory) GetSubdirCount() int64 {
	log.Println("Calling EditorFileSystemDirectory.GetSubdirCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_subdir_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   EditorFileSystemDirectoryImplementer is an interface for EditorFileSystemDirectory objects.
*/
type EditorFileSystemDirectoryImplementer interface {
	class.Class
}
