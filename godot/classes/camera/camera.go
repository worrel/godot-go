//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package camera

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/spatial"
)

/*
   Camera is a special node that displays what is visible from its current location. Cameras register themselves in the nearest [Viewport] node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the Camera will register in the global viewport. In other words, a Camera just provides [i]3D[/i] display capabilities to a [Viewport], and, without one, a scene registered in that [Viewport] (or higher viewports) can't be displayed.
*/
type Camera struct {
	spatial.Spatial
}

func (o *Camera) baseClass() string {
	return "Camera"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Camera) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Camera) getOwner() *C.godot_object {
	return o.owner
}

/*
   If this is the current Camera, remove it from being current. If it is inside the node tree, request to make the next Camera current, if any.
*/
func (o *Camera) ClearCurrent() {
	log.Println("Calling Camera.ClearCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_current", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Get the camera transform. Subclassed cameras (such as CharacterCamera) may provide different transforms than the [Node] transform.
*/
func (o *Camera) GetCameraTransform() *Transform {
	log.Println("Calling Camera.GetCameraTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_camera_transform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the culling mask, describing which 3D render layers are rendered by this Camera.
*/
func (o *Camera) GetCullMask() int64 {
	log.Println("Calling Camera.GetCullMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_cull_mask", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera) GetDopplerTracking() int64 {
	log.Println("Calling Camera.GetDopplerTracking()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_doppler_tracking", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [Environment] used by this Camera.
*/
func (o *Camera) GetEnvironment() *Environment {
	log.Println("Calling Camera.GetEnvironment()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_environment", goArguments, "*Environment")

	returnValue := goRet.Interface().(*Environment)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [i]FOV[/i] Y angle in degrees (FOV means Field of View).
*/
func (o *Camera) GetFov() float64 {
	log.Println("Calling Camera.GetFov()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fov", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the horizontal (X) offset of the Camera viewport.
*/
func (o *Camera) GetHOffset() float64 {
	log.Println("Calling Camera.GetHOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_h_offset", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the current mode for keeping the aspect ratio. See [code]KEEP_*[/code] constants.
*/
func (o *Camera) GetKeepAspectMode() int64 {
	log.Println("Calling Camera.GetKeepAspectMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_keep_aspect_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the Camera's projection. See PROJECTION_* constants.
*/
func (o *Camera) GetProjection() int64 {
	log.Println("Calling Camera.GetProjection()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_projection", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera) GetSize() float64 {
	log.Println("Calling Camera.GetSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_size", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the vertical (Y) offset of the Camera viewport.
*/
func (o *Camera) GetVOffset() float64 {
	log.Println("Calling Camera.GetVOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_v_offset", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the far clip plane in world space units.
*/
func (o *Camera) GetZfar() float64 {
	log.Println("Calling Camera.GetZfar()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_zfar", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the near clip plane in world space units.
*/
func (o *Camera) GetZnear() float64 {
	log.Println("Calling Camera.GetZnear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_znear", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if the Camera is the current one in the [Viewport], or plans to become current (if outside the scene tree).
*/
func (o *Camera) IsCurrent() bool {
	log.Println("Calling Camera.IsCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_current", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if the given position is behind the Camera.
*/
func (o *Camera) IsPositionBehind(worldPoint *Vector3) bool {
	log.Println("Calling Camera.IsPositionBehind()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(worldPoint)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_position_behind", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Make this camera the current Camera for the [Viewport] (see class description). If the Camera Node is outside the scene tree, it will attempt to become current once it's added.
*/
func (o *Camera) MakeCurrent() {
	log.Println("Calling Camera.MakeCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "make_current", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera) ProjectLocalRayNormal(screenPoint *Vector2) *Vector3 {
	log.Println("Calling Camera.ProjectLocalRayNormal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(screenPoint)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "project_local_ray_normal", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns how a 2D coordinate in the Viewport rectangle maps to a 3D point in worldspace.
*/
func (o *Camera) ProjectPosition(screenPoint *Vector2) *Vector3 {
	log.Println("Calling Camera.ProjectPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(screenPoint)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "project_position", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a normal vector in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.
*/
func (o *Camera) ProjectRayNormal(screenPoint *Vector2) *Vector3 {
	log.Println("Calling Camera.ProjectRayNormal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(screenPoint)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "project_ray_normal", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a 3D position in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.
*/
func (o *Camera) ProjectRayOrigin(screenPoint *Vector2) *Vector3 {
	log.Println("Calling Camera.ProjectRayOrigin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(screenPoint)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "project_ray_origin", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the cull mask, describing which 3D render layers are rendered by this Camera.
*/
func (o *Camera) SetCullMask(mask int64) {
	log.Println("Calling Camera.SetCullMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mask)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_cull_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Changes Doppler effect tracking. See [code]DOPPLER_*[/code] constants.
*/
func (o *Camera) SetDopplerTracking(mode int64) {
	log.Println("Calling Camera.SetDopplerTracking()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_doppler_tracking", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the [Environment] to use for this Camera.
*/
func (o *Camera) SetEnvironment(env *Environment) {
	log.Println("Calling Camera.SetEnvironment()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(env)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_environment", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the horizontal (X) offset of the Camera viewport.
*/
func (o *Camera) SetHOffset(ofs float64) {
	log.Println("Calling Camera.SetHOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ofs)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_h_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the mode for keeping the aspect ratio. See [code]KEEP_*[/code] constants.
*/
func (o *Camera) SetKeepAspectMode(mode int64) {
	log.Println("Calling Camera.SetKeepAspectMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_keep_aspect_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the camera projection to orthogonal mode, by specifying a width and the [i]near[/i] and [i]far[/i] clip planes in worldspace units. (As a hint, 2D games often use this projection, with values specified in pixels)
*/
func (o *Camera) SetOrthogonal(size float64, zNear float64, zFar float64) {
	log.Println("Calling Camera.SetOrthogonal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(size)
	goArguments[1] = reflect.ValueOf(zNear)
	goArguments[2] = reflect.ValueOf(zFar)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_orthogonal", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the camera projection to perspective mode, by specifying a [i]FOV[/i] Y angle in degrees (FOV means Field of View), and the [i]near[/i] and [i]far[/i] clip planes in worldspace units.
*/
func (o *Camera) SetPerspective(fov float64, zNear float64, zFar float64) {
	log.Println("Calling Camera.SetPerspective()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(fov)
	goArguments[1] = reflect.ValueOf(zNear)
	goArguments[2] = reflect.ValueOf(zFar)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_perspective", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the vertical (Y) offset of the Camera viewport.
*/
func (o *Camera) SetVOffset(ofs float64) {
	log.Println("Calling Camera.SetVOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ofs)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_v_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns how a 3D point in worldspace maps to a 2D coordinate in the [Viewport] rectangle.
*/
func (o *Camera) UnprojectPosition(worldPoint *Vector3) *Vector2 {
	log.Println("Calling Camera.UnprojectPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(worldPoint)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "unproject_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   CameraImplementer is an interface for Camera objects.
*/
type CameraImplementer interface {
	class.Class
}
