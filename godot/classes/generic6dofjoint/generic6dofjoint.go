//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package generic6dofjoint

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/joint"
)

/*
   The first 3 dof axes are linear axes, which represent translation of Bodies, and the latter 3 dof axes represent the angular motion. Each axis can be either locked, or limited.
*/
type Generic6DOFJoint struct {
	joint.Joint
}

func (o *Generic6DOFJoint) baseClass() string {
	return "Generic6DOFJoint"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Generic6DOFJoint) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Generic6DOFJoint) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *Generic6DOFJoint) X_GetAngularHiLimitX() float64 {
	log.Println("Calling Generic6DOFJoint.X_GetAngularHiLimitX()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_angular_hi_limit_x", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Generic6DOFJoint) X_GetAngularHiLimitY() float64 {
	log.Println("Calling Generic6DOFJoint.X_GetAngularHiLimitY()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_angular_hi_limit_y", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Generic6DOFJoint) X_GetAngularHiLimitZ() float64 {
	log.Println("Calling Generic6DOFJoint.X_GetAngularHiLimitZ()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_angular_hi_limit_z", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Generic6DOFJoint) X_GetAngularLoLimitX() float64 {
	log.Println("Calling Generic6DOFJoint.X_GetAngularLoLimitX()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_angular_lo_limit_x", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Generic6DOFJoint) X_GetAngularLoLimitY() float64 {
	log.Println("Calling Generic6DOFJoint.X_GetAngularLoLimitY()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_angular_lo_limit_y", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Generic6DOFJoint) X_GetAngularLoLimitZ() float64 {
	log.Println("Calling Generic6DOFJoint.X_GetAngularLoLimitZ()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_angular_lo_limit_z", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Generic6DOFJoint) X_SetAngularHiLimitX(angle float64) {
	log.Println("Calling Generic6DOFJoint.X_SetAngularHiLimitX()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(angle)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_angular_hi_limit_x", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Generic6DOFJoint) X_SetAngularHiLimitY(angle float64) {
	log.Println("Calling Generic6DOFJoint.X_SetAngularHiLimitY()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(angle)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_angular_hi_limit_y", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Generic6DOFJoint) X_SetAngularHiLimitZ(angle float64) {
	log.Println("Calling Generic6DOFJoint.X_SetAngularHiLimitZ()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(angle)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_angular_hi_limit_z", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Generic6DOFJoint) X_SetAngularLoLimitX(angle float64) {
	log.Println("Calling Generic6DOFJoint.X_SetAngularLoLimitX()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(angle)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_angular_lo_limit_x", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Generic6DOFJoint) X_SetAngularLoLimitY(angle float64) {
	log.Println("Calling Generic6DOFJoint.X_SetAngularLoLimitY()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(angle)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_angular_lo_limit_y", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Generic6DOFJoint) X_SetAngularLoLimitZ(angle float64) {
	log.Println("Calling Generic6DOFJoint.X_SetAngularLoLimitZ()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(angle)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_angular_lo_limit_z", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Generic6DOFJoint) GetFlagX(flag int64) bool {
	log.Println("Calling Generic6DOFJoint.GetFlagX()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flag)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_flag_x", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Generic6DOFJoint) GetFlagY(flag int64) bool {
	log.Println("Calling Generic6DOFJoint.GetFlagY()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flag)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_flag_y", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Generic6DOFJoint) GetFlagZ(flag int64) bool {
	log.Println("Calling Generic6DOFJoint.GetFlagZ()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flag)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_flag_z", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Generic6DOFJoint) GetParamX(param int64) float64 {
	log.Println("Calling Generic6DOFJoint.GetParamX()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_param_x", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Generic6DOFJoint) GetParamY(param int64) float64 {
	log.Println("Calling Generic6DOFJoint.GetParamY()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_param_y", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Generic6DOFJoint) GetParamZ(param int64) float64 {
	log.Println("Calling Generic6DOFJoint.GetParamZ()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_param_z", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Generic6DOFJoint) SetFlagX(flag int64, value bool) {
	log.Println("Calling Generic6DOFJoint.SetFlagX()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(flag)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_flag_x", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Generic6DOFJoint) SetFlagY(flag int64, value bool) {
	log.Println("Calling Generic6DOFJoint.SetFlagY()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(flag)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_flag_y", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Generic6DOFJoint) SetFlagZ(flag int64, value bool) {
	log.Println("Calling Generic6DOFJoint.SetFlagZ()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(flag)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_flag_z", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Generic6DOFJoint) SetParamX(param int64, value float64) {
	log.Println("Calling Generic6DOFJoint.SetParamX()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(param)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_param_x", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Generic6DOFJoint) SetParamY(param int64, value float64) {
	log.Println("Calling Generic6DOFJoint.SetParamY()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(param)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_param_y", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Generic6DOFJoint) SetParamZ(param int64, value float64) {
	log.Println("Calling Generic6DOFJoint.SetParamZ()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(param)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_param_z", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Generic6DOFJointImplementer is an interface for Generic6DOFJoint objects.
*/
type Generic6DOFJointImplementer interface {
	class.Class
}
