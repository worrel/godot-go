//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package httprequest

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node"
)

/*
   A Node with the ability to send HTTP requests. Uses a [HTTPClient] internally, supports HTTPS. Can be used to make HTTP requests or download files via HTTP.
*/
type HTTPRequest struct {
	node.Node
}

func (o *HTTPRequest) baseClass() string {
	return "HTTPRequest"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *HTTPRequest) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *HTTPRequest) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *HTTPRequest) X_RedirectRequest(arg0 string) {
	log.Println("Calling HTTPRequest.X_RedirectRequest()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_redirect_request", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *HTTPRequest) X_RequestDone(arg0 int64, arg1 int64, arg2 *PoolStringArray, arg3 *PoolByteArray) {
	log.Println("Calling HTTPRequest.X_RequestDone()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(arg0)
	goArguments[1] = reflect.ValueOf(arg1)
	goArguments[2] = reflect.ValueOf(arg2)
	goArguments[3] = reflect.ValueOf(arg3)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_request_done", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Cancel the current request.
*/
func (o *HTTPRequest) CancelRequest() {
	log.Println("Calling HTTPRequest.CancelRequest()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "cancel_request", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the response body length.
*/
func (o *HTTPRequest) GetBodySize() int64 {
	log.Println("Calling HTTPRequest.GetBodySize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_body_size", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return current body size limit.
*/
func (o *HTTPRequest) GetBodySizeLimit() int64 {
	log.Println("Calling HTTPRequest.GetBodySizeLimit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_body_size_limit", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the file this request will download into.
*/
func (o *HTTPRequest) GetDownloadFile() string {
	log.Println("Calling HTTPRequest.GetDownloadFile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_download_file", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the amount of bytes this HTTPRequest downloaded.
*/
func (o *HTTPRequest) GetDownloadedBytes() int64 {
	log.Println("Calling HTTPRequest.GetDownloadedBytes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_downloaded_bytes", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the current status of the underlying [HTTPClient].
*/
func (o *HTTPRequest) GetHttpClientStatus() int64 {
	log.Println("Calling HTTPRequest.GetHttpClientStatus()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_http_client_status", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the maximum amount of redirects that will be followed.
*/
func (o *HTTPRequest) GetMaxRedirects() int64 {
	log.Println("Calling HTTPRequest.GetMaxRedirects()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_max_redirects", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Whether this request is using threads.
*/
func (o *HTTPRequest) IsUsingThreads() bool {
	log.Println("Calling HTTPRequest.IsUsingThreads()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_using_threads", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *HTTPRequest) Request(url string, customHeaders *PoolStringArray, sslValidateDomain bool, method int64, requestData string) int64 {
	log.Println("Calling HTTPRequest.Request()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(url)
	goArguments[1] = reflect.ValueOf(customHeaders)
	goArguments[2] = reflect.ValueOf(sslValidateDomain)
	goArguments[3] = reflect.ValueOf(method)
	goArguments[4] = reflect.ValueOf(requestData)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "request", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the response body size limit.
*/
func (o *HTTPRequest) SetBodySizeLimit(bytes int64) {
	log.Println("Calling HTTPRequest.SetBodySizeLimit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bytes)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_body_size_limit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the file to download into. Outputs the response body into the file.
*/
func (o *HTTPRequest) SetDownloadFile(path string) {
	log.Println("Calling HTTPRequest.SetDownloadFile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_download_file", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the maximum amount of redirects the request will follow.
*/
func (o *HTTPRequest) SetMaxRedirects(amount int64) {
	log.Println("Calling HTTPRequest.SetMaxRedirects()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_max_redirects", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Make this HTTPRequest use threads.
*/
func (o *HTTPRequest) SetUseThreads(enable bool) {
	log.Println("Calling HTTPRequest.SetUseThreads()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_use_threads", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   HTTPRequestImplementer is an interface for HTTPRequest objects.
*/
type HTTPRequestImplementer interface {
	class.Class
}
