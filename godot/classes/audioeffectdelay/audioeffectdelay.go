//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package audioeffectdelay

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/audioeffect"
)

/*
   Plays input signal back after a period of time. The delayed signal may be played back multiple times to create the sound of a repeating, decaying echo. Delay effects range from a subtle echo effect to a pronounced blending of previous sounds with new sounds.
*/
type AudioEffectDelay struct {
	audioeffect.AudioEffect
}

func (o *AudioEffectDelay) baseClass() string {
	return "AudioEffectDelay"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *AudioEffectDelay) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *AudioEffectDelay) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *AudioEffectDelay) GetDry() float64 {
	log.Println("Calling AudioEffectDelay.GetDry()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_dry", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDelay) GetFeedbackDelayMs() float64 {
	log.Println("Calling AudioEffectDelay.GetFeedbackDelayMs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_feedback_delay_ms", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDelay) GetFeedbackLevelDb() float64 {
	log.Println("Calling AudioEffectDelay.GetFeedbackLevelDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_feedback_level_db", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDelay) GetFeedbackLowpass() float64 {
	log.Println("Calling AudioEffectDelay.GetFeedbackLowpass()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_feedback_lowpass", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDelay) GetTap1DelayMs() float64 {
	log.Println("Calling AudioEffectDelay.GetTap1DelayMs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tap1_delay_ms", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDelay) GetTap1LevelDb() float64 {
	log.Println("Calling AudioEffectDelay.GetTap1LevelDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tap1_level_db", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDelay) GetTap1Pan() float64 {
	log.Println("Calling AudioEffectDelay.GetTap1Pan()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tap1_pan", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDelay) GetTap2DelayMs() float64 {
	log.Println("Calling AudioEffectDelay.GetTap2DelayMs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tap2_delay_ms", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDelay) GetTap2LevelDb() float64 {
	log.Println("Calling AudioEffectDelay.GetTap2LevelDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tap2_level_db", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDelay) GetTap2Pan() float64 {
	log.Println("Calling AudioEffectDelay.GetTap2Pan()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tap2_pan", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDelay) IsFeedbackActive() bool {
	log.Println("Calling AudioEffectDelay.IsFeedbackActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_feedback_active", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDelay) IsTap1Active() bool {
	log.Println("Calling AudioEffectDelay.IsTap1Active()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_tap1_active", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDelay) IsTap2Active() bool {
	log.Println("Calling AudioEffectDelay.IsTap2Active()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_tap2_active", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioEffectDelay) SetDry(amount float64) {
	log.Println("Calling AudioEffectDelay.SetDry()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dry", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDelay) SetFeedbackActive(amount bool) {
	log.Println("Calling AudioEffectDelay.SetFeedbackActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_feedback_active", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDelay) SetFeedbackDelayMs(amount float64) {
	log.Println("Calling AudioEffectDelay.SetFeedbackDelayMs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_feedback_delay_ms", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDelay) SetFeedbackLevelDb(amount float64) {
	log.Println("Calling AudioEffectDelay.SetFeedbackLevelDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_feedback_level_db", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDelay) SetFeedbackLowpass(amount float64) {
	log.Println("Calling AudioEffectDelay.SetFeedbackLowpass()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_feedback_lowpass", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDelay) SetTap1Active(amount bool) {
	log.Println("Calling AudioEffectDelay.SetTap1Active()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tap1_active", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDelay) SetTap1DelayMs(amount float64) {
	log.Println("Calling AudioEffectDelay.SetTap1DelayMs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tap1_delay_ms", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDelay) SetTap1LevelDb(amount float64) {
	log.Println("Calling AudioEffectDelay.SetTap1LevelDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tap1_level_db", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDelay) SetTap1Pan(amount float64) {
	log.Println("Calling AudioEffectDelay.SetTap1Pan()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tap1_pan", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDelay) SetTap2Active(amount bool) {
	log.Println("Calling AudioEffectDelay.SetTap2Active()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tap2_active", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDelay) SetTap2DelayMs(amount float64) {
	log.Println("Calling AudioEffectDelay.SetTap2DelayMs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tap2_delay_ms", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDelay) SetTap2LevelDb(amount float64) {
	log.Println("Calling AudioEffectDelay.SetTap2LevelDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tap2_level_db", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioEffectDelay) SetTap2Pan(amount float64) {
	log.Println("Calling AudioEffectDelay.SetTap2Pan()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tap2_pan", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   AudioEffectDelayImplementer is an interface for AudioEffectDelay objects.
*/
type AudioEffectDelayImplementer interface {
	class.Class
}
