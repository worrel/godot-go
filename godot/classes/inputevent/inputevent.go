//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package inputevent

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*

 */
type InputEvent struct {
	resource.Resource
}

func (o *InputEvent) baseClass() string {
	return "InputEvent"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *InputEvent) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *InputEvent) getOwner() *C.godot_object {
	return o.owner
}

/*
   Returns true if this input event matches the event passed.
*/
func (o *InputEvent) ActionMatch(event *InputEvent) bool {
	log.Println("Calling InputEvent.ActionMatch()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(event)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "action_match", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a [String] representation of the event.
*/
func (o *InputEvent) AsText() string {
	log.Println("Calling InputEvent.AsText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "as_text", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the id of the device that generated the event.
*/
func (o *InputEvent) GetDevice() int64 {
	log.Println("Calling InputEvent.GetDevice()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_device", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the id of the event.
*/
func (o *InputEvent) GetId() int64 {
	log.Println("Calling InputEvent.GetId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_id", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if this input event matches a pre-defined action, no matter the type.
*/
func (o *InputEvent) IsAction(action string) bool {
	log.Println("Calling InputEvent.IsAction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(action)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_action", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if the given action is being pressed (and is not an echo event for KEY events). Not relevant for the event types MOUSE_MOTION, SCREEN_DRAG and NONE.
*/
func (o *InputEvent) IsActionPressed(action string) bool {
	log.Println("Calling InputEvent.IsActionPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(action)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_action_pressed", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if the given action is released (i.e. not pressed). Not relevant for the event types MOUSE_MOTION, SCREEN_DRAG and NONE.
*/
func (o *InputEvent) IsActionReleased(action string) bool {
	log.Println("Calling InputEvent.IsActionReleased()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(action)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_action_released", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InputEvent) IsActionType() bool {
	log.Println("Calling InputEvent.IsActionType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_action_type", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if this input event is an echo event (only for events of type KEY, it will return false for other types).
*/
func (o *InputEvent) IsEcho() bool {
	log.Println("Calling InputEvent.IsEcho()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_echo", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if this input event is pressed. Not relevant for the event types MOUSE_MOTION, SCREEN_DRAG and NONE.
*/
func (o *InputEvent) IsPressed() bool {
	log.Println("Calling InputEvent.IsPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_pressed", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InputEvent) SetDevice(device int64) {
	log.Println("Calling InputEvent.SetDevice()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(device)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_device", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *InputEvent) SetId(id int64) {
	log.Println("Calling InputEvent.SetId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_id", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *InputEvent) ShortcutMatch(event *InputEvent) bool {
	log.Println("Calling InputEvent.ShortcutMatch()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(event)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shortcut_match", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InputEvent) XformedBy(xform *Transform2D, localOfs *Vector2) *InputEvent {
	log.Println("Calling InputEvent.XformedBy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(xform)
	goArguments[1] = reflect.ValueOf(localOfs)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "xformed_by", goArguments, "*InputEvent")

	returnValue := goRet.Interface().(*InputEvent)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   InputEventImplementer is an interface for InputEvent objects.
*/
type InputEventImplementer interface {
	class.Class
}
