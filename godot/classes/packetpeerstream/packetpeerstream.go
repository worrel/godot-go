//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package packetpeerstream

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/packetpeer"
)

/*
   PacketStreamPeer provides a wrapper for working using packets over a stream. This allows for using packet based code with StreamPeers. PacketPeerStream implements a custom protocol over the StreamPeer, so the user should not read or write to the wrapped StreamPeer directly.
*/
type PacketPeerStream struct {
	packetpeer.PacketPeer
}

func (o *PacketPeerStream) baseClass() string {
	return "PacketPeerStream"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *PacketPeerStream) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *PacketPeerStream) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *PacketPeerStream) GetInputBufferMaxSize() int64 {
	log.Println("Calling PacketPeerStream.GetInputBufferMaxSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_input_buffer_max_size", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PacketPeerStream) GetOutputBufferMaxSize() int64 {
	log.Println("Calling PacketPeerStream.GetOutputBufferMaxSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_output_buffer_max_size", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PacketPeerStream) SetInputBufferMaxSize(maxSizeBytes int64) {
	log.Println("Calling PacketPeerStream.SetInputBufferMaxSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(maxSizeBytes)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_input_buffer_max_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *PacketPeerStream) SetOutputBufferMaxSize(maxSizeBytes int64) {
	log.Println("Calling PacketPeerStream.SetOutputBufferMaxSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(maxSizeBytes)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_output_buffer_max_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the [StreamPeer] object to be wrapped.
*/
func (o *PacketPeerStream) SetStreamPeer(peer *Reference) {
	log.Println("Calling PacketPeerStream.SetStreamPeer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(peer)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_stream_peer", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   PacketPeerStreamImplementer is an interface for PacketPeerStream objects.
*/
type PacketPeerStreamImplementer interface {
	class.Class
}
