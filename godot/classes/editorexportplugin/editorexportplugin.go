//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package editorexportplugin

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/reference"
)

/*

 */
type EditorExportPlugin struct {
	reference.Reference
}

func (o *EditorExportPlugin) baseClass() string {
	return "EditorExportPlugin"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *EditorExportPlugin) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *EditorExportPlugin) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *EditorExportPlugin) X_ExportBegin(features *PoolStringArray) {
	log.Println("Calling EditorExportPlugin.X_ExportBegin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(features)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_export_begin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorExportPlugin) X_ExportFile(path string, aType string, features *PoolStringArray) {
	log.Println("Calling EditorExportPlugin.X_ExportFile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(path)
	goArguments[1] = reflect.ValueOf(aType)
	goArguments[2] = reflect.ValueOf(features)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_export_file", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorExportPlugin) AddFile(path string, file *PoolByteArray, remap bool) {
	log.Println("Calling EditorExportPlugin.AddFile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(path)
	goArguments[1] = reflect.ValueOf(file)
	goArguments[2] = reflect.ValueOf(remap)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_file", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorExportPlugin) AddSharedObject(path string) {
	log.Println("Calling EditorExportPlugin.AddSharedObject()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_shared_object", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorExportPlugin) Skip() {
	log.Println("Calling EditorExportPlugin.Skip()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "skip", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   EditorExportPluginImplementer is an interface for EditorExportPlugin objects.
*/
type EditorExportPluginImplementer interface {
	class.Class
}
