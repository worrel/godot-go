//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package light2d

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node2d"
)

/*
   Casts light in a 2D environment. Light is defined by a (usually grayscale) texture, a color, an energy value, a mode (see constants), and various other parameters (range and shadows-related). Note that Light2D can be used as a mask.
*/
type Light2D struct {
	node2d.Node2D
}

func (o *Light2D) baseClass() string {
	return "Light2D"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Light2D) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Light2D) getOwner() *C.godot_object {
	return o.owner
}

/*
   Return the color of the Light2D.
*/
func (o *Light2D) GetColor() *Color {
	log.Println("Calling Light2D.GetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the energy value of the Light2D.
*/
func (o *Light2D) GetEnergy() float64 {
	log.Println("Calling Light2D.GetEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_energy", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the height of the Light2D. Used with 2D normalmapping.
*/
func (o *Light2D) GetHeight() float64 {
	log.Println("Calling Light2D.GetHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_height", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Light2D) GetItemCullMask() int64 {
	log.Println("Calling Light2D.GetItemCullMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_item_cull_mask", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Light2D) GetItemShadowCullMask() int64 {
	log.Println("Calling Light2D.GetItemShadowCullMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_item_shadow_cull_mask", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the maximum layer value of objects of the scene that are affected by the Light2D.
*/
func (o *Light2D) GetLayerRangeMax() int64 {
	log.Println("Calling Light2D.GetLayerRangeMax()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_layer_range_max", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the minimum layer value of objects of the scene that are affected by the Light2D.
*/
func (o *Light2D) GetLayerRangeMin() int64 {
	log.Println("Calling Light2D.GetLayerRangeMin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_layer_range_min", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the current mode set to the Light2D.
*/
func (o *Light2D) GetMode() int64 {
	log.Println("Calling Light2D.GetMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the shadow buffer size.
*/
func (o *Light2D) GetShadowBufferSize() int64 {
	log.Println("Calling Light2D.GetShadowBufferSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shadow_buffer_size", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the color of casted shadows for this Light2D.
*/
func (o *Light2D) GetShadowColor() *Color {
	log.Println("Calling Light2D.GetShadowColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shadow_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Light2D) GetShadowFilter() int64 {
	log.Println("Calling Light2D.GetShadowFilter()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shadow_filter", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Light2D) GetShadowGradientLength() float64 {
	log.Println("Calling Light2D.GetShadowGradientLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shadow_gradient_length", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Light2D) GetShadowSmooth() float64 {
	log.Println("Calling Light2D.GetShadowSmooth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shadow_smooth", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the texture of the Light2D.
*/
func (o *Light2D) GetTexture() *Texture {
	log.Println("Calling Light2D.GetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_texture", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the offset of the light texture.
*/
func (o *Light2D) GetTextureOffset() *Vector2 {
	log.Println("Calling Light2D.GetTextureOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_texture_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the scale value of the light texture.
*/
func (o *Light2D) GetTextureScale() float64 {
	log.Println("Calling Light2D.GetTextureScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_texture_scale", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the maximum Z value that objects of the scene can be in order to be affected by the Light2D.
*/
func (o *Light2D) GetZRangeMax() int64 {
	log.Println("Calling Light2D.GetZRangeMax()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_z_range_max", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the minimum Z value that objects of the scene have to be in order to be affected by the Light2D.
*/
func (o *Light2D) GetZRangeMin() int64 {
	log.Println("Calling Light2D.GetZRangeMin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_z_range_min", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Light2D) IsEditorOnly() bool {
	log.Println("Calling Light2D.IsEditorOnly()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_editor_only", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if the Light2D is enabled, false if it is not.
*/
func (o *Light2D) IsEnabled() bool {
	log.Println("Calling Light2D.IsEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if shadow casting is enabled for this Light2D, else return false.
*/
func (o *Light2D) IsShadowEnabled() bool {
	log.Println("Calling Light2D.IsShadowEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_shadow_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the color of the Light2D.
*/
func (o *Light2D) SetColor(color *Color) {
	log.Println("Calling Light2D.SetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Light2D) SetEditorOnly(editorOnly bool) {
	log.Println("Calling Light2D.SetEditorOnly()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(editorOnly)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_editor_only", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Switches the Light2D on or off, depending on the 'enabled' parameter.
*/
func (o *Light2D) SetEnabled(enabled bool) {
	log.Println("Calling Light2D.SetEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the energy value of the Light2D. The bigger the value, the stronger the light.
*/
func (o *Light2D) SetEnergy(energy float64) {
	log.Println("Calling Light2D.SetEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(energy)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_energy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the height of the Light2D. Used with 2D normalmapping.
*/
func (o *Light2D) SetHeight(height float64) {
	log.Println("Calling Light2D.SetHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(height)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_height", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the item mask of the Light2D to 'item_mask' value.
*/
func (o *Light2D) SetItemCullMask(itemCullMask int64) {
	log.Println("Calling Light2D.SetItemCullMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(itemCullMask)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_item_cull_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the item shadow mask to 'item_shadow_mask' value.
*/
func (o *Light2D) SetItemShadowCullMask(itemShadowCullMask int64) {
	log.Println("Calling Light2D.SetItemShadowCullMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(itemShadowCullMask)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_item_shadow_cull_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the maximum layer value of objects of the scene that are affected by the Light2D.
*/
func (o *Light2D) SetLayerRangeMax(layer int64) {
	log.Println("Calling Light2D.SetLayerRangeMax()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(layer)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_layer_range_max", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the minimum layer value of objects of the scene that are affected by the Light2D.
*/
func (o *Light2D) SetLayerRangeMin(layer int64) {
	log.Println("Calling Light2D.SetLayerRangeMin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(layer)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_layer_range_min", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the behaviour mode of the Light2D. Use constants defined in the constants section.
*/
func (o *Light2D) SetMode(mode int64) {
	log.Println("Calling Light2D.SetMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the shadow buffer size.
*/
func (o *Light2D) SetShadowBufferSize(size int64) {
	log.Println("Calling Light2D.SetShadowBufferSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(size)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shadow_buffer_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the color of casted shadows for this Light2D.
*/
func (o *Light2D) SetShadowColor(shadowColor *Color) {
	log.Println("Calling Light2D.SetShadowColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shadowColor)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shadow_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Enable or disable shadows casting from this Light2D according to the 'enabled' parameter.
*/
func (o *Light2D) SetShadowEnabled(enabled bool) {
	log.Println("Calling Light2D.SetShadowEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shadow_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Light2D) SetShadowFilter(filter int64) {
	log.Println("Calling Light2D.SetShadowFilter()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(filter)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shadow_filter", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Light2D) SetShadowGradientLength(multiplier float64) {
	log.Println("Calling Light2D.SetShadowGradientLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(multiplier)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shadow_gradient_length", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Light2D) SetShadowSmooth(smooth float64) {
	log.Println("Calling Light2D.SetShadowSmooth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(smooth)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shadow_smooth", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the texture of the Light2D.
*/
func (o *Light2D) SetTexture(texture *Texture) {
	log.Println("Calling Light2D.SetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_texture", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the offset of the light texture.
*/
func (o *Light2D) SetTextureOffset(textureOffset *Vector2) {
	log.Println("Calling Light2D.SetTextureOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(textureOffset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_texture_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the scale value of the light texture.
*/
func (o *Light2D) SetTextureScale(textureScale float64) {
	log.Println("Calling Light2D.SetTextureScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(textureScale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_texture_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the maximum Z value that objects of the scene can be in order to be affected by the Light2D.
*/
func (o *Light2D) SetZRangeMax(z int64) {
	log.Println("Calling Light2D.SetZRangeMax()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(z)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_z_range_max", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the minimum Z value that objects of the scene have to be in order to be affected by the Light2D.
*/
func (o *Light2D) SetZRangeMin(z int64) {
	log.Println("Calling Light2D.SetZRangeMin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(z)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_z_range_min", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Light2DImplementer is an interface for Light2D objects.
*/
type Light2DImplementer interface {
	class.Class
}
