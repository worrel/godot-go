//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package label

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/control"
)

/*
   Label displays plain text on the screen. It gives you control over the horizontal and vertical alignment, and can wrap the text inside the node's bounding rectangle. It doesn't support bold, italics or other formatting. For that, use [RichTextLabel] instead.
*/
type Label struct {
	control.Control
}

func (o *Label) baseClass() string {
	return "Label"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Label) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Label) getOwner() *C.godot_object {
	return o.owner
}

/*
   Returns the alignment mode (any of the ALIGN_* enumeration values).
*/
func (o *Label) GetAlign() int64 {
	log.Println("Calling Label.GetAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_align", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the amount of lines of text the Label has.
*/
func (o *Label) GetLineCount() int64 {
	log.Println("Calling Label.GetLineCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_line_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the font size in pixels.
*/
func (o *Label) GetLineHeight() int64 {
	log.Println("Calling Label.GetLineHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_line_height", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the the number of lines to skip before displaying.
*/
func (o *Label) GetLinesSkipped() int64 {
	log.Println("Calling Label.GetLinesSkipped()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_lines_skipped", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the maximum number of lines to display. Returns -1 if unrestricted.
*/
func (o *Label) GetMaxLinesVisible() int64 {
	log.Println("Calling Label.GetMaxLinesVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_max_lines_visible", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the maximum number of characters to display as a percentage of the total text.
*/
func (o *Label) GetPercentVisible() float64 {
	log.Println("Calling Label.GetPercentVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_percent_visible", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the label text. Text can contain newlines.
*/
func (o *Label) GetText() string {
	log.Println("Calling Label.GetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_text", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the total length of the text.
*/
func (o *Label) GetTotalCharacterCount() int64 {
	log.Println("Calling Label.GetTotalCharacterCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_total_character_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the vertical alignment mode (any of the VALIGN_* enumeration values).
*/
func (o *Label) GetValign() int64 {
	log.Println("Calling Label.GetValign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_valign", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the restricted number of characters to display. Returns -1 if unrestricted.
*/
func (o *Label) GetVisibleCharacters() int64 {
	log.Println("Calling Label.GetVisibleCharacters()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_visible_characters", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of lines shown. Useful if the [code]Label[/code] 's height cannot currently display all lines.
*/
func (o *Label) GetVisibleLineCount() int64 {
	log.Println("Calling Label.GetVisibleLineCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_visible_line_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if [i]autowrap[/i] mode (see [method set_autowrap]).
*/
func (o *Label) HasAutowrap() bool {
	log.Println("Calling Label.HasAutowrap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_autowrap", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if text would be cut off if it is too wide.
*/
func (o *Label) IsClippingText() bool {
	log.Println("Calling Label.IsClippingText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_clipping_text", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if text is displayed in all capitals.
*/
func (o *Label) IsUppercase() bool {
	log.Println("Calling Label.IsUppercase()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_uppercase", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the alignment mode to any of the ALIGN_* enumeration values.
*/
func (o *Label) SetAlign(align int64) {
	log.Println("Calling Label.SetAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(align)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_align", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set [i]autowrap[/i] mode. When enabled, autowrap will fit text to the control width, breaking sentences when they exceed the available horizontal space. When disabled, the label minimum width becomes the width of the longest row, and the minimum height large enough to fit all rows.
*/
func (o *Label) SetAutowrap(enable bool) {
	log.Println("Calling Label.SetAutowrap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_autowrap", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Cuts off the rest of the text if it is too wide.
*/
func (o *Label) SetClipText(enable bool) {
	log.Println("Calling Label.SetClipText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_clip_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the number of lines to skip before displaying. Useful for scrolling text.
*/
func (o *Label) SetLinesSkipped(linesSkipped int64) {
	log.Println("Calling Label.SetLinesSkipped()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(linesSkipped)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_lines_skipped", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Restricts the number of lines to display. Set to -1 to disable.
*/
func (o *Label) SetMaxLinesVisible(linesVisible int64) {
	log.Println("Calling Label.SetMaxLinesVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(linesVisible)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_max_lines_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Restricts the number of characters to display (as a percentage of the total text).
*/
func (o *Label) SetPercentVisible(percentVisible float64) {
	log.Println("Calling Label.SetPercentVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(percentVisible)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_percent_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the label text. Text can contain newlines.
*/
func (o *Label) SetText(text string) {
	log.Println("Calling Label.SetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Display text in all capitals.
*/
func (o *Label) SetUppercase(enable bool) {
	log.Println("Calling Label.SetUppercase()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_uppercase", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the vertical alignment mode to any of the VALIGN_* enumeration values.
*/
func (o *Label) SetValign(valign int64) {
	log.Println("Calling Label.SetValign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(valign)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_valign", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Restricts the number of characters to display. Set to -1 to disable.
*/
func (o *Label) SetVisibleCharacters(amount int64) {
	log.Println("Calling Label.SetVisibleCharacters()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_visible_characters", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   LabelImplementer is an interface for Label objects.
*/
type LabelImplementer interface {
	class.Class
}
