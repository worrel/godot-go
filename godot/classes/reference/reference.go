//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package reference

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/object"
)

/*
   Base class for anything that keeps a reference count. Resource and many other helper objects inherit this. References keep an internal reference counter so they are only released when no longer in use.
*/
type Reference struct {
	object.Object
}

func (o *Reference) baseClass() string {
	return "Reference"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Reference) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Reference) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *Reference) InitRef() bool {
	log.Println("Calling Reference.InitRef()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "init_ref", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Increase the internal reference counter. Use this only if you really know what you are doing.
*/
func (o *Reference) Reference() bool {
	log.Println("Calling Reference.Reference()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "reference", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Decrease the internal reference counter. Use this only if you really know what you are doing.
*/
func (o *Reference) Unreference() bool {
	log.Println("Calling Reference.Unreference()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "unreference", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   ReferenceImplementer is an interface for Reference objects.
*/
type ReferenceImplementer interface {
	class.Class
}
