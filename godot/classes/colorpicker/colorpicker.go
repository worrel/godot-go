//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package colorpicker

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/boxcontainer"
)

/*
   This is a simple color picker [Control]. It's useful for selecting a color from an RGB/RGBA colorspace.
*/
type ColorPicker struct {
	boxcontainer.BoxContainer
}

func (o *ColorPicker) baseClass() string {
	return "ColorPicker"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ColorPicker) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *ColorPicker) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *ColorPicker) X_AddPresetPressed() {
	log.Println("Calling ColorPicker.X_AddPresetPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_add_preset_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_HsvDraw(arg0 int64, arg1 *Object) {
	log.Println("Calling ColorPicker.X_HsvDraw()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(arg0)
	goArguments[1] = reflect.ValueOf(arg1)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_hsv_draw", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_HtmlEntered(arg0 string) {
	log.Println("Calling ColorPicker.X_HtmlEntered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_html_entered", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_PresetInput(arg0 *InputEvent) {
	log.Println("Calling ColorPicker.X_PresetInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_preset_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_SampleDraw() {
	log.Println("Calling ColorPicker.X_SampleDraw()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_sample_draw", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_ScreenInput(arg0 *InputEvent) {
	log.Println("Calling ColorPicker.X_ScreenInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_screen_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_ScreenPickPressed() {
	log.Println("Calling ColorPicker.X_ScreenPickPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_screen_pick_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_TextTypeToggled() {
	log.Println("Calling ColorPicker.X_TextTypeToggled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_text_type_toggled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_UvInput(arg0 *InputEvent) {
	log.Println("Calling ColorPicker.X_UvInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_uv_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_ValueChanged(arg0 float64) {
	log.Println("Calling ColorPicker.X_ValueChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_value_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_WInput(arg0 *InputEvent) {
	log.Println("Calling ColorPicker.X_WInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_w_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds the current selected to color to a list of colors (presets), the presets will be displayed in the color picker and the user will be able to select them, notice that the presets list is only for this color picker.
*/
func (o *ColorPicker) AddPreset(color *Color) {
	log.Println("Calling ColorPicker.AddPreset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_preset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Gets the current color.
*/
func (o *ColorPicker) GetPickColor() *Color {
	log.Println("Calling ColorPicker.GetPickColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_pick_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether the color has transparency or not.
*/
func (o *ColorPicker) IsEditingAlpha() bool {
	log.Println("Calling ColorPicker.IsEditingAlpha()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_editing_alpha", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether this color picker is in raw mode or not, raw mode will allow the color R, G, B component values to go beyond 1, you have to consider that the max value for color components is 1, going beyond that value will not have effect in the color, but can be used for special operations that require it (like tinting without darkening or rendering sprites in HDR).
*/
func (o *ColorPicker) IsRawMode() bool {
	log.Println("Calling ColorPicker.IsRawMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_raw_mode", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set true if you want the color to have an alpha channel (transparency), or false if you want a solid color.
*/
func (o *ColorPicker) SetEditAlpha(show bool) {
	log.Println("Calling ColorPicker.SetEditAlpha()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(show)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_edit_alpha", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Select the current color.
*/
func (o *ColorPicker) SetPickColor(color *Color) {
	log.Println("Calling ColorPicker.SetPickColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_pick_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set whether this color picker is using raw mode or not, see [method is_raw_mode].
*/
func (o *ColorPicker) SetRawMode(mode bool) {
	log.Println("Calling ColorPicker.SetRawMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_raw_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ColorPickerImplementer is an interface for ColorPicker objects.
*/
type ColorPickerImplementer interface {
	class.Class
}
