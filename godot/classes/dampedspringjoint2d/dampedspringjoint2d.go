//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package dampedspringjoint2d

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/joint2d"
)

/*
   Damped spring constraint for 2D physics. This resembles a spring joint that always wants to go back to a given length.
*/
type DampedSpringJoint2D struct {
	joint2d.Joint2D
}

func (o *DampedSpringJoint2D) baseClass() string {
	return "DampedSpringJoint2D"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *DampedSpringJoint2D) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *DampedSpringJoint2D) getOwner() *C.godot_object {
	return o.owner
}

/*
   Return the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping).
*/
func (o *DampedSpringJoint2D) GetDamping() float64 {
	log.Println("Calling DampedSpringJoint2D.GetDamping()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_damping", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the maximum length of the spring joint.
*/
func (o *DampedSpringJoint2D) GetLength() float64 {
	log.Println("Calling DampedSpringJoint2D.GetLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_length", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the resting length of the spring joint. The joint will always try to go to back this length when pulled apart.
*/
func (o *DampedSpringJoint2D) GetRestLength() float64 {
	log.Println("Calling DampedSpringJoint2D.GetRestLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_rest_length", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length.
*/
func (o *DampedSpringJoint2D) GetStiffness() float64 {
	log.Println("Calling DampedSpringJoint2D.GetStiffness()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_stiffness", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping).
*/
func (o *DampedSpringJoint2D) SetDamping(damping float64) {
	log.Println("Calling DampedSpringJoint2D.SetDamping()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(damping)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_damping", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the maximum length of the spring joint.
*/
func (o *DampedSpringJoint2D) SetLength(length float64) {
	log.Println("Calling DampedSpringJoint2D.SetLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(length)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_length", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the resting length of the spring joint. The joint will always try to go to back this length when pulled apart.
*/
func (o *DampedSpringJoint2D) SetRestLength(restLength float64) {
	log.Println("Calling DampedSpringJoint2D.SetRestLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(restLength)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_rest_length", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length.
*/
func (o *DampedSpringJoint2D) SetStiffness(stiffness float64) {
	log.Println("Calling DampedSpringJoint2D.SetStiffness()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(stiffness)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_stiffness", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   DampedSpringJoint2DImplementer is an interface for DampedSpringJoint2D objects.
*/
type DampedSpringJoint2DImplementer interface {
	class.Class
}
