//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package camera2d

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node2d"
)

/*
   Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of [CanvasItem] based nodes. This node is intended to be a simple helper to get things going quickly and it may happen often that more functionality is desired to change how the camera works. To make your own custom camera node, simply inherit from [Node2D] and change the transform of the canvas by calling get_viewport().set_canvas_transform(m) in [Viewport].
*/
type Camera2D struct {
	node2d.Node2D
}

func (o *Camera2D) baseClass() string {
	return "Camera2D"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Camera2D) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Camera2D) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *Camera2D) X_MakeCurrent(arg0 *Object) {
	log.Println("Calling Camera2D.X_MakeCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_make_current", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) X_SetCurrent(current bool) {
	log.Println("Calling Camera2D.X_SetCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(current)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_current", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) X_SetOldSmoothing(followSmoothing float64) {
	log.Println("Calling Camera2D.X_SetOldSmoothing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(followSmoothing)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_old_smoothing", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) X_UpdateScroll() {
	log.Println("Calling Camera2D.X_UpdateScroll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_update_scroll", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Align the camera to the tracked node
*/
func (o *Camera2D) Align() {
	log.Println("Calling Camera2D.Align()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "align", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera2D) ClearCurrent() {
	log.Println("Calling Camera2D.ClearCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_current", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Force the camera to update scroll immediately.
*/
func (o *Camera2D) ForceUpdateScroll() {
	log.Println("Calling Camera2D.ForceUpdateScroll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "force_update_scroll", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera2D) GetAnchorMode() int64 {
	log.Println("Calling Camera2D.GetAnchorMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_anchor_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the camera position.
*/
func (o *Camera2D) GetCameraPosition() *Vector2 {
	log.Println("Calling Camera2D.GetCameraPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_camera_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera2D) GetCameraScreenCenter() *Vector2 {
	log.Println("Calling Camera2D.GetCameraScreenCenter()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_camera_screen_center", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera2D) GetCustomViewport() *Node {
	log.Println("Calling Camera2D.GetCustomViewport()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_custom_viewport", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the margins needed to drag the camera (see [method set_drag_margin]).
*/
func (o *Camera2D) GetDragMargin(margin int64) float64 {
	log.Println("Calling Camera2D.GetDragMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(margin)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_drag_margin", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera2D) GetFollowSmoothing() float64 {
	log.Println("Calling Camera2D.GetFollowSmoothing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_follow_smoothing", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera2D) GetHOffset() float64 {
	log.Println("Calling Camera2D.GetHOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_h_offset", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the scrolling limit in pixels.
*/
func (o *Camera2D) GetLimit(margin int64) int64 {
	log.Println("Calling Camera2D.GetLimit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(margin)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_limit", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the scroll offset.
*/
func (o *Camera2D) GetOffset() *Vector2 {
	log.Println("Calling Camera2D.GetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera2D) GetVOffset() float64 {
	log.Println("Calling Camera2D.GetVOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_v_offset", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera2D) GetZoom() *Vector2 {
	log.Println("Calling Camera2D.GetZoom()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_zoom", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true of this is the current camera (see [method make_current]).
*/
func (o *Camera2D) IsCurrent() bool {
	log.Println("Calling Camera2D.IsCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_current", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera2D) IsFollowSmoothingEnabled() bool {
	log.Println("Calling Camera2D.IsFollowSmoothingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_follow_smoothing_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera2D) IsHDragEnabled() bool {
	log.Println("Calling Camera2D.IsHDragEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_h_drag_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera2D) IsLimitDrawingEnabled() bool {
	log.Println("Calling Camera2D.IsLimitDrawingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_limit_drawing_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera2D) IsLimitSmoothingEnabled() bool {
	log.Println("Calling Camera2D.IsLimitSmoothingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_limit_smoothing_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera2D) IsMarginDrawingEnabled() bool {
	log.Println("Calling Camera2D.IsMarginDrawingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_margin_drawing_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera2D) IsRotating() bool {
	log.Println("Calling Camera2D.IsRotating()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_rotating", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera2D) IsScreenDrawingEnabled() bool {
	log.Println("Calling Camera2D.IsScreenDrawingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_screen_drawing_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Camera2D) IsVDragEnabled() bool {
	log.Println("Calling Camera2D.IsVDragEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_v_drag_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Make this the current 2D camera for the scene (viewport and layer), in case there's many cameras in the scene.
*/
func (o *Camera2D) MakeCurrent() {
	log.Println("Calling Camera2D.MakeCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "make_current", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the camera's position immediately to its current smoothing destination. This has no effect if smoothing is disabled.
*/
func (o *Camera2D) ResetSmoothing() {
	log.Println("Calling Camera2D.ResetSmoothing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "reset_smoothing", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera2D) SetAnchorMode(anchorMode int64) {
	log.Println("Calling Camera2D.SetAnchorMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(anchorMode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_anchor_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera2D) SetCustomViewport(viewport *Object) {
	log.Println("Calling Camera2D.SetCustomViewport()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(viewport)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_custom_viewport", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the margins needed to drag the camera (relative to the screen size). Margin uses the MARGIN_* enum. Drag margins of 0,0,0,0 will keep the camera at the center of the screen, while drag margins of 1,1,1,1 will only move when the camera is at the edges.
*/
func (o *Camera2D) SetDragMargin(margin int64, dragMargin float64) {
	log.Println("Calling Camera2D.SetDragMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(margin)
	goArguments[1] = reflect.ValueOf(dragMargin)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_drag_margin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera2D) SetEnableFollowSmoothing(followSmoothing bool) {
	log.Println("Calling Camera2D.SetEnableFollowSmoothing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(followSmoothing)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_enable_follow_smoothing", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera2D) SetFollowSmoothing(followSmoothing float64) {
	log.Println("Calling Camera2D.SetFollowSmoothing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(followSmoothing)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_follow_smoothing", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera2D) SetHDragEnabled(enabled bool) {
	log.Println("Calling Camera2D.SetHDragEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_h_drag_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera2D) SetHOffset(ofs float64) {
	log.Println("Calling Camera2D.SetHOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ofs)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_h_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the scrolling limit in pixels.
*/
func (o *Camera2D) SetLimit(margin int64, limit int64) {
	log.Println("Calling Camera2D.SetLimit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(margin)
	goArguments[1] = reflect.ValueOf(limit)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_limit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera2D) SetLimitDrawingEnabled(limitDrawingEnabled bool) {
	log.Println("Calling Camera2D.SetLimitDrawingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(limitDrawingEnabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_limit_drawing_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Smooth camera when reaching camera limits. This requires camera smoothing being enabled to have a noticeable effect.
*/
func (o *Camera2D) SetLimitSmoothingEnabled(limitSmoothingEnabled bool) {
	log.Println("Calling Camera2D.SetLimitSmoothingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(limitSmoothingEnabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_limit_smoothing_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera2D) SetMarginDrawingEnabled(marginDrawingEnabled bool) {
	log.Println("Calling Camera2D.SetMarginDrawingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(marginDrawingEnabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_margin_drawing_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the scroll offset. Useful for looking around or camera shake animations.
*/
func (o *Camera2D) SetOffset(offset *Vector2) {
	log.Println("Calling Camera2D.SetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera2D) SetRotating(rotating bool) {
	log.Println("Calling Camera2D.SetRotating()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rotating)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_rotating", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera2D) SetScreenDrawingEnabled(screenDrawingEnabled bool) {
	log.Println("Calling Camera2D.SetScreenDrawingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(screenDrawingEnabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_screen_drawing_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera2D) SetVDragEnabled(enabled bool) {
	log.Println("Calling Camera2D.SetVDragEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_v_drag_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera2D) SetVOffset(ofs float64) {
	log.Println("Calling Camera2D.SetVOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ofs)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_v_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Camera2D) SetZoom(zoom *Vector2) {
	log.Println("Calling Camera2D.SetZoom()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(zoom)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_zoom", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Camera2DImplementer is an interface for Camera2D objects.
*/
type Camera2DImplementer interface {
	class.Class
}
