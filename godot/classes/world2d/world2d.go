//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package world2d

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*
   Class that has everything pertaining to a 2D world. A physics space, a visual scenario and a sound space. 2D nodes register their resources into the current 2D world.
*/
type World2D struct {
	resource.Resource
}

func (o *World2D) baseClass() string {
	return "World2D"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *World2D) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *World2D) getOwner() *C.godot_object {
	return o.owner
}

/*
   Retrieve the [RID] of this world's canvas resource. Used by the [VisualServer] for 2D drawing.
*/
func (o *World2D) GetCanvas() *RID {
	log.Println("Calling World2D.GetCanvas()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_canvas", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Retrieve the state of this world's physics space. This allows arbitrary querying for collision.
*/
func (o *World2D) GetDirectSpaceState() *Physics2DDirectSpaceState {
	log.Println("Calling World2D.GetDirectSpaceState()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_direct_space_state", goArguments, "*Physics2DDirectSpaceState")

	returnValue := goRet.Interface().(*Physics2DDirectSpaceState)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Retrieve the [RID] of this world's physics space resource. Used by the [Physics2DServer] for 2D physics, treating it as both a space and an area.
*/
func (o *World2D) GetSpace() *RID {
	log.Println("Calling World2D.GetSpace()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_space", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   World2DImplementer is an interface for World2D objects.
*/
type World2DImplementer interface {
	class.Class
}
