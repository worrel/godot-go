//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package geometryinstance

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/visualinstance"
)

/*
   Base node for geometry based visual instances. Shares some common functionality like visibility and custom materials.
*/
type GeometryInstance struct {
	visualinstance.VisualInstance
}

func (o *GeometryInstance) baseClass() string {
	return "GeometryInstance"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *GeometryInstance) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *GeometryInstance) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *GeometryInstance) GetCastShadowsSetting() int64 {
	log.Println("Calling GeometryInstance.GetCastShadowsSetting()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_cast_shadows_setting", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GeometryInstance) GetExtraCullMargin() float64 {
	log.Println("Calling GeometryInstance.GetExtraCullMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_extra_cull_margin", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GeometryInstance) GetFlag(flag int64) bool {
	log.Println("Calling GeometryInstance.GetFlag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flag)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_flag", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GeometryInstance) GetLodMaxDistance() float64 {
	log.Println("Calling GeometryInstance.GetLodMaxDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_lod_max_distance", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GeometryInstance) GetLodMaxHysteresis() float64 {
	log.Println("Calling GeometryInstance.GetLodMaxHysteresis()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_lod_max_hysteresis", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GeometryInstance) GetLodMinDistance() float64 {
	log.Println("Calling GeometryInstance.GetLodMinDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_lod_min_distance", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GeometryInstance) GetLodMinHysteresis() float64 {
	log.Println("Calling GeometryInstance.GetLodMinHysteresis()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_lod_min_hysteresis", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the material override for the whole geometry.
*/
func (o *GeometryInstance) GetMaterialOverride() *Material {
	log.Println("Calling GeometryInstance.GetMaterialOverride()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_material_override", goArguments, "*Material")

	returnValue := goRet.Interface().(*Material)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *GeometryInstance) SetCastShadowsSetting(shadowCastingSetting int64) {
	log.Println("Calling GeometryInstance.SetCastShadowsSetting()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shadowCastingSetting)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_cast_shadows_setting", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GeometryInstance) SetExtraCullMargin(margin float64) {
	log.Println("Calling GeometryInstance.SetExtraCullMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(margin)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_extra_cull_margin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GeometryInstance) SetFlag(flag int64, value bool) {
	log.Println("Calling GeometryInstance.SetFlag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(flag)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_flag", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GeometryInstance) SetLodMaxDistance(mode float64) {
	log.Println("Calling GeometryInstance.SetLodMaxDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_lod_max_distance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GeometryInstance) SetLodMaxHysteresis(mode float64) {
	log.Println("Calling GeometryInstance.SetLodMaxHysteresis()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_lod_max_hysteresis", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GeometryInstance) SetLodMinDistance(mode float64) {
	log.Println("Calling GeometryInstance.SetLodMinDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_lod_min_distance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GeometryInstance) SetLodMinHysteresis(mode float64) {
	log.Println("Calling GeometryInstance.SetLodMinHysteresis()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_lod_min_hysteresis", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the material override for the whole geometry.
*/
func (o *GeometryInstance) SetMaterialOverride(material *Material) {
	log.Println("Calling GeometryInstance.SetMaterialOverride()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(material)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_material_override", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   GeometryInstanceImplementer is an interface for GeometryInstance objects.
*/
type GeometryInstanceImplementer interface {
	class.Class
}
