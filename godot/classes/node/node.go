//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package node

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/object"
)

/*
   Nodes are the base bricks with which Godot games are developed. They can be set as children of other nodes, resulting in a tree arrangement. A given node can contain any number of nodes as children (but there is only one scene tree root node) with the requirement that all siblings (direct children of a node) should have unique names. Any tree of nodes is called a [i]scene[/i]. Scenes can be saved to the disk and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of the projects. Nodes can optionally be added to groups. This makes it easy to reach a number of nodes from the code (for example an "enemies" group) to perform grouped actions. [b]Scene tree:[/b] The [SceneTree] contains the active tree of nodes. When a node is added to the scene tree, it receives the NOTIFICATION_ENTER_TREE notification and its [method _enter_tree] callback is triggered. Children nodes are always added [i]after[/i] their parent node, i.e. the [method _enter_tree] callback of a parent node will be triggered before its child's. Once all nodes have been added in the scene tree, they receive the NOTIFICATION_READY notification and their respective [method _ready] callbacks are triggered. For groups of nodes, the [method _ready] callback is called in reverse order, from the children up to the parent nodes. It means that when adding a scene to the scene tree, the following order will be used for the callbacks: [method _enter_tree] of the parent, [method _enter_tree] of the children, [method _ready] of the children and finally [method _ready] of the parent (and that recursively for the whole scene). [b]Processing:[/b] Nodes can be set to the "process" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback [method _process], toggled with [method set_process]) happens as fast as possible and is dependent on the frame rate, so the processing time [i]delta[/i] is variable. Physics processing (callback [method _physics_process], toggled with [method set_physics_process]) happens a fixed amount of times per second (by default 60) and is useful to link itself to the physics. Nodes can also process input events. When set, the [method _input] function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the [method _unhandled_input] function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI [Control] nodes), ensuring that the node only receives the events that were meant for it. To keep track of the scene hierarchy (especially when instancing scenes into other scenes), an "owner" can be set for the node with [method set_owner]. This keeps track of who instanced what. This is mostly useful when writing editors and tools, though. Finally, when a node is freed with [method free] or [method queue_free], it will also free all its children. [b]Networking with nodes:[/b] After connecting to a server (or making one, see [NetworkedMultiplayerENet]) it is possible to use the built-in RPC (remote procedure call) system to easily communicate over the network. By calling [method rpc] with a method name, it will be called locally, and in all connected peers (peers = clients and the server that accepts connections), with behaviour varying depending on the network mode ([method set_network_mode]) on the receiving peer. To identify which [Node] receives the RPC call Godot will use its [NodePath] (make sure node names are the same on all peers).
*/
type Node struct {
	object.Object
}

func (o *Node) baseClass() string {
	return "Node"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Node) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Node) getOwner() *C.godot_object {
	return o.owner
}

/*
   Called when the node enters the [SceneTree] (e.g. upon instancing, scene changing or after calling [method add_child] in a script). If the node has children, its [method _enter_tree] callback will be called first, and then that of the children. Corresponds to the NOTIFICATION_ENTER_TREE notification in [method Object._notification].
*/
func (o *Node) X_EnterTree() {
	log.Println("Calling Node.X_EnterTree()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_enter_tree", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Called when the node leaves the [SceneTree] (e.g. upon freeing, scene changing or after calling [method remove_child] in a script). If the node has children, its [method _exit_tree] callback will be called last, after all its children have left the tree. Corresponds to the NOTIFICATION_EXIT_TREE notification in [method Object._notification].
*/
func (o *Node) X_ExitTree() {
	log.Println("Calling Node.X_ExitTree()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_exit_tree", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node) X_FixedProcess(delta float64) {
	log.Println("Calling Node.X_FixedProcess()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(delta)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_fixed_process", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node) X_GetImportPath() *NodePath {
	log.Println("Calling Node.X_GetImportPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_import_path", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Called when there is a change to input devices. Propagated through the node tree until a Node consumes it.
*/
func (o *Node) X_Input(event *InputEvent) {
	log.Println("Calling Node.X_Input()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(event)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the [code]delta[/code] time since the previous frame is not constant. It is only called if processing has been enabled with [method set_process]. Corresponds to the NOTIFICATION_PROCESS notification in [method Object._notification].
*/
func (o *Node) X_Process(delta float64) {
	log.Println("Calling Node.X_Process()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(delta)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_process", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Called when the node is "ready", i.e. when both the node and its children have entered the scene tree. If the node has children, their [method _ready] callback gets triggered first, and the node will receive the ready notification only afterwards. Corresponds to the NOTIFICATION_READY notification in [method Object._notification].
*/
func (o *Node) X_Ready() {
	log.Println("Calling Node.X_Ready()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_ready", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node) X_SetImportPath(importPath *NodePath) {
	log.Println("Calling Node.X_SetImportPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(importPath)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_import_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Propagated to all nodes when the previous InputEvent is not consumed by any nodes.
*/
func (o *Node) X_UnhandledInput(event *InputEvent) {
	log.Println("Calling Node.X_UnhandledInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(event)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_unhandled_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Node) X_UnhandledKeyInput(event *InputEventKey) {
	log.Println("Calling Node.X_UnhandledKeyInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(event)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_unhandled_key_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add a child [Node]. Nodes can have as many children as they want, but every child must have a unique name. Children nodes are automatically deleted when the parent node is deleted, so deleting a whole scene is performed by deleting its topmost node. The optional boolean argument enforces creating child nodes with human-readable names, based on the name of the node being instanced instead of its type only.
*/
func (o *Node) AddChild(node *Object, legibleUniqueName bool) {
	log.Println("Calling Node.AddChild()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(node)
	goArguments[1] = reflect.ValueOf(legibleUniqueName)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_child", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Node) AddChildBelowNode(node *Object, childNode *Object, legibleUniqueName bool) {
	log.Println("Calling Node.AddChildBelowNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(node)
	goArguments[1] = reflect.ValueOf(childNode)
	goArguments[2] = reflect.ValueOf(legibleUniqueName)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_child_below_node", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add a node to a group. Groups are helpers to name and organize a subset of nodes, like for example "enemies" or "collectables". A [Node] can be in any number of groups. Nodes can be assigned a group at any time, but will not be added to it until they are inside the scene tree (see [method is_inside_tree]).
*/
func (o *Node) AddToGroup(group string, persistent bool) {
	log.Println("Calling Node.AddToGroup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(group)
	goArguments[1] = reflect.ValueOf(persistent)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_to_group", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return true if the node can process, i.e. whether its pause mode allows processing while the scene tree is paused (see [method set_pause_mode]). Always returns true if the scene tree is not paused, and false if the node is not in the tree. FIXME: Why FAIL_COND?
*/
func (o *Node) CanProcess() bool {
	log.Println("Calling Node.CanProcess()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "can_process", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Duplicate the node, returning a new [Node]. You can fine-tune the behavior using the [code]flags[/code], which are based on the DUPLICATE_* constants.
*/
func (o *Node) Duplicate(flags int64) *Node {
	log.Println("Calling Node.Duplicate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flags)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "duplicate", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Find a descendant of this node whose name matches [code]mask[/code] as in [method String.match] (i.e. case sensitive, but '*' matches zero or more characters and '?' matches any single character except '.'). Note that it does not match against the full path, just against individual node names.
*/
func (o *Node) FindNode(mask string, recursive bool, owned bool) *Node {
	log.Println("Calling Node.FindNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(mask)
	goArguments[1] = reflect.ValueOf(recursive)
	goArguments[2] = reflect.ValueOf(owned)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "find_node", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return a child node by its index (see [method get_child_count]). This method is often used for iterating all children of a node.
*/
func (o *Node) GetChild(idx int64) *Node {
	log.Println("Calling Node.GetChild()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_child", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the amount of child nodes.
*/
func (o *Node) GetChildCount() int64 {
	log.Println("Calling Node.GetChildCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_child_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return an array of references ([Node]) to the child nodes.
*/
func (o *Node) GetChildren() *Array {
	log.Println("Calling Node.GetChildren()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_children", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return a filename that may be contained by the node. When a scene is instanced from a file, it topmost node contains the filename from where it was loaded (see [method set_filename]).
*/
func (o *Node) GetFilename() string {
	log.Println("Calling Node.GetFilename()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_filename", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Node) GetFixedProcessDeltaTime() float64 {
	log.Println("Calling Node.GetFixedProcessDeltaTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fixed_process_delta_time", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return an array listing the groups that the node is part of.
*/
func (o *Node) GetGroups() *Array {
	log.Println("Calling Node.GetGroups()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_groups", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the node index, i.e. its position among the siblings of its parent.
*/
func (o *Node) GetIndex() int64 {
	log.Println("Calling Node.GetIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_index", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the name of the node. This name is unique among the siblings (other child nodes from the same parent).
*/
func (o *Node) GetName() string {
	log.Println("Calling Node.GetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_name", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Node) GetNetworkMaster() int64 {
	log.Println("Calling Node.GetNetworkMaster()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_network_master", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Fetch a node. The [NodePath] must be valid (or else an error will be raised) and can be either the path to child node, a relative path (from the current node to another node), or an absolute path to a node. Note: fetching absolute paths only works when the node is inside the scene tree (see [method is_inside_tree]). [i]Example:[/i] Assume your current node is Character and the following tree: [codeblock] /root /root/Character /root/Character/Sword /root/Character/Backpack/Dagger /root/MyGame /root/Swamp/Alligator /root/Swamp/Mosquito /root/Swamp/Goblin [/codeblock] Possible paths are: [codeblock] get_node("Sword") get_node("Backpack/Dagger") get_node("../Swamp/Alligator") get_node("/root/MyGame") [/codeblock]
*/
func (o *Node) GetNode(path *NodePath) *Node {
	log.Println("Calling Node.GetNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_node", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Node) GetNodeAndResource(path *NodePath) *Array {
	log.Println("Calling Node.GetNodeAndResource()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_node_and_resource", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the node owner (see [method set_owner]).
*/
func (o *Node) GetOwner() *Node {
	log.Println("Calling Node.GetOwner()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_owner", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the parent node of the current node, or an empty [Node] if the node lacks a parent.
*/
func (o *Node) GetParent() *Node {
	log.Println("Calling Node.GetParent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_parent", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the absolute path of the current node. This only works if the current node is inside the scene tree (see [method is_inside_tree]).
*/
func (o *Node) GetPath() *NodePath {
	log.Println("Calling Node.GetPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_path", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the relative path from the current node to the specified node in "node" argument. Both nodes must be in the same scene, or else the function will fail.
*/
func (o *Node) GetPathTo(node *Object) *NodePath {
	log.Println("Calling Node.GetPathTo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(node)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_path_to", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the pause mode (PAUSE_MODE_*) of this Node.
*/
func (o *Node) GetPauseMode() int64 {
	log.Println("Calling Node.GetPauseMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_pause_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the order in the node tree branch, i.e. if called by the first child Node, return 0.
*/
func (o *Node) GetPositionInParent() int64 {
	log.Println("Calling Node.GetPositionInParent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_position_in_parent", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the time elapsed (in seconds) since the last process callback. This is almost always different each time.
*/
func (o *Node) GetProcessDeltaTime() float64 {
	log.Println("Calling Node.GetProcessDeltaTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_process_delta_time", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Node) GetSceneInstanceLoadPlaceholder() bool {
	log.Println("Calling Node.GetSceneInstanceLoadPlaceholder()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_scene_instance_load_placeholder", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return a [SceneTree] that this node is inside.
*/
func (o *Node) GetTree() *SceneTree {
	log.Println("Calling Node.GetTree()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tree", goArguments, "*SceneTree")

	returnValue := goRet.Interface().(*SceneTree)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Node) GetViewport() *Viewport {
	log.Println("Calling Node.GetViewport()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_viewport", goArguments, "*Viewport")

	returnValue := goRet.Interface().(*Viewport)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return whether the node that a given [NodePath] points too exists.
*/
func (o *Node) HasNode(path *NodePath) bool {
	log.Println("Calling Node.HasNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_node", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Node) HasNodeAndResource(path *NodePath) bool {
	log.Println("Calling Node.HasNodeAndResource()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_node_and_resource", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return [i]true[/i] if the "node" argument is a direct or indirect child of the current node, otherwise return [i]false[/i].
*/
func (o *Node) IsAParentOf(node *Object) bool {
	log.Println("Calling Node.IsAParentOf()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(node)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_a_parent_of", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Node) IsDisplayedFolded() bool {
	log.Println("Calling Node.IsDisplayedFolded()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_displayed_folded", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Node) IsFixedProcessing() bool {
	log.Println("Calling Node.IsFixedProcessing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_fixed_processing", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Node) IsFixedProcessingInternal() bool {
	log.Println("Calling Node.IsFixedProcessingInternal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_fixed_processing_internal", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return [i]true[/i] if "node" occurs later in the scene hierarchy than the current node, otherwise return [i]false[/i].
*/
func (o *Node) IsGreaterThan(node *Object) bool {
	log.Println("Calling Node.IsGreaterThan()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(node)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_greater_than", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return whether this Node is in the specified group.
*/
func (o *Node) IsInGroup(group string) bool {
	log.Println("Calling Node.IsInGroup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(group)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_in_group", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return whether this Node is inside a [SceneTree].
*/
func (o *Node) IsInsideTree() bool {
	log.Println("Calling Node.IsInsideTree()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_inside_tree", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Node) IsNetworkMaster() bool {
	log.Println("Calling Node.IsNetworkMaster()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_network_master", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return whether processing is enabled in the current node (see [method set_process]).
*/
func (o *Node) IsProcessing() bool {
	log.Println("Calling Node.IsProcessing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_processing", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if the node is processing input (see [method set_process_input]).
*/
func (o *Node) IsProcessingInput() bool {
	log.Println("Calling Node.IsProcessingInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_processing_input", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Node) IsProcessingInternal() bool {
	log.Println("Calling Node.IsProcessingInternal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_processing_internal", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if the node is processing unhandled input (see [method set_process_unhandled_input]).
*/
func (o *Node) IsProcessingUnhandledInput() bool {
	log.Println("Calling Node.IsProcessingUnhandledInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_processing_unhandled_input", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Node) IsProcessingUnhandledKeyInput() bool {
	log.Println("Calling Node.IsProcessingUnhandledKeyInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_processing_unhandled_key_input", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Move a child node to a different position (order) amongst the other children. Since calls, signals, etc are performed by tree order, changing the order of children nodes may be useful.
*/
func (o *Node) MoveChild(childNode *Object, toPosition int64) {
	log.Println("Calling Node.MoveChild()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(childNode)
	goArguments[1] = reflect.ValueOf(toPosition)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "move_child", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Node) PrintStrayNodes() {
	log.Println("Calling Node.PrintStrayNodes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "print_stray_nodes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Print the scene to stdout. Used mainly for debugging purposes.
*/
func (o *Node) PrintTree() {
	log.Println("Calling Node.PrintTree()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "print_tree", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Calls the method (if present) with the arguments given in "args" on this Node and recursively on all children. If the parent_first argument is true then the method will be called on the current [Node] first, then on all children. If it is false then the children will get called first.
*/
func (o *Node) PropagateCall(method string, args *Array, parentFirst bool) {
	log.Println("Calling Node.PropagateCall()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(method)
	goArguments[1] = reflect.ValueOf(args)
	goArguments[2] = reflect.ValueOf(parentFirst)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "propagate_call", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Notify the current node and all its children recursively by calling notification() in all of them.
*/
func (o *Node) PropagateNotification(what int64) {
	log.Println("Calling Node.PropagateNotification()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(what)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "propagate_notification", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Queues a node for deletion at the end of the current frame. When deleted, all of its children nodes will be deleted as well. This method ensures it's safe to delete the node, contrary to [method Object.free]. Use [method Object.is_queued_for_deletion] to know whether a node will be deleted at the end of the frame.
*/
func (o *Node) QueueFree() {
	log.Println("Calling Node.QueueFree()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "queue_free", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Move this node to the top of the array of nodes of the parent node. This is often useful on GUIs ([Control]), because their order of drawing fully depends on their order in the tree.
*/
func (o *Node) Raise() {
	log.Println("Calling Node.Raise()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "raise", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remove a node and set all its children as children of the parent node (if exists). All even subscriptions that pass by the removed node will be unsubscribed.
*/
func (o *Node) RemoveAndSkip() {
	log.Println("Calling Node.RemoveAndSkip()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_and_skip", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remove a child [Node]. Node is NOT deleted and will have to be deleted manually.
*/
func (o *Node) RemoveChild(node *Object) {
	log.Println("Calling Node.RemoveChild()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(node)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_child", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remove a node from a group.
*/
func (o *Node) RemoveFromGroup(group string) {
	log.Println("Calling Node.RemoveFromGroup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(group)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_from_group", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Replace a node in a scene by a given one. Subscriptions that pass through this node will be lost.
*/
func (o *Node) ReplaceBy(node *Object, keepData bool) {
	log.Println("Calling Node.ReplaceBy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(node)
	goArguments[1] = reflect.ValueOf(keepData)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "replace_by", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Request that [code]_ready[/code] be called again.
*/
func (o *Node) RequestReady() {
	log.Println("Calling Node.RequestReady()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "request_ready", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Send a remote procedure call request to all peers on the network (and locally), optionally sending additional data as arguments. Call request will be received by nodes with the same [NodePath].
*/
func (o *Node) Rpc(method string) *Variant {
	log.Println("Calling Node.Rpc()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(method)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "rpc", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Change the method's RPC mode (one of RPC_MODE_* constants).
*/
func (o *Node) RpcConfig(method string, mode int64) {
	log.Println("Calling Node.RpcConfig()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(method)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "rpc_config", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Send a [method rpc] to a specific peer identified by [i]peer_id[/i].
*/
func (o *Node) RpcId(peerId int64, method string) *Variant {
	log.Println("Calling Node.RpcId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(peerId)
	goArguments[1] = reflect.ValueOf(method)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "rpc_id", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Send a [method rpc] using an unreliable protocol.
*/
func (o *Node) RpcUnreliable(method string) *Variant {
	log.Println("Calling Node.RpcUnreliable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(method)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "rpc_unreliable", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Send a [method rpc] to a specific peer identified by [i]peer_id[/i] using an unreliable protocol.
*/
func (o *Node) RpcUnreliableId(peerId int64, method string) *Variant {
	log.Println("Calling Node.RpcUnreliableId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(peerId)
	goArguments[1] = reflect.ValueOf(method)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "rpc_unreliable_id", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Remotely change property's value on other peers (and locally).
*/
func (o *Node) Rset(property string, value *Variant) {
	log.Println("Calling Node.Rset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(property)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "rset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Change the property's RPC mode (one of RPC_MODE_* constants).
*/
func (o *Node) RsetConfig(property string, mode int64) {
	log.Println("Calling Node.RsetConfig()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(property)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "rset_config", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remotely change property's value on a specific peer identified by [i]peer_id[/i].
*/
func (o *Node) RsetId(peerId int64, property string, value *Variant) {
	log.Println("Calling Node.RsetId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(peerId)
	goArguments[1] = reflect.ValueOf(property)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "rset_id", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remotely change property's value on other peers (and locally) using an unreliable protocol.
*/
func (o *Node) RsetUnreliable(property string, value *Variant) {
	log.Println("Calling Node.RsetUnreliable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(property)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "rset_unreliable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remotely change property's value on a specific peer identified by [i]peer_id[/i] using an unreliable protocol.
*/
func (o *Node) RsetUnreliableId(peerId int64, property string, value *Variant) {
	log.Println("Calling Node.RsetUnreliableId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(peerId)
	goArguments[1] = reflect.ValueOf(property)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "rset_unreliable_id", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Node) SetDisplayFolded(fold bool) {
	log.Println("Calling Node.SetDisplayFolded()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(fold)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_display_folded", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   A node can contain a filename. This filename should not be changed by the user, unless writing editors and tools. When a scene is instanced from a file, it topmost node contains the filename from where it was loaded.
*/
func (o *Node) SetFilename(filename string) {
	log.Println("Calling Node.SetFilename()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(filename)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_filename", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node) SetFixedProcess(enable bool) {
	log.Println("Calling Node.SetFixedProcess()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fixed_process", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node) SetFixedProcessInternal(enable bool) {
	log.Println("Calling Node.SetFixedProcessInternal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fixed_process_internal", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the name of the [Node]. Name must be unique within parent, and setting an already existing name will cause for the node to be automatically renamed.
*/
func (o *Node) SetName(name string) {
	log.Println("Calling Node.SetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_name", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Node) SetNetworkMaster(id int64, recursive bool) {
	log.Println("Calling Node.SetNetworkMaster()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(recursive)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_network_master", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the node owner. A node can have any other node as owner (as long as a valid parent, grandparent, etc ascending in the tree). When saving a node (using SceneSaver) all the nodes it owns will be saved with it. This allows to create complex SceneTrees, with instancing and subinstancing.
*/
func (o *Node) SetOwner(owner *Object) {
	log.Println("Calling Node.SetOwner()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(owner)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_owner", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set pause mode (PAUSE_MODE_*) of this Node.
*/
func (o *Node) SetPauseMode(mode int64) {
	log.Println("Calling Node.SetPauseMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_pause_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Enables or disables node processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS on every drawn frame (and the [method _process] callback will be called if exists). It is common to check how much time was elapsed since the previous frame by calling [method get_process_delta_time].
*/
func (o *Node) SetProcess(enable bool) {
	log.Println("Calling Node.SetProcess()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_process", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Enable input processing for node. This is not required for GUI controls! It hooks up the node to receive all input (see [method _input]).
*/
func (o *Node) SetProcessInput(enable bool) {
	log.Println("Calling Node.SetProcessInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_process_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Node) SetProcessInternal(enable bool) {
	log.Println("Calling Node.SetProcessInternal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_process_internal", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Enable unhandled input processing for node. This is not required for GUI controls! It hooks up the node to receive all input that was not previously handled before (usually by a [Control]). (see [method _unhandled_input]).
*/
func (o *Node) SetProcessUnhandledInput(enable bool) {
	log.Println("Calling Node.SetProcessUnhandledInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_process_unhandled_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Node) SetProcessUnhandledKeyInput(enable bool) {
	log.Println("Calling Node.SetProcessUnhandledKeyInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_process_unhandled_key_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Node) SetSceneInstanceLoadPlaceholder(loadPlaceholder bool) {
	log.Println("Calling Node.SetSceneInstanceLoadPlaceholder()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(loadPlaceholder)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_scene_instance_load_placeholder", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   NodeImplementer is an interface for Node objects.
*/
type NodeImplementer interface {
	class.Class
}
