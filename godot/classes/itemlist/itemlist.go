//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package itemlist

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/control"
)

/*
   This control provides a selectable list of items that may be in a single (or multiple columns) with option of text, icons, or both text and icon. Tooltips are supported and may be different for every item in the list. Selectable items in the list may be selected or deselected and multiple selection may be enabled. Selection with right mouse button may also be enabled to allow use of popup context menus. Items may also be 'activated' with a double click (or Enter key).
*/
type ItemList struct {
	control.Control
}

func (o *ItemList) baseClass() string {
	return "ItemList"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ItemList) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *ItemList) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *ItemList) X_GetItems() *Array {
	log.Println("Calling ItemList.X_GetItems()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_items", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ItemList) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling ItemList.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ItemList) X_ScrollChanged(arg0 float64) {
	log.Println("Calling ItemList.X_ScrollChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_scroll_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ItemList) X_SetItems(arg0 *Array) {
	log.Println("Calling ItemList.X_SetItems()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_items", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds an item to the item list with no text, only an icon.
*/
func (o *ItemList) AddIconItem(icon *Texture, selectable bool) {
	log.Println("Calling ItemList.AddIconItem()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(icon)
	goArguments[1] = reflect.ValueOf(selectable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_icon_item", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds an item to the item list with specified text. Specify an icon of null for a list item with no icon. If selectable is true the list item will be selectable.
*/
func (o *ItemList) AddItem(text string, icon *Texture, selectable bool) {
	log.Println("Calling ItemList.AddItem()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(text)
	goArguments[1] = reflect.ValueOf(icon)
	goArguments[2] = reflect.ValueOf(selectable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_item", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remove all items from the list.
*/
func (o *ItemList) Clear() {
	log.Println("Calling ItemList.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Ensure selection is visible, adjusting the scroll position as necessary.
*/
func (o *ItemList) EnsureCurrentIsVisible() {
	log.Println("Calling ItemList.EnsureCurrentIsVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "ensure_current_is_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return whether or not items may be selected via right mouse clicking.
*/
func (o *ItemList) GetAllowRmbSelect() bool {
	log.Println("Calling ItemList.GetAllowRmbSelect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_allow_rmb_select", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   If column size has been fixed to a value, return that value.
*/
func (o *ItemList) GetFixedColumnWidth() int64 {
	log.Println("Calling ItemList.GetFixedColumnWidth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fixed_column_width", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ItemList) GetFixedIconSize() *Vector2 {
	log.Println("Calling ItemList.GetFixedIconSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fixed_icon_size", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ItemList) GetIconMode() int64 {
	log.Println("Calling ItemList.GetIconMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_icon_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ItemList) GetIconScale() float64 {
	log.Println("Calling ItemList.GetIconScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_icon_scale", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Given a position within the control return the item (if any) at that point.
*/
func (o *ItemList) GetItemAtPosition(position *Vector2, exact bool) int64 {
	log.Println("Calling ItemList.GetItemAtPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(position)
	goArguments[1] = reflect.ValueOf(exact)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_item_at_position", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return count of items currently in the item list.
*/
func (o *ItemList) GetItemCount() int64 {
	log.Println("Calling ItemList.GetItemCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_item_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ItemList) GetItemCustomBgColor(idx int64) *Color {
	log.Println("Calling ItemList.GetItemCustomBgColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_item_custom_bg_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ItemList) GetItemIcon(idx int64) *Texture {
	log.Println("Calling ItemList.GetItemIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_item_icon", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ItemList) GetItemIconRegion(idx int64) *Rect2 {
	log.Println("Calling ItemList.GetItemIconRegion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_item_icon_region", goArguments, "*Rect2")

	returnValue := goRet.Interface().(*Rect2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ItemList) GetItemMetadata(idx int64) *Variant {
	log.Println("Calling ItemList.GetItemMetadata()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_item_metadata", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the text for specified item index.
*/
func (o *ItemList) GetItemText(idx int64) string {
	log.Println("Calling ItemList.GetItemText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_item_text", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return tooltip hint for specified item index.
*/
func (o *ItemList) GetItemTooltip(idx int64) string {
	log.Println("Calling ItemList.GetItemTooltip()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_item_tooltip", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return total number of columns in use by the list.
*/
func (o *ItemList) GetMaxColumns() int64 {
	log.Println("Calling ItemList.GetMaxColumns()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_max_columns", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return total number of lines currently in use by the list.
*/
func (o *ItemList) GetMaxTextLines() int64 {
	log.Println("Calling ItemList.GetMaxTextLines()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_max_text_lines", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ItemList) GetSelectMode() int64 {
	log.Println("Calling ItemList.GetSelectMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_select_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the list of selected indexes.
*/
func (o *ItemList) GetSelectedItems() *PoolIntArray {
	log.Println("Calling ItemList.GetSelectedItems()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_selected_items", goArguments, "*PoolIntArray")

	returnValue := goRet.Interface().(*PoolIntArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the current vertical scroll bar for the List.
*/
func (o *ItemList) GetVScroll() *VScrollBar {
	log.Println("Calling ItemList.GetVScroll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_v_scroll", goArguments, "*VScrollBar")

	returnValue := goRet.Interface().(*VScrollBar)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ItemList) HasAutoHeight() bool {
	log.Println("Calling ItemList.HasAutoHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_auto_height", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether or not the item at the specified index is disabled
*/
func (o *ItemList) IsItemDisabled(idx int64) bool {
	log.Println("Calling ItemList.IsItemDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_item_disabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether or not the item at the specified index is selectable.
*/
func (o *ItemList) IsItemSelectable(idx int64) bool {
	log.Println("Calling ItemList.IsItemSelectable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_item_selectable", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether the tooltip is enabled for specified item index.
*/
func (o *ItemList) IsItemTooltipEnabled(idx int64) bool {
	log.Println("Calling ItemList.IsItemTooltipEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_item_tooltip_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether or not all columns of the list are of the same size.
*/
func (o *ItemList) IsSameColumnWidth() bool {
	log.Println("Calling ItemList.IsSameColumnWidth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_same_column_width", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether or not item at the specified index is currently selected.
*/
func (o *ItemList) IsSelected(idx int64) bool {
	log.Println("Calling ItemList.IsSelected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_selected", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Remove item at specified index from the list.
*/
func (o *ItemList) RemoveItem(idx int64) {
	log.Println("Calling ItemList.RemoveItem()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_item", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Select the item at the specified index. Note: This method does not trigger the item selection signal.
*/
func (o *ItemList) Select(idx int64, single bool) {
	log.Println("Calling ItemList.Select()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(single)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "select", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Allow (or disallow) selection of (selectable) items in the list using right mouse button.
*/
func (o *ItemList) SetAllowRmbSelect(allow bool) {
	log.Println("Calling ItemList.SetAllowRmbSelect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(allow)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_allow_rmb_select", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ItemList) SetAutoHeight(enable bool) {
	log.Println("Calling ItemList.SetAutoHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_auto_height", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the size (width) all columns in the list are to use.
*/
func (o *ItemList) SetFixedColumnWidth(width int64) {
	log.Println("Calling ItemList.SetFixedColumnWidth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(width)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fixed_column_width", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ItemList) SetFixedIconSize(size *Vector2) {
	log.Println("Calling ItemList.SetFixedIconSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(size)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fixed_icon_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ItemList) SetIconMode(mode int64) {
	log.Println("Calling ItemList.SetIconMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_icon_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ItemList) SetIconScale(scale float64) {
	log.Println("Calling ItemList.SetIconScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_icon_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ItemList) SetItemCustomBgColor(idx int64, customBgColor *Color) {
	log.Println("Calling ItemList.SetItemCustomBgColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(customBgColor)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_item_custom_bg_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Disable (or enable) item at specified index. Disabled items are not be selectable and do not fire activation (Enter or double-click) signals.
*/
func (o *ItemList) SetItemDisabled(idx int64, disabled bool) {
	log.Println("Calling ItemList.SetItemDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(disabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_item_disabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set (or replace) icon of the item at the specified index.
*/
func (o *ItemList) SetItemIcon(idx int64, icon *Texture) {
	log.Println("Calling ItemList.SetItemIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(icon)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_item_icon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ItemList) SetItemIconRegion(idx int64, rect *Rect2) {
	log.Println("Calling ItemList.SetItemIconRegion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(rect)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_item_icon_region", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a value (of any type) to be stored with the item at the specified index.
*/
func (o *ItemList) SetItemMetadata(idx int64, metadata *Variant) {
	log.Println("Calling ItemList.SetItemMetadata()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(metadata)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_item_metadata", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Allow or disallow selection of the item at the specified index.
*/
func (o *ItemList) SetItemSelectable(idx int64, selectable bool) {
	log.Println("Calling ItemList.SetItemSelectable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(selectable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_item_selectable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets text of item at specified index.
*/
func (o *ItemList) SetItemText(idx int64, text string) {
	log.Println("Calling ItemList.SetItemText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_item_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets tooltip hint for item at specified index.
*/
func (o *ItemList) SetItemTooltip(idx int64, tooltip string) {
	log.Println("Calling ItemList.SetItemTooltip()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(tooltip)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_item_tooltip", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets whether the tooltip is enabled for specified item index.
*/
func (o *ItemList) SetItemTooltipEnabled(idx int64, enable bool) {
	log.Println("Calling ItemList.SetItemTooltipEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_item_tooltip_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set maximum number of columns to use for the list.
*/
func (o *ItemList) SetMaxColumns(amount int64) {
	log.Println("Calling ItemList.SetMaxColumns()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_max_columns", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set maximum number of lines to use for the list.
*/
func (o *ItemList) SetMaxTextLines(lines int64) {
	log.Println("Calling ItemList.SetMaxTextLines()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(lines)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_max_text_lines", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a fixed size (width) to use for all columns of the list.
*/
func (o *ItemList) SetSameColumnWidth(enable bool) {
	log.Println("Calling ItemList.SetSameColumnWidth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_same_column_width", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ItemList) SetSelectMode(mode int64) {
	log.Println("Calling ItemList.SetSelectMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_select_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sorts items in the list by their text.
*/
func (o *ItemList) SortItemsByText() {
	log.Println("Calling ItemList.SortItemsByText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "sort_items_by_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Ensure item at specified index is not selected.
*/
func (o *ItemList) Unselect(idx int64) {
	log.Println("Calling ItemList.Unselect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "unselect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ItemListImplementer is an interface for ItemList objects.
*/
type ItemListImplementer interface {
	class.Class
}
