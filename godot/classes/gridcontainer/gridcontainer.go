//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package gridcontainer

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/container"
)

/*
   Grid container will arrange its children in a grid like structure, the grid columns are specified using the [method set_columns] method and the number of rows will be equal to the number of children in the container divided by the number of columns, for example: if the container has 5 children, and 2 columns, there will be 3 rows in the container. Notice that grid layout will preserve the columns and rows for every size of the container.
*/
type GridContainer struct {
	container.Container
}

func (o *GridContainer) baseClass() string {
	return "GridContainer"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *GridContainer) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *GridContainer) getOwner() *C.godot_object {
	return o.owner
}

/*
   Returns the number of columns in this container
*/
func (o *GridContainer) GetColumns() int64 {
	log.Println("Calling GridContainer.GetColumns()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_columns", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the numbers of columns in the container, then reorder its children to accommodate the new layout
*/
func (o *GridContainer) SetColumns(columns int64) {
	log.Println("Calling GridContainer.SetColumns()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(columns)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_columns", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   GridContainerImplementer is an interface for GridContainer objects.
*/
type GridContainerImplementer interface {
	class.Class
}
