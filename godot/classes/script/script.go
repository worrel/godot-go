//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package script

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*
   A class stored as a resource. The script exends the functionality of all objects that instance it. The 'new' method of a script subclass creates a new instance. [method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes.
*/
type Script struct {
	resource.Resource
}

func (o *Script) baseClass() string {
	return "Script"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Script) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Script) getOwner() *C.godot_object {
	return o.owner
}

/*
   Returns true if the script can be instanced.
*/
func (o *Script) CanInstance() bool {
	log.Println("Calling Script.CanInstance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "can_instance", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Script) GetNodeType() string {
	log.Println("Calling Script.GetNodeType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_node_type", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the script source code, or an empty string if source code is not available.
*/
func (o *Script) GetSourceCode() string {
	log.Println("Calling Script.GetSourceCode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_source_code", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if the script, or a base class, defines a signal with the given name.
*/
func (o *Script) HasScriptSignal(signalName string) bool {
	log.Println("Calling Script.HasScriptSignal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(signalName)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_script_signal", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if the script contains non-empty source code.
*/
func (o *Script) HasSourceCode() bool {
	log.Println("Calling Script.HasSourceCode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_source_code", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if 'base_object' is an instance of this script.
*/
func (o *Script) InstanceHas(baseObject *Object) bool {
	log.Println("Calling Script.InstanceHas()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(baseObject)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "instance_has", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if the script is a tool script. A tool script can run in the editor.
*/
func (o *Script) IsTool() bool {
	log.Println("Calling Script.IsTool()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_tool", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Reloads the script's class implementation. Returns an error code.
*/
func (o *Script) Reload(keepState bool) int64 {
	log.Println("Calling Script.Reload()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(keepState)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "reload", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the script source code. Does not reload the class implementation.
*/
func (o *Script) SetSourceCode(source string) {
	log.Println("Calling Script.SetSourceCode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(source)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_source_code", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ScriptImplementer is an interface for Script objects.
*/
type ScriptImplementer interface {
	class.Class
}
