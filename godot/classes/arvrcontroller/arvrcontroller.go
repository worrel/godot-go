//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package arvrcontroller

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/spatial"
)

/*
   This is a helper spatial node that is linked to the tracking of controllers. It also offers several handy pass throughs to the state of buttons and such on the controllers. Controllers are linked by their id. You can create controller nodes before the controllers are available. Say your game always uses two controllers (one for each hand) you can predefine the controllers with id 1 and 2 and they will become active as soon as the controllers are identified. If you expect additional controllers to be used you should react to the signals and add ARVRController nodes to your scene. The position of the controller node is automatically updated by the ARVR Server. This makes this node ideal to add child nodes to visualise the controller.
*/
type ARVRController struct {
	spatial.Spatial
}

func (o *ARVRController) baseClass() string {
	return "ARVRController"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ARVRController) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *ARVRController) getOwner() *C.godot_object {
	return o.owner
}

/*
   Returns the controller id currently assigned to this node.
*/
func (o *ARVRController) GetControllerId() int64 {
	log.Println("Calling ARVRController.GetControllerId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_controller_id", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   If active, returns the name of the associated controller if provided by the AR/VR SDK used.
*/
func (o *ARVRController) GetControllerName() string {
	log.Println("Calling ARVRController.GetControllerName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_controller_name", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ARVRController) GetHand() int64 {
	log.Println("Calling ARVRController.GetHand()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_hand", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if the controller bound to this node is currently active and being tracked.
*/
func (o *ARVRController) GetIsActive() bool {
	log.Println("Calling ARVRController.GetIsActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_is_active", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the value of the given axis for things like triggers, touchpads, etc. that are embedded into the controller.
*/
func (o *ARVRController) GetJoystickAxis(axis int64) float64 {
	log.Println("Calling ARVRController.GetJoystickAxis()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(axis)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_joystick_axis", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the ID of the joystick object bound to this. Every controller tracked by the ARVR Server that has buttons and axis will also be registered as a joystick within Godot. This means that all the normal joystick tracking and input mapping will work for buttons and axis found on the AR/VR controllers. This ID is purely offered as information so you can link up the controller with its joystick entry.
*/
func (o *ARVRController) GetJoystickId() int64 {
	log.Println("Calling ARVRController.GetJoystickId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_joystick_id", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Is the given button currently pressed?
*/
func (o *ARVRController) IsButtonPressed(button int64) int64 {
	log.Println("Calling ARVRController.IsButtonPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(button)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_button_pressed", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Changes the id that identifies the controller bound to this node. The first controller that the ARVR Server detects will have id 1, the second id 2, the third id 3, etc. When a controller is turned off that slot is freed ensuring that controllers will keep the same id while it is turned on even when controllers with lower ids are turned off.
*/
func (o *ARVRController) SetControllerId(controllerId int64) {
	log.Println("Calling ARVRController.SetControllerId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(controllerId)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_controller_id", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ARVRControllerImplementer is an interface for ARVRController objects.
*/
type ARVRControllerImplementer interface {
	class.Class
}
