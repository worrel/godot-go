//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package audiostreamoggvorbis

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/audiostream"
)

/*
   OGG Vorbis audio stream driver.
*/
type AudioStreamOGGVorbis struct {
	audiostream.AudioStream
}

func (o *AudioStreamOGGVorbis) baseClass() string {
	return "AudioStreamOGGVorbis"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *AudioStreamOGGVorbis) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *AudioStreamOGGVorbis) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *AudioStreamOGGVorbis) GetData() *PoolByteArray {
	log.Println("Calling AudioStreamOGGVorbis.GetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_data", goArguments, "*PoolByteArray")

	returnValue := goRet.Interface().(*PoolByteArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioStreamOGGVorbis) GetLoopOffset() float64 {
	log.Println("Calling AudioStreamOGGVorbis.GetLoopOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_loop_offset", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioStreamOGGVorbis) HasLoop() bool {
	log.Println("Calling AudioStreamOGGVorbis.HasLoop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_loop", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AudioStreamOGGVorbis) SetData(data *PoolByteArray) {
	log.Println("Calling AudioStreamOGGVorbis.SetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioStreamOGGVorbis) SetLoop(enable bool) {
	log.Println("Calling AudioStreamOGGVorbis.SetLoop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_loop", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AudioStreamOGGVorbis) SetLoopOffset(seconds float64) {
	log.Println("Calling AudioStreamOGGVorbis.SetLoopOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(seconds)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_loop_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   AudioStreamOGGVorbisImplementer is an interface for AudioStreamOGGVorbis objects.
*/
type AudioStreamOGGVorbisImplementer interface {
	class.Class
}
