//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package collisionshape2d

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node2d"
)

/*
   Editor facility for creating and editing collision shapes in 2D space. You can use this node to represent all sorts of collision shapes, for example, add this to an [Area2D] to give it a detection shape, or add it to a [PhysicsBody2D] to give create solid object. [b]IMPORTANT[/b]: this is an Editor-only helper to create shapes, use [method get_shape] to get the actual shape.
*/
type CollisionShape2D struct {
	node2d.Node2D
}

func (o *CollisionShape2D) baseClass() string {
	return "CollisionShape2D"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *CollisionShape2D) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *CollisionShape2D) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *CollisionShape2D) X_ShapeChanged() {
	log.Println("Calling CollisionShape2D.X_ShapeChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_shape_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *CollisionShape2D) GetShape() *Shape2D {
	log.Println("Calling CollisionShape2D.GetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shape", goArguments, "*Shape2D")

	returnValue := goRet.Interface().(*Shape2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *CollisionShape2D) IsDisabled() bool {
	log.Println("Calling CollisionShape2D.IsDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_disabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *CollisionShape2D) IsOneWayCollisionEnabled() bool {
	log.Println("Calling CollisionShape2D.IsOneWayCollisionEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_one_way_collision_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *CollisionShape2D) SetDisabled(disabled bool) {
	log.Println("Calling CollisionShape2D.SetDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(disabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_disabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *CollisionShape2D) SetOneWayCollision(enabled bool) {
	log.Println("Calling CollisionShape2D.SetOneWayCollision()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_one_way_collision", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *CollisionShape2D) SetShape(shape *Shape2D) {
	log.Println("Calling CollisionShape2D.SetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shape)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   CollisionShape2DImplementer is an interface for CollisionShape2D objects.
*/
type CollisionShape2DImplementer interface {
	class.Class
}
