//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package visualscriptconstructor

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/visualscriptnode"
)

/*
   A Visual Script node which calls a base type constructor. It can be used for type conversion as well.
*/
type VisualScriptConstructor struct {
	visualscriptnode.VisualScriptNode
}

func (o *VisualScriptConstructor) baseClass() string {
	return "VisualScriptConstructor"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *VisualScriptConstructor) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *VisualScriptConstructor) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *VisualScriptConstructor) GetConstructor() *Dictionary {
	log.Println("Calling VisualScriptConstructor.GetConstructor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_constructor", goArguments, "*Dictionary")

	returnValue := goRet.Interface().(*Dictionary)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualScriptConstructor) GetConstructorType() int64 {
	log.Println("Calling VisualScriptConstructor.GetConstructorType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_constructor_type", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualScriptConstructor) SetConstructor(constructor *Dictionary) {
	log.Println("Calling VisualScriptConstructor.SetConstructor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(constructor)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_constructor", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *VisualScriptConstructor) SetConstructorType(aType int64) {
	log.Println("Calling VisualScriptConstructor.SetConstructorType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_constructor_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   VisualScriptConstructorImplementer is an interface for VisualScriptConstructor objects.
*/
type VisualScriptConstructorImplementer interface {
	class.Class
}
