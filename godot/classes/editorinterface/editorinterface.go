//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package editorinterface

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node"
)

/*

 */
type EditorInterface struct {
	node.Node
}

func (o *EditorInterface) baseClass() string {
	return "EditorInterface"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *EditorInterface) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *EditorInterface) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *EditorInterface) EditResource(resource *Resource) {
	log.Println("Calling EditorInterface.EditResource()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(resource)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "edit_resource", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorInterface) GetBaseControl() *Control {
	log.Println("Calling EditorInterface.GetBaseControl()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_base_control", goArguments, "*Control")

	returnValue := goRet.Interface().(*Control)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorInterface) GetEditedSceneRoot() *Node {
	log.Println("Calling EditorInterface.GetEditedSceneRoot()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_edited_scene_root", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorInterface) GetEditorSettings() *EditorSettings {
	log.Println("Calling EditorInterface.GetEditorSettings()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_editor_settings", goArguments, "*EditorSettings")

	returnValue := goRet.Interface().(*EditorSettings)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorInterface) GetEditorViewport() *Control {
	log.Println("Calling EditorInterface.GetEditorViewport()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_editor_viewport", goArguments, "*Control")

	returnValue := goRet.Interface().(*Control)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorInterface) GetOpenScenes() *Array {
	log.Println("Calling EditorInterface.GetOpenScenes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_open_scenes", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorInterface) GetResourceFilesystem() *EditorFileSystem {
	log.Println("Calling EditorInterface.GetResourceFilesystem()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_resource_filesystem", goArguments, "*EditorFileSystem")

	returnValue := goRet.Interface().(*EditorFileSystem)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorInterface) GetResourcePreviewer() *EditorResourcePreview {
	log.Println("Calling EditorInterface.GetResourcePreviewer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_resource_previewer", goArguments, "*EditorResourcePreview")

	returnValue := goRet.Interface().(*EditorResourcePreview)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorInterface) GetScriptEditor() *ScriptEditor {
	log.Println("Calling EditorInterface.GetScriptEditor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_script_editor", goArguments, "*ScriptEditor")

	returnValue := goRet.Interface().(*ScriptEditor)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorInterface) GetSelection() *EditorSelection {
	log.Println("Calling EditorInterface.GetSelection()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_selection", goArguments, "*EditorSelection")

	returnValue := goRet.Interface().(*EditorSelection)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorInterface) InspectObject(object *Object, forProperty string) {
	log.Println("Calling EditorInterface.InspectObject()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(object)
	goArguments[1] = reflect.ValueOf(forProperty)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "inspect_object", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorInterface) MakeMeshPreviews(arg0 *Array, arg1 int64) *Array {
	log.Println("Calling EditorInterface.MakeMeshPreviews()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(arg0)
	goArguments[1] = reflect.ValueOf(arg1)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "make_mesh_previews", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorInterface) OpenSceneFromPath(sceneFilepath string) {
	log.Println("Calling EditorInterface.OpenSceneFromPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(sceneFilepath)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "open_scene_from_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorInterface) ReloadSceneFromPath(sceneFilepath string) {
	log.Println("Calling EditorInterface.ReloadSceneFromPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(sceneFilepath)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "reload_scene_from_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorInterface) SaveScene() int64 {
	log.Println("Calling EditorInterface.SaveScene()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "save_scene", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorInterface) SaveSceneAs(path string, withPreview bool) {
	log.Println("Calling EditorInterface.SaveSceneAs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(path)
	goArguments[1] = reflect.ValueOf(withPreview)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "save_scene_as", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   EditorInterfaceImplementer is an interface for EditorInterface objects.
*/
type EditorInterfaceImplementer interface {
	class.Class
}
