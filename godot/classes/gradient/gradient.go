//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package gradient

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*
   Given a set of colors, this node will interpolate them in order, meaning, that if you have color 1, color 2 and color3, the ramp will interpolate (generate the colors between two colors) from color 1 to color 2 and from color 2 to color 3. Initially the ramp will have 2 colors (black and white), one (black) at ramp lower offset offset 0 and the other (white) at the ramp higher offset 1.
*/
type Gradient struct {
	resource.Resource
}

func (o *Gradient) baseClass() string {
	return "Gradient"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Gradient) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Gradient) getOwner() *C.godot_object {
	return o.owner
}

/*
   Adds the specified color to the end of the ramp, with the specified offset
*/
func (o *Gradient) AddPoint(offset float64, color *Color) {
	log.Println("Calling Gradient.AddPoint()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(offset)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_point", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the color of the ramp color at index [i]point[/i]
*/
func (o *Gradient) GetColor(point int64) *Color {
	log.Println("Calling Gradient.GetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(point)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the colors in the ramp
*/
func (o *Gradient) GetColors() *PoolColorArray {
	log.Println("Calling Gradient.GetColors()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_colors", goArguments, "*PoolColorArray")

	returnValue := goRet.Interface().(*PoolColorArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the offset of the ramp color at index [i]point[/i]
*/
func (o *Gradient) GetOffset(point int64) float64 {
	log.Println("Calling Gradient.GetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(point)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_offset", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the offsets for the colors in this ramp
*/
func (o *Gradient) GetOffsets() *PoolRealArray {
	log.Println("Calling Gradient.GetOffsets()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_offsets", goArguments, "*PoolRealArray")

	returnValue := goRet.Interface().(*PoolRealArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of colors in the ramp
*/
func (o *Gradient) GetPointCount() int64 {
	log.Println("Calling Gradient.GetPointCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_point_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the interpolated color specified by [i]offset[/i]
*/
func (o *Gradient) Interpolate(offset float64) *Color {
	log.Println("Calling Gradient.Interpolate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "interpolate", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Removes the color at the index [i]offset[/i]
*/
func (o *Gradient) RemovePoint(offset int64) {
	log.Println("Calling Gradient.RemovePoint()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_point", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the color of the ramp color at index [i]point[/i]
*/
func (o *Gradient) SetColor(point int64, color *Color) {
	log.Println("Calling Gradient.SetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(point)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the colors for the specified amount of elements. Calling this function with a different number of elements than previously defined causes the ramp to resize its colors and offsets array to accommodate the new elements.
*/
func (o *Gradient) SetColors(colors *PoolColorArray) {
	log.Println("Calling Gradient.SetColors()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(colors)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_colors", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the offset for the ramp color at index [i]point[/i]
*/
func (o *Gradient) SetOffset(point int64, offset float64) {
	log.Println("Calling Gradient.SetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(point)
	goArguments[1] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the offset for the specified amount of elements. Calling this function with a different number of elements than previously defined causes the ramp to resize its colors and offsets array to accommodate the new elements, all new colors will be black by default.
*/
func (o *Gradient) SetOffsets(offsets *PoolRealArray) {
	log.Println("Calling Gradient.SetOffsets()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offsets)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_offsets", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   GradientImplementer is an interface for Gradient objects.
*/
type GradientImplementer interface {
	class.Class
}
