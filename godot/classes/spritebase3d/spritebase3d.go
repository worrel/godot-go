//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package spritebase3d

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/geometryinstance"
)

/*
   A node that displays 2D texture information in a 3D environment.
*/
type SpriteBase3D struct {
	geometryinstance.GeometryInstance
}

func (o *SpriteBase3D) baseClass() string {
	return "SpriteBase3D"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *SpriteBase3D) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *SpriteBase3D) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *SpriteBase3D) X_ImUpdate() {
	log.Println("Calling SpriteBase3D.X_ImUpdate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_im_update", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SpriteBase3D) X_QueueUpdate() {
	log.Println("Calling SpriteBase3D.X_QueueUpdate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_queue_update", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpriteBase3D) GetAlphaCutMode() int64 {
	log.Println("Calling SpriteBase3D.GetAlphaCutMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_alpha_cut_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpriteBase3D) GetAxis() int64 {
	log.Println("Calling SpriteBase3D.GetAxis()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_axis", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpriteBase3D) GetDrawFlag(flag int64) bool {
	log.Println("Calling SpriteBase3D.GetDrawFlag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flag)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_draw_flag", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpriteBase3D) GetItemRect() *Rect2 {
	log.Println("Calling SpriteBase3D.GetItemRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_item_rect", goArguments, "*Rect2")

	returnValue := goRet.Interface().(*Rect2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpriteBase3D) GetModulate() *Color {
	log.Println("Calling SpriteBase3D.GetModulate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_modulate", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpriteBase3D) GetOffset() *Vector2 {
	log.Println("Calling SpriteBase3D.GetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpriteBase3D) GetOpacity() float64 {
	log.Println("Calling SpriteBase3D.GetOpacity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_opacity", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpriteBase3D) GetPixelSize() float64 {
	log.Println("Calling SpriteBase3D.GetPixelSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_pixel_size", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpriteBase3D) IsCentered() bool {
	log.Println("Calling SpriteBase3D.IsCentered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_centered", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpriteBase3D) IsFlippedH() bool {
	log.Println("Calling SpriteBase3D.IsFlippedH()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_flipped_h", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpriteBase3D) IsFlippedV() bool {
	log.Println("Calling SpriteBase3D.IsFlippedV()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_flipped_v", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpriteBase3D) SetAlphaCutMode(mode int64) {
	log.Println("Calling SpriteBase3D.SetAlphaCutMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_alpha_cut_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpriteBase3D) SetAxis(axis int64) {
	log.Println("Calling SpriteBase3D.SetAxis()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(axis)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_axis", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpriteBase3D) SetCentered(centered bool) {
	log.Println("Calling SpriteBase3D.SetCentered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(centered)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_centered", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpriteBase3D) SetDrawFlag(flag int64, enabled bool) {
	log.Println("Calling SpriteBase3D.SetDrawFlag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(flag)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_draw_flag", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpriteBase3D) SetFlipH(flipH bool) {
	log.Println("Calling SpriteBase3D.SetFlipH()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flipH)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_flip_h", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpriteBase3D) SetFlipV(flipV bool) {
	log.Println("Calling SpriteBase3D.SetFlipV()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flipV)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_flip_v", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpriteBase3D) SetModulate(modulate *Color) {
	log.Println("Calling SpriteBase3D.SetModulate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(modulate)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_modulate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpriteBase3D) SetOffset(offset *Vector2) {
	log.Println("Calling SpriteBase3D.SetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpriteBase3D) SetOpacity(opacity float64) {
	log.Println("Calling SpriteBase3D.SetOpacity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(opacity)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_opacity", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpriteBase3D) SetPixelSize(pixelSize float64) {
	log.Println("Calling SpriteBase3D.SetPixelSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pixelSize)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_pixel_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SpriteBase3DImplementer is an interface for SpriteBase3D objects.
*/
type SpriteBase3DImplementer interface {
	class.Class
}
