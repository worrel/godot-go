//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package inputeventkey

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/inputeventwithmodifiers"
)

/*

 */
type InputEventKey struct {
	inputeventwithmodifiers.InputEventWithModifiers
}

func (o *InputEventKey) baseClass() string {
	return "InputEventKey"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *InputEventKey) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *InputEventKey) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *InputEventKey) GetScancode() int64 {
	log.Println("Calling InputEventKey.GetScancode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_scancode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InputEventKey) GetScancodeWithModifiers() int64 {
	log.Println("Calling InputEventKey.GetScancodeWithModifiers()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_scancode_with_modifiers", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InputEventKey) GetUnicode() int64 {
	log.Println("Calling InputEventKey.GetUnicode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_unicode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InputEventKey) SetEcho(echo bool) {
	log.Println("Calling InputEventKey.SetEcho()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(echo)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_echo", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *InputEventKey) SetPressed(pressed bool) {
	log.Println("Calling InputEventKey.SetPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pressed)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *InputEventKey) SetScancode(scancode int64) {
	log.Println("Calling InputEventKey.SetScancode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(scancode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_scancode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *InputEventKey) SetUnicode(unicode int64) {
	log.Println("Calling InputEventKey.SetUnicode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(unicode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_unicode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   InputEventKeyImplementer is an interface for InputEventKey objects.
*/
type InputEventKeyImplementer interface {
	class.Class
}
