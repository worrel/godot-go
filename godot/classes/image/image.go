//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package image

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*
   Native image datatype. Contains image data, which can be converted to a texture, and several functions to interact with it.
*/
type Image struct {
	resource.Resource
}

func (o *Image) baseClass() string {
	return "Image"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Image) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Image) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *Image) X_GetData() *Dictionary {
	log.Println("Calling Image.X_GetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_data", goArguments, "*Dictionary")

	returnValue := goRet.Interface().(*Dictionary)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Image) X_SetData(data *Dictionary) {
	log.Println("Calling Image.X_SetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Alpha-blends a "src_rect" [Rect2] from "src" [Image] to this [Image] on coordinates "dest".
*/
func (o *Image) BlendRect(src *Image, srcRect *Rect2, dst *Vector2) {
	log.Println("Calling Image.BlendRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(src)
	goArguments[1] = reflect.ValueOf(srcRect)
	goArguments[2] = reflect.ValueOf(dst)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "blend_rect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Alpha-blends a "src_rect" [Rect2] from "src" [Image] to this [Image] using a "mask" [Image] on coordinates "dest". Alpha channels are required for both "src" and "mask", dest pixels and src pixels will blend if the corresponding mask pixel's alpha value is not 0. "src" [Image] and "mask" [Image] *must* have the same size (width and height) but they can have different formats
*/
func (o *Image) BlendRectMask(src *Image, mask *Image, srcRect *Rect2, dst *Vector2) {
	log.Println("Calling Image.BlendRectMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(src)
	goArguments[1] = reflect.ValueOf(mask)
	goArguments[2] = reflect.ValueOf(srcRect)
	goArguments[3] = reflect.ValueOf(dst)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "blend_rect_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Copy a "src_rect" [Rect2] from "src" [Image] to this [Image] on coordinates "dest".
*/
func (o *Image) BlitRect(src *Image, srcRect *Rect2, dst *Vector2) {
	log.Println("Calling Image.BlitRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(src)
	goArguments[1] = reflect.ValueOf(srcRect)
	goArguments[2] = reflect.ValueOf(dst)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "blit_rect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Blits a "src_rect" [Rect2] from "src" [Image] to this [Image] using a "mask" [Image] on coordinates "dest". Alpha channel is required for "mask", will copy src pixel onto dest if the corresponding mask pixel's alpha value is not 0. "src" [Image] and "mask" [Image] *must* have the same size (width and height) but they can have different formats
*/
func (o *Image) BlitRectMask(src *Image, mask *Image, srcRect *Rect2, dst *Vector2) {
	log.Println("Calling Image.BlitRectMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(src)
	goArguments[1] = reflect.ValueOf(mask)
	goArguments[2] = reflect.ValueOf(srcRect)
	goArguments[3] = reflect.ValueOf(dst)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "blit_rect_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) ClearMipmaps() {
	log.Println("Calling Image.ClearMipmaps()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_mipmaps", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) Compress(mode int64, source int64, lossyQuality float64) int64 {
	log.Println("Calling Image.Compress()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(mode)
	goArguments[1] = reflect.ValueOf(source)
	goArguments[2] = reflect.ValueOf(lossyQuality)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "compress", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Image) Convert(format int64) {
	log.Println("Calling Image.Convert()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(format)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "convert", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) CopyFrom(src *Image) {
	log.Println("Calling Image.CopyFrom()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(src)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "copy_from", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Create an empty image of a specific size and format.
*/
func (o *Image) Create(width int64, height int64, useMipmaps bool, format int64) {
	log.Println("Calling Image.Create()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(width)
	goArguments[1] = reflect.ValueOf(height)
	goArguments[2] = reflect.ValueOf(useMipmaps)
	goArguments[3] = reflect.ValueOf(format)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "create", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) CreateFromData(width int64, height int64, useMipmaps bool, format int64, data *PoolByteArray) {
	log.Println("Calling Image.CreateFromData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(width)
	goArguments[1] = reflect.ValueOf(height)
	goArguments[2] = reflect.ValueOf(useMipmaps)
	goArguments[3] = reflect.ValueOf(format)
	goArguments[4] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "create_from_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) Crop(width int64, height int64) {
	log.Println("Calling Image.Crop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(width)
	goArguments[1] = reflect.ValueOf(height)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "crop", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) Decompress() int64 {
	log.Println("Calling Image.Decompress()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "decompress", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Image) DetectAlpha() int64 {
	log.Println("Calling Image.DetectAlpha()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "detect_alpha", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Image) ExpandX2Hq2X() {
	log.Println("Calling Image.ExpandX2Hq2X()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "expand_x2_hq2x", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Fills an [Image] with a specified [Color]
*/
func (o *Image) Fill(color *Color) {
	log.Println("Calling Image.Fill()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "fill", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) FixAlphaEdges() {
	log.Println("Calling Image.FixAlphaEdges()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "fix_alpha_edges", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) FlipX() {
	log.Println("Calling Image.FlipX()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "flip_x", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) FlipY() {
	log.Println("Calling Image.FlipY()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "flip_y", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) GenerateMipmaps() int64 {
	log.Println("Calling Image.GenerateMipmaps()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "generate_mipmaps", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the raw data of the [Image].
*/
func (o *Image) GetData() *PoolByteArray {
	log.Println("Calling Image.GetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_data", goArguments, "*PoolByteArray")

	returnValue := goRet.Interface().(*PoolByteArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the format of the [Image], one of [Image].FORMAT_*.
*/
func (o *Image) GetFormat() int64 {
	log.Println("Calling Image.GetFormat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_format", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the height of the [Image].
*/
func (o *Image) GetHeight() int64 {
	log.Println("Calling Image.GetHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_height", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Image) GetMipmapOffset(mipmap int64) int64 {
	log.Println("Calling Image.GetMipmapOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mipmap)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_mipmap_offset", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Image) GetPixel(x int64, y int64) *Color {
	log.Println("Calling Image.GetPixel()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(x)
	goArguments[1] = reflect.ValueOf(y)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_pixel", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return a new [Image] that is a copy of "area" in this [Image].
*/
func (o *Image) GetRect(rect *Rect2) *Image {
	log.Println("Calling Image.GetRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rect)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_rect", goArguments, "*Image")

	returnValue := goRet.Interface().(*Image)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Image) GetSize() *Vector2 {
	log.Println("Calling Image.GetSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_size", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the area of this [Image] that is used/visibly colored/opaque.
*/
func (o *Image) GetUsedRect() *Rect2 {
	log.Println("Calling Image.GetUsedRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_used_rect", goArguments, "*Rect2")

	returnValue := goRet.Interface().(*Rect2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the width of the [Image].
*/
func (o *Image) GetWidth() int64 {
	log.Println("Calling Image.GetWidth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_width", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Image) HasMipmaps() bool {
	log.Println("Calling Image.HasMipmaps()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_mipmaps", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Image) IsCompressed() bool {
	log.Println("Calling Image.IsCompressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_compressed", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Image) IsEmpty() bool {
	log.Println("Calling Image.IsEmpty()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_empty", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Image) IsInvisible() bool {
	log.Println("Calling Image.IsInvisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_invisible", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Load an [Image].
*/
func (o *Image) Load(path string) int64 {
	log.Println("Calling Image.Load()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "load", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Image) Lock() {
	log.Println("Calling Image.Lock()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "lock", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) NormalmapToXy() {
	log.Println("Calling Image.NormalmapToXy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "normalmap_to_xy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) PremultiplyAlpha() {
	log.Println("Calling Image.PremultiplyAlpha()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "premultiply_alpha", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) Resize(width int64, height int64, interpolation int64) {
	log.Println("Calling Image.Resize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(width)
	goArguments[1] = reflect.ValueOf(height)
	goArguments[2] = reflect.ValueOf(interpolation)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "resize", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) ResizeToPo2(square bool) {
	log.Println("Calling Image.ResizeToPo2()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(square)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "resize_to_po2", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Save this [Image] as a png.
*/
func (o *Image) SavePng(path string) int64 {
	log.Println("Calling Image.SavePng()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "save_png", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Image) SetPixel(x int64, y int64, color *Color) {
	log.Println("Calling Image.SetPixel()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(x)
	goArguments[1] = reflect.ValueOf(y)
	goArguments[2] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_pixel", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) ShrinkX2() {
	log.Println("Calling Image.ShrinkX2()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "shrink_x2", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) SrgbToLinear() {
	log.Println("Calling Image.SrgbToLinear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "srgb_to_linear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Image) Unlock() {
	log.Println("Calling Image.Unlock()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "unlock", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ImageImplementer is an interface for Image objects.
*/
type ImageImplementer interface {
	class.Class
}
