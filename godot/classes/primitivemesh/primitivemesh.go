//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package primitivemesh

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/mesh"
)

/*
   Base class for all primitive meshes. Handles applying a [Material] to a primitive mesh.
*/
type PrimitiveMesh struct {
	mesh.Mesh
}

func (o *PrimitiveMesh) baseClass() string {
	return "PrimitiveMesh"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *PrimitiveMesh) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *PrimitiveMesh) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *PrimitiveMesh) X_Update() {
	log.Println("Calling PrimitiveMesh.X_Update()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_update", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *PrimitiveMesh) GetMaterial() *Material {
	log.Println("Calling PrimitiveMesh.GetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_material", goArguments, "*Material")

	returnValue := goRet.Interface().(*Material)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PrimitiveMesh) GetMeshArrays() *Array {
	log.Println("Calling PrimitiveMesh.GetMeshArrays()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_mesh_arrays", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PrimitiveMesh) SetMaterial(material *Material) {
	log.Println("Calling PrimitiveMesh.SetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(material)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_material", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   PrimitiveMeshImplementer is an interface for PrimitiveMesh objects.
*/
type PrimitiveMeshImplementer interface {
	class.Class
}
