//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package touchscreenbutton

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node2d"
)

/*
   Button for touch screen devices. You can set it to be visible on all screens, or only on touch devices.
*/
type TouchScreenButton struct {
	node2d.Node2D
}

func (o *TouchScreenButton) baseClass() string {
	return "TouchScreenButton"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *TouchScreenButton) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *TouchScreenButton) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *TouchScreenButton) X_Input(arg0 *InputEvent) {
	log.Println("Calling TouchScreenButton.X_Input()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the button's action.
*/
func (o *TouchScreenButton) GetAction() string {
	log.Println("Calling TouchScreenButton.GetAction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_action", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the button's bitmask.
*/
func (o *TouchScreenButton) GetBitmask() *BitMap {
	log.Println("Calling TouchScreenButton.GetBitmask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bitmask", goArguments, "*BitMap")

	returnValue := goRet.Interface().(*BitMap)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the button's shape.
*/
func (o *TouchScreenButton) GetShape() *Shape2D {
	log.Println("Calling TouchScreenButton.GetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shape", goArguments, "*Shape2D")

	returnValue := goRet.Interface().(*Shape2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the button's texture for the normal state.
*/
func (o *TouchScreenButton) GetTexture() *Texture {
	log.Println("Calling TouchScreenButton.GetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_texture", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the button's texture for the pressed state.
*/
func (o *TouchScreenButton) GetTexturePressed() *Texture {
	log.Println("Calling TouchScreenButton.GetTexturePressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_texture_pressed", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the button's visibility mode. See [code]VISIBILITY_*[/code] constants.
*/
func (o *TouchScreenButton) GetVisibilityMode() int64 {
	log.Println("Calling TouchScreenButton.GetVisibilityMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_visibility_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TouchScreenButton) IsPassbyPressEnabled() bool {
	log.Println("Calling TouchScreenButton.IsPassbyPressEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_passby_press_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if this button is currently pressed.
*/
func (o *TouchScreenButton) IsPressed() bool {
	log.Println("Calling TouchScreenButton.IsPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_pressed", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TouchScreenButton) IsShapeCentered() bool {
	log.Println("Calling TouchScreenButton.IsShapeCentered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_shape_centered", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TouchScreenButton) IsShapeVisible() bool {
	log.Println("Calling TouchScreenButton.IsShapeVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_shape_visible", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the button's action.
*/
func (o *TouchScreenButton) SetAction(action string) {
	log.Println("Calling TouchScreenButton.SetAction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(action)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_action", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the button's [BitMap] bitmask.
*/
func (o *TouchScreenButton) SetBitmask(bitmask *BitMap) {
	log.Println("Calling TouchScreenButton.SetBitmask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bitmask)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bitmask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] passby presses are enabled for this button.
*/
func (o *TouchScreenButton) SetPassbyPress(enabled bool) {
	log.Println("Calling TouchScreenButton.SetPassbyPress()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_passby_press", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the button's shape.
*/
func (o *TouchScreenButton) SetShape(shape *Shape2D) {
	log.Println("Calling TouchScreenButton.SetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shape)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] the button's shape is centered.
*/
func (o *TouchScreenButton) SetShapeCentered(bool bool) {
	log.Println("Calling TouchScreenButton.SetShapeCentered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bool)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shape_centered", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] the button's shape is visible.
*/
func (o *TouchScreenButton) SetShapeVisible(bool bool) {
	log.Println("Calling TouchScreenButton.SetShapeVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bool)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shape_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the button's [Texture] for the normal state.
*/
func (o *TouchScreenButton) SetTexture(texture *Texture) {
	log.Println("Calling TouchScreenButton.SetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_texture", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the button's [Texture] for the pressed state.
*/
func (o *TouchScreenButton) SetTexturePressed(texturePressed *Texture) {
	log.Println("Calling TouchScreenButton.SetTexturePressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texturePressed)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_texture_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the button's visibility mode. See the [code]VISIBILITY_*[/code] constants.
*/
func (o *TouchScreenButton) SetVisibilityMode(mode int64) {
	log.Println("Calling TouchScreenButton.SetVisibilityMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_visibility_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   TouchScreenButtonImplementer is an interface for TouchScreenButton objects.
*/
type TouchScreenButtonImplementer interface {
	class.Class
}
