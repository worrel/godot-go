//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package ip

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/object"
)

func newSingletonIP() *ip {
	obj := &ip{}
	ptr := C.godot_global_get_singleton(C.CString("IP"))
	obj.owner = (*C.godot_object)(ptr)
	return obj
}

/*
   IP contains support functions for the IPv4 protocol. TCP/IP support is in different classes (see [StreamPeerTCP] and [TCP_Server]). IP provides hostname resolution support, both blocking and threaded.
*/
var IP = newSingletonIP()

/*
   IP contains support functions for the IPv4 protocol. TCP/IP support is in different classes (see [StreamPeerTCP] and [TCP_Server]). IP provides hostname resolution support, both blocking and threaded.
*/
type ip struct {
	object.Object
}

func (o *ip) baseClass() string {
	return "IP"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ip) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *ip) getOwner() *C.godot_object {
	return o.owner
}

/*
   Removes all of a "hostname"'s cached references. If no "hostname" is given then all cached IP addresses are removed.
*/
func (o *ip) ClearCache(hostname string) {
	log.Println("Calling IP.ClearCache()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(hostname)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_cache", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes a given item "id" from the queue. This should be used to free a queue after it has completed to enable more queries to happen.
*/
func (o *ip) EraseResolveItem(id int64) {
	log.Println("Calling IP.EraseResolveItem()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "erase_resolve_item", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns all of the user's current IPv4 and IPv6 addresses as an array.
*/
func (o *ip) GetLocalAddresses() *Array {
	log.Println("Calling IP.GetLocalAddresses()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_local_addresses", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a queued hostname's IP address, given its queue "id". Returns an empty string on error or if resolution hasn't happened yet (see [method get_resolve_item_status]).
*/
func (o *ip) GetResolveItemAddress(id int64) string {
	log.Println("Calling IP.GetResolveItemAddress()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_resolve_item_address", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a queued hostname's status as a RESOLVER_STATUS_* constant, given its queue "id".
*/
func (o *ip) GetResolveItemStatus(id int64) int64 {
	log.Println("Calling IP.GetResolveItemStatus()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_resolve_item_status", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a given hostname's IPv4 or IPv6 address when resolved (blocking-type method). The address type returned depends on the TYPE_* constant given as "ip_type".
*/
func (o *ip) ResolveHostname(host string, ipType int64) string {
	log.Println("Calling IP.ResolveHostname()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(host)
	goArguments[1] = reflect.ValueOf(ipType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "resolve_hostname", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Creates a queue item to resolve a hostname to an IPv4 or IPv6 address depending on the TYPE_* constant given as "ip_type". Returns the queue ID if successful, or RESOLVER_INVALID_ID on error.
*/
func (o *ip) ResolveHostnameQueueItem(host string, ipType int64) int64 {
	log.Println("Calling IP.ResolveHostnameQueueItem()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(host)
	goArguments[1] = reflect.ValueOf(ipType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "resolve_hostname_queue_item", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}
