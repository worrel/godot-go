//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package environment

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*
   Resource for environment nodes (like [WorldEnvironment]) that define multiple environment operations (such as background [Sky] or [Color], ambient light, fog, depth-of-field...).	These parameters affect the final render of the scene. The order of these operations is: - DOF Blur - Motion Blur - Bloom - Tonemap (auto exposure) - Adjustments
*/
type Environment struct {
	resource.Resource
}

func (o *Environment) baseClass() string {
	return "Environment"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Environment) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Environment) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *Environment) GetAdjustmentBrightness() float64 {
	log.Println("Calling Environment.GetAdjustmentBrightness()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_adjustment_brightness", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetAdjustmentColorCorrection() *Texture {
	log.Println("Calling Environment.GetAdjustmentColorCorrection()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_adjustment_color_correction", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetAdjustmentContrast() float64 {
	log.Println("Calling Environment.GetAdjustmentContrast()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_adjustment_contrast", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetAdjustmentSaturation() float64 {
	log.Println("Calling Environment.GetAdjustmentSaturation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_adjustment_saturation", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetAmbientLightColor() *Color {
	log.Println("Calling Environment.GetAmbientLightColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ambient_light_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetAmbientLightEnergy() float64 {
	log.Println("Calling Environment.GetAmbientLightEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ambient_light_energy", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetAmbientLightSkyContribution() float64 {
	log.Println("Calling Environment.GetAmbientLightSkyContribution()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ambient_light_sky_contribution", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetBackground() int64 {
	log.Println("Calling Environment.GetBackground()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_background", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetBgColor() *Color {
	log.Println("Calling Environment.GetBgColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bg_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetBgEnergy() float64 {
	log.Println("Calling Environment.GetBgEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bg_energy", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetCanvasMaxLayer() int64 {
	log.Println("Calling Environment.GetCanvasMaxLayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_canvas_max_layer", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetDofBlurFarAmount() float64 {
	log.Println("Calling Environment.GetDofBlurFarAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_dof_blur_far_amount", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetDofBlurFarDistance() float64 {
	log.Println("Calling Environment.GetDofBlurFarDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_dof_blur_far_distance", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetDofBlurFarQuality() int64 {
	log.Println("Calling Environment.GetDofBlurFarQuality()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_dof_blur_far_quality", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetDofBlurFarTransition() float64 {
	log.Println("Calling Environment.GetDofBlurFarTransition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_dof_blur_far_transition", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetDofBlurNearAmount() float64 {
	log.Println("Calling Environment.GetDofBlurNearAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_dof_blur_near_amount", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetDofBlurNearDistance() float64 {
	log.Println("Calling Environment.GetDofBlurNearDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_dof_blur_near_distance", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetDofBlurNearQuality() int64 {
	log.Println("Calling Environment.GetDofBlurNearQuality()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_dof_blur_near_quality", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetDofBlurNearTransition() float64 {
	log.Println("Calling Environment.GetDofBlurNearTransition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_dof_blur_near_transition", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetFogColor() *Color {
	log.Println("Calling Environment.GetFogColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fog_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetFogDepthBegin() float64 {
	log.Println("Calling Environment.GetFogDepthBegin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fog_depth_begin", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetFogDepthCurve() float64 {
	log.Println("Calling Environment.GetFogDepthCurve()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fog_depth_curve", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetFogHeightCurve() float64 {
	log.Println("Calling Environment.GetFogHeightCurve()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fog_height_curve", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetFogHeightMax() float64 {
	log.Println("Calling Environment.GetFogHeightMax()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fog_height_max", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetFogHeightMin() float64 {
	log.Println("Calling Environment.GetFogHeightMin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fog_height_min", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetFogSunAmount() float64 {
	log.Println("Calling Environment.GetFogSunAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fog_sun_amount", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetFogSunColor() *Color {
	log.Println("Calling Environment.GetFogSunColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fog_sun_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetFogTransmitCurve() float64 {
	log.Println("Calling Environment.GetFogTransmitCurve()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fog_transmit_curve", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetGlowBlendMode() int64 {
	log.Println("Calling Environment.GetGlowBlendMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_glow_blend_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetGlowBloom() float64 {
	log.Println("Calling Environment.GetGlowBloom()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_glow_bloom", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetGlowHdrBleedScale() float64 {
	log.Println("Calling Environment.GetGlowHdrBleedScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_glow_hdr_bleed_scale", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetGlowHdrBleedThreshold() float64 {
	log.Println("Calling Environment.GetGlowHdrBleedThreshold()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_glow_hdr_bleed_threshold", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetGlowIntensity() float64 {
	log.Println("Calling Environment.GetGlowIntensity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_glow_intensity", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetGlowStrength() float64 {
	log.Println("Calling Environment.GetGlowStrength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_glow_strength", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetSky() *Sky {
	log.Println("Calling Environment.GetSky()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_sky", goArguments, "*Sky")

	returnValue := goRet.Interface().(*Sky)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Environment) GetSkyScale() float64 {
	log.Println("Calling Environment.GetSkyScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_sky_scale", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetSsaoBias() float64 {
	log.Println("Calling Environment.GetSsaoBias()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ssao_bias", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetSsaoColor() *Color {
	log.Println("Calling Environment.GetSsaoColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ssao_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetSsaoDirectLightAffect() float64 {
	log.Println("Calling Environment.GetSsaoDirectLightAffect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ssao_direct_light_affect", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetSsaoIntensity() float64 {
	log.Println("Calling Environment.GetSsaoIntensity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ssao_intensity", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetSsaoIntensity2() float64 {
	log.Println("Calling Environment.GetSsaoIntensity2()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ssao_intensity2", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetSsaoRadius() float64 {
	log.Println("Calling Environment.GetSsaoRadius()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ssao_radius", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetSsaoRadius2() float64 {
	log.Println("Calling Environment.GetSsaoRadius2()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ssao_radius2", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetSsrDepthTolerance() float64 {
	log.Println("Calling Environment.GetSsrDepthTolerance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ssr_depth_tolerance", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetSsrFadeIn() float64 {
	log.Println("Calling Environment.GetSsrFadeIn()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ssr_fade_in", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetSsrFadeOut() float64 {
	log.Println("Calling Environment.GetSsrFadeOut()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ssr_fade_out", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetSsrMaxSteps() int64 {
	log.Println("Calling Environment.GetSsrMaxSteps()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ssr_max_steps", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetTonemapAutoExposure() bool {
	log.Println("Calling Environment.GetTonemapAutoExposure()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tonemap_auto_exposure", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetTonemapAutoExposureGrey() float64 {
	log.Println("Calling Environment.GetTonemapAutoExposureGrey()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tonemap_auto_exposure_grey", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetTonemapAutoExposureMax() float64 {
	log.Println("Calling Environment.GetTonemapAutoExposureMax()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tonemap_auto_exposure_max", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetTonemapAutoExposureMin() float64 {
	log.Println("Calling Environment.GetTonemapAutoExposureMin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tonemap_auto_exposure_min", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetTonemapAutoExposureSpeed() float64 {
	log.Println("Calling Environment.GetTonemapAutoExposureSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tonemap_auto_exposure_speed", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetTonemapExposure() float64 {
	log.Println("Calling Environment.GetTonemapExposure()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tonemap_exposure", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetTonemapWhite() float64 {
	log.Println("Calling Environment.GetTonemapWhite()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tonemap_white", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) GetTonemapper() int64 {
	log.Println("Calling Environment.GetTonemapper()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tonemapper", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) IsAdjustmentEnabled() bool {
	log.Println("Calling Environment.IsAdjustmentEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_adjustment_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) IsDofBlurFarEnabled() bool {
	log.Println("Calling Environment.IsDofBlurFarEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_dof_blur_far_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) IsDofBlurNearEnabled() bool {
	log.Println("Calling Environment.IsDofBlurNearEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_dof_blur_near_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) IsFogDepthEnabled() bool {
	log.Println("Calling Environment.IsFogDepthEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_fog_depth_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) IsFogEnabled() bool {
	log.Println("Calling Environment.IsFogEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_fog_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) IsFogHeightEnabled() bool {
	log.Println("Calling Environment.IsFogHeightEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_fog_height_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) IsFogTransmitEnabled() bool {
	log.Println("Calling Environment.IsFogTransmitEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_fog_transmit_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) IsGlowBicubicUpscaleEnabled() bool {
	log.Println("Calling Environment.IsGlowBicubicUpscaleEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_glow_bicubic_upscale_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) IsGlowEnabled() bool {
	log.Println("Calling Environment.IsGlowEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_glow_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) IsGlowLevelEnabled(idx int64) bool {
	log.Println("Calling Environment.IsGlowLevelEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_glow_level_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) IsSsaoBlurEnabled() bool {
	log.Println("Calling Environment.IsSsaoBlurEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_ssao_blur_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) IsSsaoEnabled() bool {
	log.Println("Calling Environment.IsSsaoEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_ssao_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) IsSsrEnabled() bool {
	log.Println("Calling Environment.IsSsrEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_ssr_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) IsSsrRough() bool {
	log.Println("Calling Environment.IsSsrRough()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_ssr_rough", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Environment) SetAdjustmentBrightness(brightness float64) {
	log.Println("Calling Environment.SetAdjustmentBrightness()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(brightness)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_adjustment_brightness", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetAdjustmentColorCorrection(colorCorrection *Texture) {
	log.Println("Calling Environment.SetAdjustmentColorCorrection()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(colorCorrection)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_adjustment_color_correction", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetAdjustmentContrast(contrast float64) {
	log.Println("Calling Environment.SetAdjustmentContrast()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(contrast)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_adjustment_contrast", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetAdjustmentEnable(enabled bool) {
	log.Println("Calling Environment.SetAdjustmentEnable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_adjustment_enable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetAdjustmentSaturation(saturation float64) {
	log.Println("Calling Environment.SetAdjustmentSaturation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(saturation)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_adjustment_saturation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetAmbientLightColor(color *Color) {
	log.Println("Calling Environment.SetAmbientLightColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ambient_light_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetAmbientLightEnergy(energy float64) {
	log.Println("Calling Environment.SetAmbientLightEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(energy)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ambient_light_energy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetAmbientLightSkyContribution(energy float64) {
	log.Println("Calling Environment.SetAmbientLightSkyContribution()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(energy)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ambient_light_sky_contribution", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetBackground(mode int64) {
	log.Println("Calling Environment.SetBackground()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_background", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetBgColor(color *Color) {
	log.Println("Calling Environment.SetBgColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bg_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetBgEnergy(energy float64) {
	log.Println("Calling Environment.SetBgEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(energy)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bg_energy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetCanvasMaxLayer(layer int64) {
	log.Println("Calling Environment.SetCanvasMaxLayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(layer)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_canvas_max_layer", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetDofBlurFarAmount(intensity float64) {
	log.Println("Calling Environment.SetDofBlurFarAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(intensity)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dof_blur_far_amount", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetDofBlurFarDistance(intensity float64) {
	log.Println("Calling Environment.SetDofBlurFarDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(intensity)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dof_blur_far_distance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetDofBlurFarEnabled(enabled bool) {
	log.Println("Calling Environment.SetDofBlurFarEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dof_blur_far_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetDofBlurFarQuality(intensity int64) {
	log.Println("Calling Environment.SetDofBlurFarQuality()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(intensity)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dof_blur_far_quality", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetDofBlurFarTransition(intensity float64) {
	log.Println("Calling Environment.SetDofBlurFarTransition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(intensity)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dof_blur_far_transition", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetDofBlurNearAmount(intensity float64) {
	log.Println("Calling Environment.SetDofBlurNearAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(intensity)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dof_blur_near_amount", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetDofBlurNearDistance(intensity float64) {
	log.Println("Calling Environment.SetDofBlurNearDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(intensity)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dof_blur_near_distance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetDofBlurNearEnabled(enabled bool) {
	log.Println("Calling Environment.SetDofBlurNearEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dof_blur_near_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetDofBlurNearQuality(level int64) {
	log.Println("Calling Environment.SetDofBlurNearQuality()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(level)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dof_blur_near_quality", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetDofBlurNearTransition(intensity float64) {
	log.Println("Calling Environment.SetDofBlurNearTransition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(intensity)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dof_blur_near_transition", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetFogColor(color *Color) {
	log.Println("Calling Environment.SetFogColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fog_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetFogDepthBegin(distance float64) {
	log.Println("Calling Environment.SetFogDepthBegin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(distance)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fog_depth_begin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetFogDepthCurve(curve float64) {
	log.Println("Calling Environment.SetFogDepthCurve()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(curve)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fog_depth_curve", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetFogDepthEnabled(enabled bool) {
	log.Println("Calling Environment.SetFogDepthEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fog_depth_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetFogEnabled(enabled bool) {
	log.Println("Calling Environment.SetFogEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fog_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetFogHeightCurve(curve float64) {
	log.Println("Calling Environment.SetFogHeightCurve()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(curve)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fog_height_curve", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetFogHeightEnabled(enabled bool) {
	log.Println("Calling Environment.SetFogHeightEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fog_height_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetFogHeightMax(height float64) {
	log.Println("Calling Environment.SetFogHeightMax()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(height)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fog_height_max", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetFogHeightMin(height float64) {
	log.Println("Calling Environment.SetFogHeightMin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(height)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fog_height_min", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetFogSunAmount(amount float64) {
	log.Println("Calling Environment.SetFogSunAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fog_sun_amount", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetFogSunColor(color *Color) {
	log.Println("Calling Environment.SetFogSunColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fog_sun_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetFogTransmitCurve(curve float64) {
	log.Println("Calling Environment.SetFogTransmitCurve()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(curve)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fog_transmit_curve", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetFogTransmitEnabled(enabled bool) {
	log.Println("Calling Environment.SetFogTransmitEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fog_transmit_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetGlowBicubicUpscale(enabled bool) {
	log.Println("Calling Environment.SetGlowBicubicUpscale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_glow_bicubic_upscale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetGlowBlendMode(mode int64) {
	log.Println("Calling Environment.SetGlowBlendMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_glow_blend_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetGlowBloom(amount float64) {
	log.Println("Calling Environment.SetGlowBloom()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_glow_bloom", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetGlowEnabled(enabled bool) {
	log.Println("Calling Environment.SetGlowEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_glow_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetGlowHdrBleedScale(scale float64) {
	log.Println("Calling Environment.SetGlowHdrBleedScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_glow_hdr_bleed_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetGlowHdrBleedThreshold(threshold float64) {
	log.Println("Calling Environment.SetGlowHdrBleedThreshold()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(threshold)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_glow_hdr_bleed_threshold", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetGlowIntensity(intensity float64) {
	log.Println("Calling Environment.SetGlowIntensity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(intensity)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_glow_intensity", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetGlowLevel(idx int64, enabled bool) {
	log.Println("Calling Environment.SetGlowLevel()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_glow_level", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetGlowStrength(strength float64) {
	log.Println("Calling Environment.SetGlowStrength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(strength)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_glow_strength", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSky(sky *Sky) {
	log.Println("Calling Environment.SetSky()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(sky)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_sky", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Environment) SetSkyScale(scale float64) {
	log.Println("Calling Environment.SetSkyScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_sky_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSsaoBias(bias float64) {
	log.Println("Calling Environment.SetSsaoBias()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bias)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ssao_bias", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSsaoBlur(enabled bool) {
	log.Println("Calling Environment.SetSsaoBlur()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ssao_blur", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSsaoColor(color *Color) {
	log.Println("Calling Environment.SetSsaoColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ssao_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSsaoDirectLightAffect(amount float64) {
	log.Println("Calling Environment.SetSsaoDirectLightAffect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ssao_direct_light_affect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSsaoEnabled(enabled bool) {
	log.Println("Calling Environment.SetSsaoEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ssao_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSsaoIntensity(intensity float64) {
	log.Println("Calling Environment.SetSsaoIntensity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(intensity)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ssao_intensity", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSsaoIntensity2(intensity float64) {
	log.Println("Calling Environment.SetSsaoIntensity2()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(intensity)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ssao_intensity2", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSsaoRadius(radius float64) {
	log.Println("Calling Environment.SetSsaoRadius()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(radius)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ssao_radius", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSsaoRadius2(radius float64) {
	log.Println("Calling Environment.SetSsaoRadius2()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(radius)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ssao_radius2", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSsrDepthTolerance(depthTolerance float64) {
	log.Println("Calling Environment.SetSsrDepthTolerance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(depthTolerance)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ssr_depth_tolerance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSsrEnabled(enabled bool) {
	log.Println("Calling Environment.SetSsrEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ssr_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSsrFadeIn(fadeIn float64) {
	log.Println("Calling Environment.SetSsrFadeIn()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(fadeIn)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ssr_fade_in", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSsrFadeOut(fadeOut float64) {
	log.Println("Calling Environment.SetSsrFadeOut()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(fadeOut)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ssr_fade_out", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSsrMaxSteps(maxSteps int64) {
	log.Println("Calling Environment.SetSsrMaxSteps()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(maxSteps)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ssr_max_steps", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetSsrRough(rough bool) {
	log.Println("Calling Environment.SetSsrRough()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rough)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ssr_rough", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetTonemapAutoExposure(autoExposure bool) {
	log.Println("Calling Environment.SetTonemapAutoExposure()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(autoExposure)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tonemap_auto_exposure", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetTonemapAutoExposureGrey(exposureGrey float64) {
	log.Println("Calling Environment.SetTonemapAutoExposureGrey()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(exposureGrey)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tonemap_auto_exposure_grey", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetTonemapAutoExposureMax(exposureMax float64) {
	log.Println("Calling Environment.SetTonemapAutoExposureMax()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(exposureMax)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tonemap_auto_exposure_max", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetTonemapAutoExposureMin(exposureMin float64) {
	log.Println("Calling Environment.SetTonemapAutoExposureMin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(exposureMin)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tonemap_auto_exposure_min", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetTonemapAutoExposureSpeed(exposureSpeed float64) {
	log.Println("Calling Environment.SetTonemapAutoExposureSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(exposureSpeed)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tonemap_auto_exposure_speed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetTonemapExposure(exposure float64) {
	log.Println("Calling Environment.SetTonemapExposure()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(exposure)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tonemap_exposure", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetTonemapWhite(white float64) {
	log.Println("Calling Environment.SetTonemapWhite()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(white)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tonemap_white", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Environment) SetTonemapper(mode int64) {
	log.Println("Calling Environment.SetTonemapper()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tonemapper", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   EnvironmentImplementer is an interface for Environment objects.
*/
type EnvironmentImplementer interface {
	class.Class
}
