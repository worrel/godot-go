//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package collisionobject

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/spatial"
)

/*
   CollisionObject is the base class for physics objects. It can hold any number of collision [Shape]\ s. Each shape must be assigned to a [i]shape owner[/i]. The CollisionObject can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the [code]shape_owner_*[/code] methods.
*/
type CollisionObject struct {
	spatial.Spatial
}

func (o *CollisionObject) baseClass() string {
	return "CollisionObject"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *CollisionObject) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *CollisionObject) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *CollisionObject) X_InputEvent(camera *Object, event *InputEvent, clickPosition *Vector3, clickNormal *Vector3, shapeIdx int64) {
	log.Println("Calling CollisionObject.X_InputEvent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(camera)
	goArguments[1] = reflect.ValueOf(event)
	goArguments[2] = reflect.ValueOf(clickPosition)
	goArguments[3] = reflect.ValueOf(clickNormal)
	goArguments[4] = reflect.ValueOf(shapeIdx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_input_event", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference.
*/
func (o *CollisionObject) CreateShapeOwner(owner *Object) int64 {
	log.Println("Calling CollisionObject.CreateShapeOwner()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(owner)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "create_shape_owner", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *CollisionObject) GetCaptureInputOnDrag() bool {
	log.Println("Calling CollisionObject.GetCaptureInputOnDrag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_capture_input_on_drag", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the object's [RID].
*/
func (o *CollisionObject) GetRid() *RID {
	log.Println("Calling CollisionObject.GetRid()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_rid", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument.
*/
func (o *CollisionObject) GetShapeOwners() *Array {
	log.Println("Calling CollisionObject.GetShapeOwners()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shape_owners", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *CollisionObject) IsRayPickable() bool {
	log.Println("Calling CollisionObject.IsRayPickable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_ray_pickable", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   If [code]true[/code] the shape owner and its shapes are disabled.
*/
func (o *CollisionObject) IsShapeOwnerDisabled(ownerId int64) bool {
	log.Println("Calling CollisionObject.IsShapeOwnerDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ownerId)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_shape_owner_disabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Removes the given shape owner.
*/
func (o *CollisionObject) RemoveShapeOwner(ownerId int64) {
	log.Println("Calling CollisionObject.RemoveShapeOwner()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ownerId)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_shape_owner", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *CollisionObject) SetCaptureInputOnDrag(enable bool) {
	log.Println("Calling CollisionObject.SetCaptureInputOnDrag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_capture_input_on_drag", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *CollisionObject) SetRayPickable(rayPickable bool) {
	log.Println("Calling CollisionObject.SetRayPickable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rayPickable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ray_pickable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the [code]owner_id[/code] of the given shape.
*/
func (o *CollisionObject) ShapeFindOwner(shapeIndex int64) int64 {
	log.Println("Calling CollisionObject.ShapeFindOwner()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shapeIndex)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shape_find_owner", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Adds a [Shape] to the shape owner.
*/
func (o *CollisionObject) ShapeOwnerAddShape(ownerId int64, shape *Shape) {
	log.Println("Calling CollisionObject.ShapeOwnerAddShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(ownerId)
	goArguments[1] = reflect.ValueOf(shape)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "shape_owner_add_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes all shapes from the shape owner.
*/
func (o *CollisionObject) ShapeOwnerClearShapes(ownerId int64) {
	log.Println("Calling CollisionObject.ShapeOwnerClearShapes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ownerId)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "shape_owner_clear_shapes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the parent object of the given shape owner.
*/
func (o *CollisionObject) ShapeOwnerGetOwner(ownerId int64) *Object {
	log.Println("Calling CollisionObject.ShapeOwnerGetOwner()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ownerId)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shape_owner_get_owner", goArguments, "*Object")

	returnValue := goRet.Interface().(*Object)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [Shape] with the given id from the given shape owner.
*/
func (o *CollisionObject) ShapeOwnerGetShape(ownerId int64, shapeId int64) *Shape {
	log.Println("Calling CollisionObject.ShapeOwnerGetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(ownerId)
	goArguments[1] = reflect.ValueOf(shapeId)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shape_owner_get_shape", goArguments, "*Shape")

	returnValue := goRet.Interface().(*Shape)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of shapes the given shape owner contains.
*/
func (o *CollisionObject) ShapeOwnerGetShapeCount(ownerId int64) int64 {
	log.Println("Calling CollisionObject.ShapeOwnerGetShapeCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ownerId)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shape_owner_get_shape_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *CollisionObject) ShapeOwnerGetShapeIndex(ownerId int64, shapeId int64) int64 {
	log.Println("Calling CollisionObject.ShapeOwnerGetShapeIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(ownerId)
	goArguments[1] = reflect.ValueOf(shapeId)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shape_owner_get_shape_index", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the shape owner's [Transform].
*/
func (o *CollisionObject) ShapeOwnerGetTransform(ownerId int64) *Transform {
	log.Println("Calling CollisionObject.ShapeOwnerGetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ownerId)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "shape_owner_get_transform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Removes a shape from the given shape owner.
*/
func (o *CollisionObject) ShapeOwnerRemoveShape(ownerId int64, shapeId int64) {
	log.Println("Calling CollisionObject.ShapeOwnerRemoveShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(ownerId)
	goArguments[1] = reflect.ValueOf(shapeId)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "shape_owner_remove_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] disables the given shape owner.
*/
func (o *CollisionObject) ShapeOwnerSetDisabled(ownerId int64, disabled bool) {
	log.Println("Calling CollisionObject.ShapeOwnerSetDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(ownerId)
	goArguments[1] = reflect.ValueOf(disabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "shape_owner_set_disabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the [Transform] of the given shape owner.
*/
func (o *CollisionObject) ShapeOwnerSetTransform(ownerId int64, transform *Transform) {
	log.Println("Calling CollisionObject.ShapeOwnerSetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(ownerId)
	goArguments[1] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "shape_owner_set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   CollisionObjectImplementer is an interface for CollisionObject objects.
*/
type CollisionObjectImplementer interface {
	class.Class
}
