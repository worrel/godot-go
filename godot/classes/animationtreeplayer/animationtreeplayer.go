//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package animationtreeplayer

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node"
)

/*
   Animation Player that uses a node graph for the blending. This kind of player is very useful when animating character or other skeleton based rigs, because it can combine several animations to form a desired pose.
*/
type AnimationTreePlayer struct {
	node.Node
}

func (o *AnimationTreePlayer) baseClass() string {
	return "AnimationTreePlayer"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *AnimationTreePlayer) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *AnimationTreePlayer) getOwner() *C.godot_object {
	return o.owner
}

/*
   Add a node of a given type in the graph with given id.
*/
func (o *AnimationTreePlayer) AddNode(aType int64, id string) {
	log.Println("Calling AnimationTreePlayer.AddNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(aType)
	goArguments[1] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_node", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AnimationTreePlayer) Advance(delta float64) {
	log.Println("Calling AnimationTreePlayer.Advance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(delta)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "advance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns an animation given its name.
*/
func (o *AnimationTreePlayer) AnimationNodeGetAnimation(id string) *Animation {
	log.Println("Calling AnimationTreePlayer.AnimationNodeGetAnimation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "animation_node_get_animation", goArguments, "*Animation")

	returnValue := goRet.Interface().(*Animation)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AnimationTreePlayer) AnimationNodeGetMasterAnimation(id string) string {
	log.Println("Calling AnimationTreePlayer.AnimationNodeGetMasterAnimation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "animation_node_get_master_animation", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the animation for an animation node.
*/
func (o *AnimationTreePlayer) AnimationNodeSetAnimation(id string, animation *Animation) {
	log.Println("Calling AnimationTreePlayer.AnimationNodeSetAnimation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(animation)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "animation_node_set_animation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AnimationTreePlayer) AnimationNodeSetFilterPath(id string, path *NodePath, enable bool) {
	log.Println("Calling AnimationTreePlayer.AnimationNodeSetFilterPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(path)
	goArguments[2] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "animation_node_set_filter_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AnimationTreePlayer) AnimationNodeSetMasterAnimation(id string, source string) {
	log.Println("Calling AnimationTreePlayer.AnimationNodeSetMasterAnimation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(source)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "animation_node_set_master_animation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns whether node [code]id[/code] and [code]dst_id[/code] are connected at the specified slot.
*/
func (o *AnimationTreePlayer) AreNodesConnected(id string, dstId string, dstInputIdx int64) bool {
	log.Println("Calling AnimationTreePlayer.AreNodesConnected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(dstId)
	goArguments[2] = reflect.ValueOf(dstInputIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "are_nodes_connected", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the blend amount of a Blend2 node given its name.
*/
func (o *AnimationTreePlayer) Blend2NodeGetAmount(id string) float64 {
	log.Println("Calling AnimationTreePlayer.Blend2NodeGetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "blend2_node_get_amount", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the blend amount of a Blend2 node given its name and value.
*/
func (o *AnimationTreePlayer) Blend2NodeSetAmount(id string, blend float64) {
	log.Println("Calling AnimationTreePlayer.Blend2NodeSetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(blend)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "blend2_node_set_amount", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AnimationTreePlayer) Blend2NodeSetFilterPath(id string, path *NodePath, enable bool) {
	log.Println("Calling AnimationTreePlayer.Blend2NodeSetFilterPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(path)
	goArguments[2] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "blend2_node_set_filter_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the blend amount of a Blend3 node given its name.
*/
func (o *AnimationTreePlayer) Blend3NodeGetAmount(id string) float64 {
	log.Println("Calling AnimationTreePlayer.Blend3NodeGetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "blend3_node_get_amount", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the blend amount of a Blend3 node given its name and value.
*/
func (o *AnimationTreePlayer) Blend3NodeSetAmount(id string, blend float64) {
	log.Println("Calling AnimationTreePlayer.Blend3NodeSetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(blend)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "blend3_node_set_amount", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the blend amount of a Blend4 node given its name.
*/
func (o *AnimationTreePlayer) Blend4NodeGetAmount(id string) *Vector2 {
	log.Println("Calling AnimationTreePlayer.Blend4NodeGetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "blend4_node_get_amount", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the blend amount of a Blend4 node given its name and value.
*/
func (o *AnimationTreePlayer) Blend4NodeSetAmount(id string, blend *Vector2) {
	log.Println("Calling AnimationTreePlayer.Blend4NodeSetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(blend)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "blend4_node_set_amount", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Connects node [code]id[/code] to [code]dst_id[/code] at the specified input slot.
*/
func (o *AnimationTreePlayer) ConnectNodes(id string, dstId string, dstInputIdx int64) int64 {
	log.Println("Calling AnimationTreePlayer.ConnectNodes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(dstId)
	goArguments[2] = reflect.ValueOf(dstInputIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "connect_nodes", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Disconnects nodes connected to [code]id[/code] at the specified input slot.
*/
func (o *AnimationTreePlayer) DisconnectNodes(id string, dstInputIdx int64) {
	log.Println("Calling AnimationTreePlayer.DisconnectNodes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(dstInputIdx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "disconnect_nodes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns playback process mode of this AnimationTreePlayer.
*/
func (o *AnimationTreePlayer) GetAnimationProcessMode() int64 {
	log.Println("Calling AnimationTreePlayer.GetAnimationProcessMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_animation_process_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AnimationTreePlayer) GetBasePath() *NodePath {
	log.Println("Calling AnimationTreePlayer.GetBasePath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_base_path", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AnimationTreePlayer) GetMasterPlayer() *NodePath {
	log.Println("Calling AnimationTreePlayer.GetMasterPlayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_master_player", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a PoolStringArray containing the name of all nodes.
*/
func (o *AnimationTreePlayer) GetNodeList() *PoolStringArray {
	log.Println("Calling AnimationTreePlayer.GetNodeList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_node_list", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether this AnimationTreePlayer is active.
*/
func (o *AnimationTreePlayer) IsActive() bool {
	log.Println("Calling AnimationTreePlayer.IsActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_active", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns mix amount of a Mix node given its name.
*/
func (o *AnimationTreePlayer) MixNodeGetAmount(id string) float64 {
	log.Println("Calling AnimationTreePlayer.MixNodeGetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "mix_node_get_amount", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets mix amount of a Mix node given its name and value.
*/
func (o *AnimationTreePlayer) MixNodeSetAmount(id string, ratio float64) {
	log.Println("Calling AnimationTreePlayer.MixNodeSetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(ratio)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "mix_node_set_amount", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Check if a node exists (by name).
*/
func (o *AnimationTreePlayer) NodeExists(node string) bool {
	log.Println("Calling AnimationTreePlayer.NodeExists()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(node)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "node_exists", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the input count for a given node. Different types of nodes have different amount of inputs.
*/
func (o *AnimationTreePlayer) NodeGetInputCount(id string) int64 {
	log.Println("Calling AnimationTreePlayer.NodeGetInputCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "node_get_input_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the input source for a given node input.
*/
func (o *AnimationTreePlayer) NodeGetInputSource(id string, idx int64) string {
	log.Println("Calling AnimationTreePlayer.NodeGetInputSource()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "node_get_input_source", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns position of a node in the graph given its name.
*/
func (o *AnimationTreePlayer) NodeGetPosition(id string) *Vector2 {
	log.Println("Calling AnimationTreePlayer.NodeGetPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "node_get_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the node type, will return from NODE_* enum.
*/
func (o *AnimationTreePlayer) NodeGetType(id string) int64 {
	log.Println("Calling AnimationTreePlayer.NodeGetType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "node_get_type", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Rename a node in the graph.
*/
func (o *AnimationTreePlayer) NodeRename(node string, newName string) int64 {
	log.Println("Calling AnimationTreePlayer.NodeRename()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(node)
	goArguments[1] = reflect.ValueOf(newName)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "node_rename", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets position of a node in the graph given its name and position.
*/
func (o *AnimationTreePlayer) NodeSetPosition(id string, screenPosition *Vector2) {
	log.Println("Calling AnimationTreePlayer.NodeSetPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(screenPosition)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "node_set_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns autostart delay of a OneShot node given its name.
*/
func (o *AnimationTreePlayer) OneshotNodeGetAutorestartDelay(id string) float64 {
	log.Println("Calling AnimationTreePlayer.OneshotNodeGetAutorestartDelay()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "oneshot_node_get_autorestart_delay", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns autostart random delay of a OneShot node given its name.
*/
func (o *AnimationTreePlayer) OneshotNodeGetAutorestartRandomDelay(id string) float64 {
	log.Println("Calling AnimationTreePlayer.OneshotNodeGetAutorestartRandomDelay()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "oneshot_node_get_autorestart_random_delay", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns fade in time of a OneShot node given its name.
*/
func (o *AnimationTreePlayer) OneshotNodeGetFadeinTime(id string) float64 {
	log.Println("Calling AnimationTreePlayer.OneshotNodeGetFadeinTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "oneshot_node_get_fadein_time", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns fade out time of a OneShot node given its name.
*/
func (o *AnimationTreePlayer) OneshotNodeGetFadeoutTime(id string) float64 {
	log.Println("Calling AnimationTreePlayer.OneshotNodeGetFadeoutTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "oneshot_node_get_fadeout_time", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether a OneShot node will auto restart given its name.
*/
func (o *AnimationTreePlayer) OneshotNodeHasAutorestart(id string) bool {
	log.Println("Calling AnimationTreePlayer.OneshotNodeHasAutorestart()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "oneshot_node_has_autorestart", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether a OneShot node is active given its name.
*/
func (o *AnimationTreePlayer) OneshotNodeIsActive(id string) bool {
	log.Println("Calling AnimationTreePlayer.OneshotNodeIsActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "oneshot_node_is_active", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets autorestart property of a OneShot node given its name and value.
*/
func (o *AnimationTreePlayer) OneshotNodeSetAutorestart(id string, enable bool) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeSetAutorestart()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "oneshot_node_set_autorestart", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets autorestart delay of a OneShot node given its name and value in seconds.
*/
func (o *AnimationTreePlayer) OneshotNodeSetAutorestartDelay(id string, delaySec float64) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeSetAutorestartDelay()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(delaySec)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "oneshot_node_set_autorestart_delay", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets autorestart random delay of a OneShot node given its name and value in seconds.
*/
func (o *AnimationTreePlayer) OneshotNodeSetAutorestartRandomDelay(id string, randSec float64) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeSetAutorestartRandomDelay()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(randSec)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "oneshot_node_set_autorestart_random_delay", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets fade in time of a OneShot node given its name and value in seconds.
*/
func (o *AnimationTreePlayer) OneshotNodeSetFadeinTime(id string, timeSec float64) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeSetFadeinTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(timeSec)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "oneshot_node_set_fadein_time", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets fade out time of a OneShot node given its name and value in seconds.
*/
func (o *AnimationTreePlayer) OneshotNodeSetFadeoutTime(id string, timeSec float64) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeSetFadeoutTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(timeSec)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "oneshot_node_set_fadeout_time", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AnimationTreePlayer) OneshotNodeSetFilterPath(id string, path *NodePath, enable bool) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeSetFilterPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(path)
	goArguments[2] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "oneshot_node_set_filter_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Starts a OneShot node given its name.
*/
func (o *AnimationTreePlayer) OneshotNodeStart(id string) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeStart()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "oneshot_node_start", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Stops a OneShot node given its name.
*/
func (o *AnimationTreePlayer) OneshotNodeStop(id string) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeStop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "oneshot_node_stop", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AnimationTreePlayer) RecomputeCaches() {
	log.Println("Calling AnimationTreePlayer.RecomputeCaches()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "recompute_caches", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AnimationTreePlayer) RemoveNode(id string) {
	log.Println("Calling AnimationTreePlayer.RemoveNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_node", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Resets this AnimationTreePlayer.
*/
func (o *AnimationTreePlayer) Reset() {
	log.Println("Calling AnimationTreePlayer.Reset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "reset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets whether this AnimationTreePlayer is active. AnimationTreePlayer will start processing if set to active.
*/
func (o *AnimationTreePlayer) SetActive(enabled bool) {
	log.Println("Calling AnimationTreePlayer.SetActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_active", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets process mode (ANIMATION_PROCESS_*) of this AnimationTreePlayer.
*/
func (o *AnimationTreePlayer) SetAnimationProcessMode(mode int64) {
	log.Println("Calling AnimationTreePlayer.SetAnimationProcessMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_animation_process_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets base path of this AnimationTreePlayer.
*/
func (o *AnimationTreePlayer) SetBasePath(path *NodePath) {
	log.Println("Calling AnimationTreePlayer.SetBasePath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_base_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AnimationTreePlayer) SetMasterPlayer(nodepath *NodePath) {
	log.Println("Calling AnimationTreePlayer.SetMasterPlayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(nodepath)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_master_player", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns time scale value of a TimeScale node given its name.
*/
func (o *AnimationTreePlayer) TimescaleNodeGetScale(id string) float64 {
	log.Println("Calling AnimationTreePlayer.TimescaleNodeGetScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "timescale_node_get_scale", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets time scale value of a TimeScale node given its name and value.
*/
func (o *AnimationTreePlayer) TimescaleNodeSetScale(id string, scale float64) {
	log.Println("Calling AnimationTreePlayer.TimescaleNodeSetScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "timescale_node_set_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets time seek value of a TimeSeek node given its name and value.
*/
func (o *AnimationTreePlayer) TimeseekNodeSeek(id string, seconds float64) {
	log.Println("Calling AnimationTreePlayer.TimeseekNodeSeek()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(seconds)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "timeseek_node_seek", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AnimationTreePlayer) TransitionNodeDeleteInput(id string, inputIdx int64) {
	log.Println("Calling AnimationTreePlayer.TransitionNodeDeleteInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(inputIdx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "transition_node_delete_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AnimationTreePlayer) TransitionNodeGetCurrent(id string) int64 {
	log.Println("Calling AnimationTreePlayer.TransitionNodeGetCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "transition_node_get_current", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AnimationTreePlayer) TransitionNodeGetInputCount(id string) int64 {
	log.Println("Calling AnimationTreePlayer.TransitionNodeGetInputCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "transition_node_get_input_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AnimationTreePlayer) TransitionNodeGetXfadeTime(id string) float64 {
	log.Println("Calling AnimationTreePlayer.TransitionNodeGetXfadeTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "transition_node_get_xfade_time", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AnimationTreePlayer) TransitionNodeHasInputAutoAdvance(id string, inputIdx int64) bool {
	log.Println("Calling AnimationTreePlayer.TransitionNodeHasInputAutoAdvance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(inputIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "transition_node_has_input_auto_advance", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *AnimationTreePlayer) TransitionNodeSetCurrent(id string, inputIdx int64) {
	log.Println("Calling AnimationTreePlayer.TransitionNodeSetCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(inputIdx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "transition_node_set_current", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AnimationTreePlayer) TransitionNodeSetInputAutoAdvance(id string, inputIdx int64, enable bool) {
	log.Println("Calling AnimationTreePlayer.TransitionNodeSetInputAutoAdvance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(inputIdx)
	goArguments[2] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "transition_node_set_input_auto_advance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AnimationTreePlayer) TransitionNodeSetInputCount(id string, count int64) {
	log.Println("Calling AnimationTreePlayer.TransitionNodeSetInputCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(count)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "transition_node_set_input_count", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *AnimationTreePlayer) TransitionNodeSetXfadeTime(id string, timeSec float64) {
	log.Println("Calling AnimationTreePlayer.TransitionNodeSetXfadeTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(timeSec)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "transition_node_set_xfade_time", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   AnimationTreePlayerImplementer is an interface for AnimationTreePlayer objects.
*/
type AnimationTreePlayerImplementer interface {
	class.Class
}
