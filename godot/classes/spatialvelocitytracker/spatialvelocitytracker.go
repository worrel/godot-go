//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package spatialvelocitytracker

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/reference"
)

/*

 */
type SpatialVelocityTracker struct {
	reference.Reference
}

func (o *SpatialVelocityTracker) baseClass() string {
	return "SpatialVelocityTracker"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *SpatialVelocityTracker) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *SpatialVelocityTracker) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *SpatialVelocityTracker) GetTrackedLinearVelocity() *Vector3 {
	log.Println("Calling SpatialVelocityTracker.GetTrackedLinearVelocity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tracked_linear_velocity", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SpatialVelocityTracker) IsTrackingFixedStep() bool {
	log.Println("Calling SpatialVelocityTracker.IsTrackingFixedStep()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_tracking_fixed_step", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialVelocityTracker) Reset(position *Vector3) {
	log.Println("Calling SpatialVelocityTracker.Reset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "reset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SpatialVelocityTracker) SetTrackFixedStep(enable bool) {
	log.Println("Calling SpatialVelocityTracker.SetTrackFixedStep()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_track_fixed_step", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialVelocityTracker) UpdatePosition(position *Vector3) {
	log.Println("Calling SpatialVelocityTracker.UpdatePosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "update_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SpatialVelocityTrackerImplementer is an interface for SpatialVelocityTracker objects.
*/
type SpatialVelocityTrackerImplementer interface {
	class.Class
}
