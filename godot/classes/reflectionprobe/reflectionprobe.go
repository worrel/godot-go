//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package reflectionprobe

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/visualinstance"
)

/*

 */
type ReflectionProbe struct {
	visualinstance.VisualInstance
}

func (o *ReflectionProbe) baseClass() string {
	return "ReflectionProbe"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ReflectionProbe) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *ReflectionProbe) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *ReflectionProbe) AreShadowsEnabled() bool {
	log.Println("Calling ReflectionProbe.AreShadowsEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "are_shadows_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ReflectionProbe) GetCullMask() int64 {
	log.Println("Calling ReflectionProbe.GetCullMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_cull_mask", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ReflectionProbe) GetExtents() *Vector3 {
	log.Println("Calling ReflectionProbe.GetExtents()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_extents", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ReflectionProbe) GetIntensity() float64 {
	log.Println("Calling ReflectionProbe.GetIntensity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_intensity", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ReflectionProbe) GetInteriorAmbient() *Color {
	log.Println("Calling ReflectionProbe.GetInteriorAmbient()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_interior_ambient", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ReflectionProbe) GetInteriorAmbientEnergy() float64 {
	log.Println("Calling ReflectionProbe.GetInteriorAmbientEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_interior_ambient_energy", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ReflectionProbe) GetInteriorAmbientProbeContribution() float64 {
	log.Println("Calling ReflectionProbe.GetInteriorAmbientProbeContribution()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_interior_ambient_probe_contribution", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ReflectionProbe) GetMaxDistance() float64 {
	log.Println("Calling ReflectionProbe.GetMaxDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_max_distance", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ReflectionProbe) GetOriginOffset() *Vector3 {
	log.Println("Calling ReflectionProbe.GetOriginOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_origin_offset", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ReflectionProbe) GetUpdateMode() int64 {
	log.Println("Calling ReflectionProbe.GetUpdateMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_update_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ReflectionProbe) IsBoxProjectionEnabled() bool {
	log.Println("Calling ReflectionProbe.IsBoxProjectionEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_box_projection_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ReflectionProbe) IsSetAsInterior() bool {
	log.Println("Calling ReflectionProbe.IsSetAsInterior()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_set_as_interior", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ReflectionProbe) SetAsInterior(enable bool) {
	log.Println("Calling ReflectionProbe.SetAsInterior()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_as_interior", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ReflectionProbe) SetCullMask(layers int64) {
	log.Println("Calling ReflectionProbe.SetCullMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(layers)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_cull_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ReflectionProbe) SetEnableBoxProjection(enable bool) {
	log.Println("Calling ReflectionProbe.SetEnableBoxProjection()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_enable_box_projection", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ReflectionProbe) SetEnableShadows(enable bool) {
	log.Println("Calling ReflectionProbe.SetEnableShadows()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_enable_shadows", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ReflectionProbe) SetExtents(extents *Vector3) {
	log.Println("Calling ReflectionProbe.SetExtents()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(extents)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_extents", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ReflectionProbe) SetIntensity(intensity float64) {
	log.Println("Calling ReflectionProbe.SetIntensity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(intensity)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_intensity", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ReflectionProbe) SetInteriorAmbient(ambient *Color) {
	log.Println("Calling ReflectionProbe.SetInteriorAmbient()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ambient)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_interior_ambient", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ReflectionProbe) SetInteriorAmbientEnergy(ambientEnergy float64) {
	log.Println("Calling ReflectionProbe.SetInteriorAmbientEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ambientEnergy)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_interior_ambient_energy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ReflectionProbe) SetInteriorAmbientProbeContribution(ambientProbeContribution float64) {
	log.Println("Calling ReflectionProbe.SetInteriorAmbientProbeContribution()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ambientProbeContribution)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_interior_ambient_probe_contribution", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ReflectionProbe) SetMaxDistance(maxDistance float64) {
	log.Println("Calling ReflectionProbe.SetMaxDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(maxDistance)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_max_distance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ReflectionProbe) SetOriginOffset(originOffset *Vector3) {
	log.Println("Calling ReflectionProbe.SetOriginOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(originOffset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_origin_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ReflectionProbe) SetUpdateMode(mode int64) {
	log.Println("Calling ReflectionProbe.SetUpdateMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_update_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ReflectionProbeImplementer is an interface for ReflectionProbe objects.
*/
type ReflectionProbeImplementer interface {
	class.Class
}
