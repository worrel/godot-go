//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package editorimportplugin

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/reference"
)

/*
   EditorImportPlugins provide a way to extend the editor's resource import functionality. Use them to import resources from custom files or to provide alternatives to the editor's existing importers. Register your [EditorPlugin] with [method EditorPlugin.add_import_plugin]. EditorImportPlugins work by associating with specific file extensions and a resource type. See [method get_recognized_extension] and [method get_resource_type]). They may optionally specify some import presets that affect the import process. EditorImportPlugins are responsible for creating the resources and saving them in the [code].import[/code] directory. Below is an example EditorImportPlugin that imports a [Mesh] from a file with the extension ".special" or ".spec": [codeblock] tool extends EditorImportPlugin func get_importer_name(): return "my.special.plugin" func get_visible_name(): return "Special Mesh Importer" func get_recognized_extensions(): return ["special", "spec"] func get_save_extension(): return "mesh" func get_resource_type(): return "Mesh" func get_preset_count(): return 1 func get_preset_name(i): return "Default" func get_import_options(i): return [{"name": "my_option", "default_value": false}] func load(src, dst, opts, r_platform_variants, r_gen_files): var f = File.new() if f.open(src, File.READ) != OK: return FAILED var mesh = Mesh.new() var save = dst + "." + get_save_extension() ResourceSaver.save(file, mesh) return OK [/codeblock]
*/
type EditorImportPlugin struct {
	reference.Reference
}

func (o *EditorImportPlugin) baseClass() string {
	return "EditorImportPlugin"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *EditorImportPlugin) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *EditorImportPlugin) getOwner() *C.godot_object {
	return o.owner
}

/*
   Get the options and default values for the preset at this index. Returns an Array of Dictionaries with the following keys: "name", "default_value", "property_hint" (optional), "hint_string" (optional), "usage" (optional).
*/
func (o *EditorImportPlugin) GetImportOptions(preset int64) *Array {
	log.Println("Calling EditorImportPlugin.GetImportOptions()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(preset)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_import_options", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the unique name of the importer.
*/
func (o *EditorImportPlugin) GetImporterName() string {
	log.Println("Calling EditorImportPlugin.GetImporterName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_importer_name", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorImportPlugin) GetOptionVisibility(option string, options *Dictionary) bool {
	log.Println("Calling EditorImportPlugin.GetOptionVisibility()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(option)
	goArguments[1] = reflect.ValueOf(options)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_option_visibility", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the number of initial presets defined by the plugin. Use [method get_import_options] to get the default options for the preset and [method get_preset_name] to get the name of the preset.
*/
func (o *EditorImportPlugin) GetPresetCount() int64 {
	log.Println("Calling EditorImportPlugin.GetPresetCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_preset_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the name of the options preset at this index.
*/
func (o *EditorImportPlugin) GetPresetName(preset int64) string {
	log.Println("Calling EditorImportPlugin.GetPresetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(preset)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_preset_name", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the list of file extensions to associate with this loader (case insensitive). e.g. ["obj"].
*/
func (o *EditorImportPlugin) GetRecognizedExtensions() *Array {
	log.Println("Calling EditorImportPlugin.GetRecognizedExtensions()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_recognized_extensions", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the godot resource type associated with this loader. e.g. "Mesh" or "Animation".
*/
func (o *EditorImportPlugin) GetResourceType() string {
	log.Println("Calling EditorImportPlugin.GetResourceType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_resource_type", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the extension used to save this resource in the [code].import[/code] directory.
*/
func (o *EditorImportPlugin) GetSaveExtension() string {
	log.Println("Calling EditorImportPlugin.GetSaveExtension()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_save_extension", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the name to display in the import window.
*/
func (o *EditorImportPlugin) GetVisibleName() string {
	log.Println("Calling EditorImportPlugin.GetVisibleName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_visible_name", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorImportPlugin) Import(sourceFile string, savePath string, options *Dictionary, rPlatformVariants *Array, rGenFiles *Array) int64 {
	log.Println("Calling EditorImportPlugin.Import()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(sourceFile)
	goArguments[1] = reflect.ValueOf(savePath)
	goArguments[2] = reflect.ValueOf(options)
	goArguments[3] = reflect.ValueOf(rPlatformVariants)
	goArguments[4] = reflect.ValueOf(rGenFiles)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "import", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   EditorImportPluginImplementer is an interface for EditorImportPlugin objects.
*/
type EditorImportPluginImplementer interface {
	class.Class
}
