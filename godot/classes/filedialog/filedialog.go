//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package filedialog

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/confirmationdialog"
)

/*
   FileDialog is a preset dialog used to choose files and directories in the filesystem. It supports filter masks.
*/
type FileDialog struct {
	confirmationdialog.ConfirmationDialog
}

func (o *FileDialog) baseClass() string {
	return "FileDialog"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *FileDialog) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *FileDialog) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *FileDialog) X_ActionPressed() {
	log.Println("Calling FileDialog.X_ActionPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_action_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *FileDialog) X_CancelPressed() {
	log.Println("Calling FileDialog.X_CancelPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_cancel_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *FileDialog) X_DirEntered(arg0 string) {
	log.Println("Calling FileDialog.X_DirEntered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_dir_entered", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *FileDialog) X_FileEntered(arg0 string) {
	log.Println("Calling FileDialog.X_FileEntered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_file_entered", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *FileDialog) X_FilterSelected(arg0 int64) {
	log.Println("Calling FileDialog.X_FilterSelected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_filter_selected", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *FileDialog) X_MakeDir() {
	log.Println("Calling FileDialog.X_MakeDir()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_make_dir", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *FileDialog) X_MakeDirConfirm() {
	log.Println("Calling FileDialog.X_MakeDirConfirm()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_make_dir_confirm", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *FileDialog) X_SaveConfirmPressed() {
	log.Println("Calling FileDialog.X_SaveConfirmPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_save_confirm_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *FileDialog) X_SelectDrive(arg0 int64) {
	log.Println("Calling FileDialog.X_SelectDrive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_select_drive", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *FileDialog) X_TreeDbSelected() {
	log.Println("Calling FileDialog.X_TreeDbSelected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_tree_db_selected", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *FileDialog) X_TreeSelected() {
	log.Println("Calling FileDialog.X_TreeSelected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_tree_selected", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *FileDialog) X_UnhandledInput(arg0 *InputEvent) {
	log.Println("Calling FileDialog.X_UnhandledInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_unhandled_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *FileDialog) X_UpdateDir() {
	log.Println("Calling FileDialog.X_UpdateDir()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_update_dir", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *FileDialog) X_UpdateFileList() {
	log.Println("Calling FileDialog.X_UpdateFileList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_update_file_list", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add a custom filter. Filter format is: "mask ; description", example (C++): dialog->add_filter("*.png ; PNG Images");
*/
func (o *FileDialog) AddFilter(filter string) {
	log.Println("Calling FileDialog.AddFilter()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(filter)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_filter", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clear all the added filters in the dialog.
*/
func (o *FileDialog) ClearFilters() {
	log.Println("Calling FileDialog.ClearFilters()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_filters", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the file access permission of the dialog.
*/
func (o *FileDialog) GetAccess() int64 {
	log.Println("Calling FileDialog.GetAccess()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_access", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the current working directory of the file dialog.
*/
func (o *FileDialog) GetCurrentDir() string {
	log.Println("Calling FileDialog.GetCurrentDir()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_current_dir", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the current selected file of the file dialog (empty if none).
*/
func (o *FileDialog) GetCurrentFile() string {
	log.Println("Calling FileDialog.GetCurrentFile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_current_file", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the current selected path (directory and file) of the file dialog (empty if none).
*/
func (o *FileDialog) GetCurrentPath() string {
	log.Println("Calling FileDialog.GetCurrentPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_current_path", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *FileDialog) GetFilters() *PoolStringArray {
	log.Println("Calling FileDialog.GetFilters()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_filters", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the file dialog mode from the MODE_* enum.
*/
func (o *FileDialog) GetMode() int64 {
	log.Println("Calling FileDialog.GetMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the vertical box container of the dialog, custom controls can be added to it.
*/
func (o *FileDialog) GetVbox() *VBoxContainer {
	log.Println("Calling FileDialog.GetVbox()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vbox", goArguments, "*VBoxContainer")

	returnValue := goRet.Interface().(*VBoxContainer)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Invalidate and update the current dialog content list.
*/
func (o *FileDialog) Invalidate() {
	log.Println("Calling FileDialog.Invalidate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "invalidate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return true if the dialog allows show hidden files.
*/
func (o *FileDialog) IsShowingHiddenFiles() bool {
	log.Println("Calling FileDialog.IsShowingHiddenFiles()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_showing_hidden_files", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the file access permission of the dialog(Must be one of [ACCESS_RESOURCES], [ACCESS_USERDATA] or [ACCESS_FILESYSTEM]).
*/
func (o *FileDialog) SetAccess(access int64) {
	log.Println("Calling FileDialog.SetAccess()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(access)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_access", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the current working directory of the file dialog.
*/
func (o *FileDialog) SetCurrentDir(dir string) {
	log.Println("Calling FileDialog.SetCurrentDir()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(dir)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_current_dir", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the current selected file name of the file dialog.
*/
func (o *FileDialog) SetCurrentFile(file string) {
	log.Println("Calling FileDialog.SetCurrentFile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(file)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_current_file", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the current selected file path of the file dialog.
*/
func (o *FileDialog) SetCurrentPath(path string) {
	log.Println("Calling FileDialog.SetCurrentPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_current_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *FileDialog) SetFilters(filters *PoolStringArray) {
	log.Println("Calling FileDialog.SetFilters()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(filters)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_filters", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the file dialog mode from the MODE_* enum.
*/
func (o *FileDialog) SetMode(mode int64) {
	log.Println("Calling FileDialog.SetMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the dialog should show hidden files.
*/
func (o *FileDialog) SetShowHiddenFiles(show bool) {
	log.Println("Calling FileDialog.SetShowHiddenFiles()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(show)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_show_hidden_files", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   FileDialogImplementer is an interface for FileDialog objects.
*/
type FileDialogImplementer interface {
	class.Class
}
