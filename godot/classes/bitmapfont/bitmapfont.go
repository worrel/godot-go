//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package bitmapfont

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/font"
)

/*
   Renders text using [code]*.fnt[/code] fonts containing texture atlases. Supports distance fields. For using vector font files like TTF directly, see [DynamicFont].
*/
type BitmapFont struct {
	font.Font
}

func (o *BitmapFont) baseClass() string {
	return "BitmapFont"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *BitmapFont) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *BitmapFont) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *BitmapFont) X_GetChars() *PoolIntArray {
	log.Println("Calling BitmapFont.X_GetChars()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_chars", goArguments, "*PoolIntArray")

	returnValue := goRet.Interface().(*PoolIntArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BitmapFont) X_GetKernings() *PoolIntArray {
	log.Println("Calling BitmapFont.X_GetKernings()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_kernings", goArguments, "*PoolIntArray")

	returnValue := goRet.Interface().(*PoolIntArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BitmapFont) X_GetTextures() *Array {
	log.Println("Calling BitmapFont.X_GetTextures()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_textures", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BitmapFont) X_SetChars(arg0 *PoolIntArray) {
	log.Println("Calling BitmapFont.X_SetChars()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_chars", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BitmapFont) X_SetKernings(arg0 *PoolIntArray) {
	log.Println("Calling BitmapFont.X_SetKernings()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_kernings", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BitmapFont) X_SetTextures(arg0 *Array) {
	log.Println("Calling BitmapFont.X_SetTextures()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_textures", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a character to the font, where [code]character[/code] is the unicode value, [code]texture[/code] is the texture index, [code]rect[/code] is the region in the texture (in pixels!), [code]align[/code] is the (optional) alignment for the character and [code]advance[/code] is the (optional) advance.
*/
func (o *BitmapFont) AddChar(character int64, texture int64, rect *Rect2, align *Vector2, advance float64) {
	log.Println("Calling BitmapFont.AddChar()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(character)
	goArguments[1] = reflect.ValueOf(texture)
	goArguments[2] = reflect.ValueOf(rect)
	goArguments[3] = reflect.ValueOf(align)
	goArguments[4] = reflect.ValueOf(advance)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_char", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a kerning pair to the [BitmapFont] as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character.
*/
func (o *BitmapFont) AddKerningPair(charA int64, charB int64, kerning int64) {
	log.Println("Calling BitmapFont.AddKerningPair()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(charA)
	goArguments[1] = reflect.ValueOf(charB)
	goArguments[2] = reflect.ValueOf(kerning)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_kerning_pair", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a texture to the [BitmapFont].
*/
func (o *BitmapFont) AddTexture(texture *Texture) {
	log.Println("Calling BitmapFont.AddTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_texture", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clears all the font data and settings.
*/
func (o *BitmapFont) Clear() {
	log.Println("Calling BitmapFont.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a BitmapFont from the [code]*.fnt[/code] file at [code]path[/code].
*/
func (o *BitmapFont) CreateFromFnt(path string) int64 {
	log.Println("Calling BitmapFont.CreateFromFnt()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "create_from_fnt", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the size of a character, optionally taking kerning into account if the next character is provided.
*/
func (o *BitmapFont) GetCharSize(char int64, next int64) *Vector2 {
	log.Println("Calling BitmapFont.GetCharSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(char)
	goArguments[1] = reflect.ValueOf(next)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_char_size", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the fallback BitmapFont.
*/
func (o *BitmapFont) GetFallback() *BitmapFont {
	log.Println("Calling BitmapFont.GetFallback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fallback", goArguments, "*BitmapFont")

	returnValue := goRet.Interface().(*BitmapFont)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a kerning pair as a difference.
*/
func (o *BitmapFont) GetKerningPair(charA int64, charB int64) int64 {
	log.Println("Calling BitmapFont.GetKerningPair()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(charA)
	goArguments[1] = reflect.ValueOf(charB)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_kerning_pair", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the font atlas texture at index [code]idx[/code].
*/
func (o *BitmapFont) GetTexture(idx int64) *Texture {
	log.Println("Calling BitmapFont.GetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_texture", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of textures in the BitmapFont atlas.
*/
func (o *BitmapFont) GetTextureCount() int64 {
	log.Println("Calling BitmapFont.GetTextureCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_texture_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the font ascent (number of pixels above the baseline).
*/
func (o *BitmapFont) SetAscent(px float64) {
	log.Println("Calling BitmapFont.SetAscent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(px)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ascent", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] distance field hint is enabled.
*/
func (o *BitmapFont) SetDistanceFieldHint(enable bool) {
	log.Println("Calling BitmapFont.SetDistanceFieldHint()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_distance_field_hint", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the fallback BitmapFont.
*/
func (o *BitmapFont) SetFallback(fallback *BitmapFont) {
	log.Println("Calling BitmapFont.SetFallback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(fallback)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fallback", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the total font height (ascent plus descent) in pixels.
*/
func (o *BitmapFont) SetHeight(px float64) {
	log.Println("Calling BitmapFont.SetHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(px)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_height", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   BitmapFontImplementer is an interface for BitmapFont objects.
*/
type BitmapFontImplementer interface {
	class.Class
}
