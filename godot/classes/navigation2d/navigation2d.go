//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package navigation2d

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node2d"
)

/*

 */
type Navigation2D struct {
	node2d.Node2D
}

func (o *Navigation2D) baseClass() string {
	return "Navigation2D"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Navigation2D) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Navigation2D) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *Navigation2D) GetClosestPoint(toPoint *Vector2) *Vector2 {
	log.Println("Calling Navigation2D.GetClosestPoint()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(toPoint)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_closest_point", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Navigation2D) GetClosestPointOwner(toPoint *Vector2) *Object {
	log.Println("Calling Navigation2D.GetClosestPointOwner()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(toPoint)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_closest_point_owner", goArguments, "*Object")

	returnValue := goRet.Interface().(*Object)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Navigation2D) GetSimplePath(start *Vector2, end *Vector2, optimize bool) *PoolVector2Array {
	log.Println("Calling Navigation2D.GetSimplePath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(start)
	goArguments[1] = reflect.ValueOf(end)
	goArguments[2] = reflect.ValueOf(optimize)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_simple_path", goArguments, "*PoolVector2Array")

	returnValue := goRet.Interface().(*PoolVector2Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Navigation2D) NavpolyCreate(mesh *NavigationPolygon, xform *Transform2D, owner *Object) int64 {
	log.Println("Calling Navigation2D.NavpolyCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(xform)
	goArguments[2] = reflect.ValueOf(owner)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "navpoly_create", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Navigation2D) NavpolyRemove(id int64) {
	log.Println("Calling Navigation2D.NavpolyRemove()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "navpoly_remove", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Navigation2D) NavpolySetTransform(id int64, xform *Transform2D) {
	log.Println("Calling Navigation2D.NavpolySetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(xform)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "navpoly_set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Navigation2DImplementer is an interface for Navigation2D objects.
*/
type Navigation2DImplementer interface {
	class.Class
}
