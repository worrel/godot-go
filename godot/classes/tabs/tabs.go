//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package tabs

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/control"
)

/*
   Simple tabs control, similar to [TabContainer] but is only in charge of drawing tabs, not interact with children.
*/
type Tabs struct {
	control.Control
}

func (o *Tabs) baseClass() string {
	return "Tabs"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Tabs) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Tabs) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *Tabs) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling Tabs.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) AddTab(title string, icon *Texture) {
	log.Println("Calling Tabs.AddTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(title)
	goArguments[1] = reflect.ValueOf(icon)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_tab", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) EnsureTabVisible(idx int64) {
	log.Println("Calling Tabs.EnsureTabVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "ensure_tab_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) GetCurrentTab() int64 {
	log.Println("Calling Tabs.GetCurrentTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_current_tab", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Tabs) GetTabAlign() int64 {
	log.Println("Calling Tabs.GetTabAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tab_align", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Tabs) GetTabCloseDisplayPolicy() int64 {
	log.Println("Calling Tabs.GetTabCloseDisplayPolicy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tab_close_display_policy", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Tabs) GetTabCount() int64 {
	log.Println("Calling Tabs.GetTabCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tab_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Tabs) GetTabDisabled(tabIdx int64) bool {
	log.Println("Calling Tabs.GetTabDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tab_disabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Tabs) GetTabIcon(tabIdx int64) *Texture {
	log.Println("Calling Tabs.GetTabIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tab_icon", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns tab [Rect2] with local position and size.
*/
func (o *Tabs) GetTabRect(tabIdx int64) *Rect2 {
	log.Println("Calling Tabs.GetTabRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tab_rect", goArguments, "*Rect2")

	returnValue := goRet.Interface().(*Rect2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Tabs) GetTabTitle(tabIdx int64) string {
	log.Println("Calling Tabs.GetTabTitle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tab_title", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Rearrange tab.
*/
func (o *Tabs) MoveTab(from int64, to int64) {
	log.Println("Calling Tabs.MoveTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(from)
	goArguments[1] = reflect.ValueOf(to)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "move_tab", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) RemoveTab(tabIdx int64) {
	log.Println("Calling Tabs.RemoveTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_tab", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) SetCurrentTab(tabIdx int64) {
	log.Println("Calling Tabs.SetCurrentTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_current_tab", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) SetTabAlign(align int64) {
	log.Println("Calling Tabs.SetTabAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(align)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tab_align", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) SetTabCloseDisplayPolicy(policy int64) {
	log.Println("Calling Tabs.SetTabCloseDisplayPolicy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(policy)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tab_close_display_policy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) SetTabDisabled(tabIdx int64, disabled bool) {
	log.Println("Calling Tabs.SetTabDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(tabIdx)
	goArguments[1] = reflect.ValueOf(disabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tab_disabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) SetTabIcon(tabIdx int64, icon *Texture) {
	log.Println("Calling Tabs.SetTabIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(tabIdx)
	goArguments[1] = reflect.ValueOf(icon)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tab_icon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) SetTabTitle(tabIdx int64, title string) {
	log.Println("Calling Tabs.SetTabTitle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(tabIdx)
	goArguments[1] = reflect.ValueOf(title)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_tab_title", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   TabsImplementer is an interface for Tabs objects.
*/
type TabsImplementer interface {
	class.Class
}
