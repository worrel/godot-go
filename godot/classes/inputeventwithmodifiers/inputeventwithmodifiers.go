//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package inputeventwithmodifiers

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/inputevent"
)

/*

 */
type InputEventWithModifiers struct {
	inputevent.InputEvent
}

func (o *InputEventWithModifiers) baseClass() string {
	return "InputEventWithModifiers"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *InputEventWithModifiers) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *InputEventWithModifiers) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *InputEventWithModifiers) GetAlt() bool {
	log.Println("Calling InputEventWithModifiers.GetAlt()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_alt", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InputEventWithModifiers) GetCommand() bool {
	log.Println("Calling InputEventWithModifiers.GetCommand()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_command", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InputEventWithModifiers) GetControl() bool {
	log.Println("Calling InputEventWithModifiers.GetControl()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_control", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InputEventWithModifiers) GetMetakey() bool {
	log.Println("Calling InputEventWithModifiers.GetMetakey()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_metakey", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InputEventWithModifiers) GetShift() bool {
	log.Println("Calling InputEventWithModifiers.GetShift()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shift", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InputEventWithModifiers) SetAlt(enable bool) {
	log.Println("Calling InputEventWithModifiers.SetAlt()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_alt", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *InputEventWithModifiers) SetCommand(enable bool) {
	log.Println("Calling InputEventWithModifiers.SetCommand()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_command", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *InputEventWithModifiers) SetControl(enable bool) {
	log.Println("Calling InputEventWithModifiers.SetControl()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_control", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *InputEventWithModifiers) SetMetakey(enable bool) {
	log.Println("Calling InputEventWithModifiers.SetMetakey()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_metakey", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *InputEventWithModifiers) SetShift(enable bool) {
	log.Println("Calling InputEventWithModifiers.SetShift()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shift", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   InputEventWithModifiersImplementer is an interface for InputEventWithModifiers objects.
*/
type InputEventWithModifiersImplementer interface {
	class.Class
}
