//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package remotetransform

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/spatial"
)

/*

 */
type RemoteTransform struct {
	spatial.Spatial
}

func (o *RemoteTransform) baseClass() string {
	return "RemoteTransform"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *RemoteTransform) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *RemoteTransform) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *RemoteTransform) GetRemoteNode() *NodePath {
	log.Println("Calling RemoteTransform.GetRemoteNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_remote_node", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RemoteTransform) GetUpdatePosition() bool {
	log.Println("Calling RemoteTransform.GetUpdatePosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_update_position", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RemoteTransform) GetUpdateRotation() bool {
	log.Println("Calling RemoteTransform.GetUpdateRotation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_update_rotation", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RemoteTransform) GetUpdateScale() bool {
	log.Println("Calling RemoteTransform.GetUpdateScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_update_scale", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RemoteTransform) GetUseGlobalCoordinates() bool {
	log.Println("Calling RemoteTransform.GetUseGlobalCoordinates()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_use_global_coordinates", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *RemoteTransform) SetRemoteNode(path *NodePath) {
	log.Println("Calling RemoteTransform.SetRemoteNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_remote_node", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RemoteTransform) SetUpdatePosition(updateRemotePosition bool) {
	log.Println("Calling RemoteTransform.SetUpdatePosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(updateRemotePosition)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_update_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RemoteTransform) SetUpdateRotation(updateRemoteRotation bool) {
	log.Println("Calling RemoteTransform.SetUpdateRotation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(updateRemoteRotation)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_update_rotation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RemoteTransform) SetUpdateScale(updateRemoteScale bool) {
	log.Println("Calling RemoteTransform.SetUpdateScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(updateRemoteScale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_update_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *RemoteTransform) SetUseGlobalCoordinates(useGlobalCoordinates bool) {
	log.Println("Calling RemoteTransform.SetUseGlobalCoordinates()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(useGlobalCoordinates)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_use_global_coordinates", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   RemoteTransformImplementer is an interface for RemoteTransform objects.
*/
type RemoteTransformImplementer interface {
	class.Class
}
