//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package animatedsprite

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node2d"
)

/*
   Animations are created using a [SpriteFrames] resource, which can be configured in the editor via the SpriteFrames panel.
*/
type AnimatedSprite struct {
	node2d.Node2D
}

func (o *AnimatedSprite) baseClass() string {
	return "AnimatedSprite"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *AnimatedSprite) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *AnimatedSprite) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *AnimatedSprite) X_IsPlaying() bool {
	log.Println("Calling AnimatedSprite.X_IsPlaying()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_is_playing", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AnimatedSprite) X_ResChanged() {
	log.Println("Calling AnimatedSprite.X_ResChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_res_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AnimatedSprite) X_SetPlaying(playing bool) {
	log.Println("Calling AnimatedSprite.X_SetPlaying()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(playing)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_playing", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the name of the current animation set to the node.
*/
func (o *AnimatedSprite) GetAnimation() string {
	log.Println("Calling AnimatedSprite.GetAnimation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_animation", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the visible frame index.
*/
func (o *AnimatedSprite) GetFrame() int64 {
	log.Println("Calling AnimatedSprite.GetFrame()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_frame", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the offset of the sprite in the node origin.
*/
func (o *AnimatedSprite) GetOffset() *Vector2 {
	log.Println("Calling AnimatedSprite.GetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the [SpriteFrames] resource, which contains all frames.
*/
func (o *AnimatedSprite) GetSpriteFrames() *SpriteFrames {
	log.Println("Calling AnimatedSprite.GetSpriteFrames()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_sprite_frames", goArguments, "*SpriteFrames")

	returnValue := goRet.Interface().(*SpriteFrames)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true when centered. See [method set_centered].
*/
func (o *AnimatedSprite) IsCentered() bool {
	log.Println("Calling AnimatedSprite.IsCentered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_centered", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if sprite is flipped horizontally.
*/
func (o *AnimatedSprite) IsFlippedH() bool {
	log.Println("Calling AnimatedSprite.IsFlippedH()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_flipped_h", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if sprite is flipped vertically.
*/
func (o *AnimatedSprite) IsFlippedV() bool {
	log.Println("Calling AnimatedSprite.IsFlippedV()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_flipped_v", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if an animation if currently being played.
*/
func (o *AnimatedSprite) IsPlaying() bool {
	log.Println("Calling AnimatedSprite.IsPlaying()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_playing", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Play the animation set in parameter. If no parameter is provided, the current animation is played.
*/
func (o *AnimatedSprite) Play(anim string) {
	log.Println("Calling AnimatedSprite.Play()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(anim)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "play", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the current animation of the node and reinits the frame counter of the animation.
*/
func (o *AnimatedSprite) SetAnimation(animation string) {
	log.Println("Calling AnimatedSprite.SetAnimation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(animation)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_animation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   When turned on, offset at (0,0) is the center of the sprite, when off, the top-left corner is.
*/
func (o *AnimatedSprite) SetCentered(centered bool) {
	log.Println("Calling AnimatedSprite.SetCentered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(centered)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_centered", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If true, sprite is flipped horizontally.
*/
func (o *AnimatedSprite) SetFlipH(flipH bool) {
	log.Println("Calling AnimatedSprite.SetFlipH()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flipH)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_flip_h", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If true, sprite is flipped vertically.
*/
func (o *AnimatedSprite) SetFlipV(flipV bool) {
	log.Println("Calling AnimatedSprite.SetFlipV()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flipV)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_flip_v", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the visible sprite frame index (from the list of frames inside the [SpriteFrames] resource).
*/
func (o *AnimatedSprite) SetFrame(frame int64) {
	log.Println("Calling AnimatedSprite.SetFrame()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(frame)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_frame", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the offset of the sprite in the node origin. Position varies depending on whether it is centered or not.
*/
func (o *AnimatedSprite) SetOffset(offset *Vector2) {
	log.Println("Calling AnimatedSprite.SetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the [SpriteFrames] resource, which contains all frames.
*/
func (o *AnimatedSprite) SetSpriteFrames(spriteFrames *SpriteFrames) {
	log.Println("Calling AnimatedSprite.SetSpriteFrames()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(spriteFrames)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_sprite_frames", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Stop the current animation (does not reset the frame counter).
*/
func (o *AnimatedSprite) Stop() {
	log.Println("Calling AnimatedSprite.Stop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "stop", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   AnimatedSpriteImplementer is an interface for AnimatedSprite objects.
*/
type AnimatedSpriteImplementer interface {
	class.Class
}
