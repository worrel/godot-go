//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package visualscriptfunctioncall

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/visualscriptnode"
)

/*

 */
type VisualScriptFunctionCall struct {
	visualscriptnode.VisualScriptNode
}

func (o *VisualScriptFunctionCall) baseClass() string {
	return "VisualScriptFunctionCall"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *VisualScriptFunctionCall) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *VisualScriptFunctionCall) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *VisualScriptFunctionCall) X_GetArgumentCache() *Dictionary {
	log.Println("Calling VisualScriptFunctionCall.X_GetArgumentCache()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_argument_cache", goArguments, "*Dictionary")

	returnValue := goRet.Interface().(*Dictionary)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptFunctionCall) X_SetArgumentCache(argumentCache *Dictionary) {
	log.Println("Calling VisualScriptFunctionCall.X_SetArgumentCache()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(argumentCache)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_argument_cache", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *VisualScriptFunctionCall) GetBasePath() *NodePath {
	log.Println("Calling VisualScriptFunctionCall.GetBasePath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_base_path", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualScriptFunctionCall) GetBaseScript() string {
	log.Println("Calling VisualScriptFunctionCall.GetBaseScript()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_base_script", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualScriptFunctionCall) GetBaseType() string {
	log.Println("Calling VisualScriptFunctionCall.GetBaseType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_base_type", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualScriptFunctionCall) GetBasicType() int64 {
	log.Println("Calling VisualScriptFunctionCall.GetBasicType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_basic_type", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualScriptFunctionCall) GetCallMode() int64 {
	log.Println("Calling VisualScriptFunctionCall.GetCallMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_call_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualScriptFunctionCall) GetFunction() string {
	log.Println("Calling VisualScriptFunctionCall.GetFunction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_function", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualScriptFunctionCall) GetRpcCallMode() int64 {
	log.Println("Calling VisualScriptFunctionCall.GetRpcCallMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_rpc_call_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualScriptFunctionCall) GetSingleton() string {
	log.Println("Calling VisualScriptFunctionCall.GetSingleton()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_singleton", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualScriptFunctionCall) GetUseDefaultArgs() int64 {
	log.Println("Calling VisualScriptFunctionCall.GetUseDefaultArgs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_use_default_args", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualScriptFunctionCall) GetValidate() bool {
	log.Println("Calling VisualScriptFunctionCall.GetValidate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_validate", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualScriptFunctionCall) SetBasePath(basePath *NodePath) {
	log.Println("Calling VisualScriptFunctionCall.SetBasePath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(basePath)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_base_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *VisualScriptFunctionCall) SetBaseScript(baseScript string) {
	log.Println("Calling VisualScriptFunctionCall.SetBaseScript()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(baseScript)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_base_script", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *VisualScriptFunctionCall) SetBaseType(baseType string) {
	log.Println("Calling VisualScriptFunctionCall.SetBaseType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(baseType)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_base_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *VisualScriptFunctionCall) SetBasicType(basicType int64) {
	log.Println("Calling VisualScriptFunctionCall.SetBasicType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(basicType)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_basic_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *VisualScriptFunctionCall) SetCallMode(mode int64) {
	log.Println("Calling VisualScriptFunctionCall.SetCallMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_call_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *VisualScriptFunctionCall) SetFunction(function string) {
	log.Println("Calling VisualScriptFunctionCall.SetFunction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(function)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_function", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *VisualScriptFunctionCall) SetRpcCallMode(mode int64) {
	log.Println("Calling VisualScriptFunctionCall.SetRpcCallMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_rpc_call_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *VisualScriptFunctionCall) SetSingleton(singleton string) {
	log.Println("Calling VisualScriptFunctionCall.SetSingleton()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(singleton)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_singleton", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *VisualScriptFunctionCall) SetUseDefaultArgs(amount int64) {
	log.Println("Calling VisualScriptFunctionCall.SetUseDefaultArgs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_use_default_args", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *VisualScriptFunctionCall) SetValidate(enable bool) {
	log.Println("Calling VisualScriptFunctionCall.SetValidate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_validate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   VisualScriptFunctionCallImplementer is an interface for VisualScriptFunctionCall objects.
*/
type VisualScriptFunctionCallImplementer interface {
	class.Class
}
