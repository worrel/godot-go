//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package light

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/visualinstance"
)

/*
   Light is the abstract base class for light nodes, so it shouldn't be used directly (It can't be instanced). Other types of light nodes inherit from it. Light contains the common variables and parameters used for lighting.
*/
type Light struct {
	visualinstance.VisualInstance
}

func (o *Light) baseClass() string {
	return "Light"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Light) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Light) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *Light) GetColor() *Color {
	log.Println("Calling Light.GetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Light) GetCullMask() int64 {
	log.Println("Calling Light.GetCullMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_cull_mask", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Light) GetParam(param int64) float64 {
	log.Println("Calling Light.GetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_param", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Light) GetShadowColor() *Color {
	log.Println("Calling Light.GetShadowColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shadow_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Light) GetShadowReverseCullFace() bool {
	log.Println("Calling Light.GetShadowReverseCullFace()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_shadow_reverse_cull_face", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Light) HasShadow() bool {
	log.Println("Calling Light.HasShadow()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_shadow", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Light) IsEditorOnly() bool {
	log.Println("Calling Light.IsEditorOnly()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_editor_only", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Light) IsNegative() bool {
	log.Println("Calling Light.IsNegative()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_negative", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Light) SetColor(color *Color) {
	log.Println("Calling Light.SetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Light) SetCullMask(cullMask int64) {
	log.Println("Calling Light.SetCullMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(cullMask)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_cull_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Light) SetEditorOnly(editorOnly bool) {
	log.Println("Calling Light.SetEditorOnly()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(editorOnly)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_editor_only", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Light) SetNegative(enabled bool) {
	log.Println("Calling Light.SetNegative()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_negative", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Light) SetParam(param int64, value float64) {
	log.Println("Calling Light.SetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(param)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Light) SetShadow(enabled bool) {
	log.Println("Calling Light.SetShadow()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shadow", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Light) SetShadowColor(shadowColor *Color) {
	log.Println("Calling Light.SetShadowColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shadowColor)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shadow_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Light) SetShadowReverseCullFace(enable bool) {
	log.Println("Calling Light.SetShadowReverseCullFace()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_shadow_reverse_cull_face", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   LightImplementer is an interface for Light objects.
*/
type LightImplementer interface {
	class.Class
}
