//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package splitcontainer

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/container"
)

/*
   Container for splitting two controls vertically or horizontally, with a grabber that allows adjusting the split offset or ratio.
*/
type SplitContainer struct {
	container.Container
}

func (o *SplitContainer) baseClass() string {
	return "SplitContainer"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *SplitContainer) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *SplitContainer) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *SplitContainer) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling SplitContainer.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return visibility of the split dragger (one of [DRAGGER_VISIBLE], [DRAGGER_HIDDEN] or [DRAGGER_HIDDEN_COLLAPSED]).
*/
func (o *SplitContainer) GetDraggerVisibility() int64 {
	log.Println("Calling SplitContainer.GetDraggerVisibility()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_dragger_visibility", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the split offset.
*/
func (o *SplitContainer) GetSplitOffset() int64 {
	log.Println("Calling SplitContainer.GetSplitOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_split_offset", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if the split is collapsed.
*/
func (o *SplitContainer) IsCollapsed() bool {
	log.Println("Calling SplitContainer.IsCollapsed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_collapsed", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set if the split must be collapsed.
*/
func (o *SplitContainer) SetCollapsed(collapsed bool) {
	log.Println("Calling SplitContainer.SetCollapsed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(collapsed)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_collapsed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set visibility of the split dragger ([i]mode[/i] must be one of [DRAGGER_VISIBLE], [DRAGGER_HIDDEN] or [DRAGGER_HIDDEN_COLLAPSED]).
*/
func (o *SplitContainer) SetDraggerVisibility(mode int64) {
	log.Println("Calling SplitContainer.SetDraggerVisibility()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_dragger_visibility", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the split offset.
*/
func (o *SplitContainer) SetSplitOffset(offset int64) {
	log.Println("Calling SplitContainer.SetSplitOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_split_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SplitContainerImplementer is an interface for SplitContainer objects.
*/
type SplitContainerImplementer interface {
	class.Class
}
