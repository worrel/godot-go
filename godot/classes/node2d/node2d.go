//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package node2d

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/canvasitem"
)

/*
   A 2D game object, with a position, rotation and scale. All 2D physics nodes and sprites inherit from Node2D. Use Node2D as a parent node to move, scale and rotate children in a 2D project. Also gives control on the node's render order.
*/
type Node2D struct {
	canvasitem.CanvasItem
}

func (o *Node2D) baseClass() string {
	return "Node2D"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Node2D) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Node2D) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *Node2D) X_GetRotd() float64 {
	log.Println("Calling Node2D.X_GetRotd()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_rotd", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Node2D) X_SetRotd(degrees float64) {
	log.Println("Calling Node2D.X_SetRotd()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(degrees)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_rotd", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Multiplies the current scale by the 'ratio' vector.
*/
func (o *Node2D) ApplyScale(ratio *Vector2) {
	log.Println("Calling Node2D.ApplyScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ratio)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "apply_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the pivot position of the 2D node to 'pivot' value. Only some Node2Ds implement this method.
*/
func (o *Node2D) EditSetPivot(pivot *Vector2) {
	log.Println("Calling Node2D.EditSetPivot()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pivot)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "edit_set_pivot", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the angle between the node and the 'point' in radians.
*/
func (o *Node2D) GetAngleTo(point *Vector2) float64 {
	log.Println("Calling Node2D.GetAngleTo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(point)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_angle_to", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the node's global position.
*/
func (o *Node2D) GetGlobalPosition() *Vector2 {
	log.Println("Calling Node2D.GetGlobalPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_global_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the node's global rotation in radians.
*/
func (o *Node2D) GetGlobalRotation() float64 {
	log.Println("Calling Node2D.GetGlobalRotation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_global_rotation", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the node's global rotation in degrees.
*/
func (o *Node2D) GetGlobalRotationInDegrees() float64 {
	log.Println("Calling Node2D.GetGlobalRotationInDegrees()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_global_rotation_in_degrees", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the node's global scale.
*/
func (o *Node2D) GetGlobalScale() *Vector2 {
	log.Println("Calling Node2D.GetGlobalScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_global_scale", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the node's position.
*/
func (o *Node2D) GetPosition() *Vector2 {
	log.Println("Calling Node2D.GetPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [Transform2D] relative to this node's parent.
*/
func (o *Node2D) GetRelativeTransformToParent(parent *Object) *Transform2D {
	log.Println("Calling Node2D.GetRelativeTransformToParent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(parent)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_relative_transform_to_parent", goArguments, "*Transform2D")

	returnValue := goRet.Interface().(*Transform2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the node's rotation in radians.
*/
func (o *Node2D) GetRotation() float64 {
	log.Println("Calling Node2D.GetRotation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_rotation", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the node's rotation in degrees.
*/
func (o *Node2D) GetRotationInDegrees() float64 {
	log.Println("Calling Node2D.GetRotationInDegrees()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_rotation_in_degrees", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the node's scale.
*/
func (o *Node2D) GetScale() *Vector2 {
	log.Println("Calling Node2D.GetScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_scale", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the node's Z-index.
*/
func (o *Node2D) GetZ() int64 {
	log.Println("Calling Node2D.GetZ()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_z", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Adds the 'offset' vector to the node's global position.
*/
func (o *Node2D) GlobalTranslate(offset *Vector2) {
	log.Println("Calling Node2D.GlobalTranslate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "global_translate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns true if this node's Z-index is relative to its parent's. Else, returns false.
*/
func (o *Node2D) IsZRelative() bool {
	log.Println("Calling Node2D.IsZRelative()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_z_relative", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Rotates the node so it points towards the 'point'.
*/
func (o *Node2D) LookAt(point *Vector2) {
	log.Println("Calling Node2D.LookAt()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(point)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "look_at", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Apply a local translation on the node's X axis based on the process's 'delta'. If 'scaled' is false, normalizes the movement.
*/
func (o *Node2D) MoveLocalX(delta float64, scaled bool) {
	log.Println("Calling Node2D.MoveLocalX()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(delta)
	goArguments[1] = reflect.ValueOf(scaled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "move_local_x", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Apply a local translation on the node's Y axis based on the process's 'delta'. If 'scaled' is false, normalizes the movement.
*/
func (o *Node2D) MoveLocalY(delta float64, scaled bool) {
	log.Println("Calling Node2D.MoveLocalY()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(delta)
	goArguments[1] = reflect.ValueOf(scaled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "move_local_y", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Apply a rotation to the node, in radians, starting from its current rotation.
*/
func (o *Node2D) Rotate(radians float64) {
	log.Println("Calling Node2D.Rotate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(radians)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "rotate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the node's global position.
*/
func (o *Node2D) SetGlobalPosition(position *Vector2) {
	log.Println("Calling Node2D.SetGlobalPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_global_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the node's global rotation in radians.
*/
func (o *Node2D) SetGlobalRotation(radians float64) {
	log.Println("Calling Node2D.SetGlobalRotation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(radians)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_global_rotation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the node's global rotation in degrees.
*/
func (o *Node2D) SetGlobalRotationInDegrees(degrees float64) {
	log.Println("Calling Node2D.SetGlobalRotationInDegrees()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(degrees)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_global_rotation_in_degrees", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the node's global scale.
*/
func (o *Node2D) SetGlobalScale(scale *Vector2) {
	log.Println("Calling Node2D.SetGlobalScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_global_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the node's global [Transform2D].
*/
func (o *Node2D) SetGlobalTransform(xform *Transform2D) {
	log.Println("Calling Node2D.SetGlobalTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(xform)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_global_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the node's position.
*/
func (o *Node2D) SetPosition(position *Vector2) {
	log.Println("Calling Node2D.SetPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the node's rotation in radians.
*/
func (o *Node2D) SetRotation(radians float64) {
	log.Println("Calling Node2D.SetRotation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(radians)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_rotation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the node's rotation in degrees.
*/
func (o *Node2D) SetRotationInDegrees(degrees float64) {
	log.Println("Calling Node2D.SetRotationInDegrees()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(degrees)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_rotation_in_degrees", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the node's scale.
*/
func (o *Node2D) SetScale(scale *Vector2) {
	log.Println("Calling Node2D.SetScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the node's local [Transform2D].
*/
func (o *Node2D) SetTransform(xform *Transform2D) {
	log.Println("Calling Node2D.SetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(xform)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the node's Z-index.
*/
func (o *Node2D) SetZ(z int64) {
	log.Println("Calling Node2D.SetZ()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(z)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_z", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Make the node's Z-index relative to its parent's Z-index. If this node's Z-index is 2 and its parent's effective Z-index is 3, then this node's effective Z-index will be 2 + 3 = 5.
*/
func (o *Node2D) SetZAsRelative(enable bool) {
	log.Println("Calling Node2D.SetZAsRelative()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_z_as_relative", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Node2D) ToGlobal(localPoint *Vector2) *Vector2 {
	log.Println("Calling Node2D.ToGlobal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(localPoint)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "to_global", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Node2D) ToLocal(globalPoint *Vector2) *Vector2 {
	log.Println("Calling Node2D.ToLocal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(globalPoint)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "to_local", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Translate the node locally by the 'offset' vector, starting from its current local position.
*/
func (o *Node2D) Translate(offset *Vector2) {
	log.Println("Calling Node2D.Translate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "translate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Node2DImplementer is an interface for Node2D objects.
*/
type Node2DImplementer interface {
	class.Class
}
