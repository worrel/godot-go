//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package dynamicfont

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/font"
)

/*
   DynamicFont renders vector font files (such as TTF or OTF) dynamically at runtime instead of using a prerendered texture atlas like [BitmapFont]. This trades the faster loading time of [BitmapFont]\ s for the ability to change font parameters like size and spacing during runtime. [DynamicFontData] is used for referencing the font file paths.
*/
type DynamicFont struct {
	font.Font
}

func (o *DynamicFont) baseClass() string {
	return "DynamicFont"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *DynamicFont) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *DynamicFont) getOwner() *C.godot_object {
	return o.owner
}

/*
   Adds a fallback font.
*/
func (o *DynamicFont) AddFallback(data *DynamicFontData) {
	log.Println("Calling DynamicFont.AddFallback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_fallback", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the fallback font at index [code]idx[/code].
*/
func (o *DynamicFont) GetFallback(idx int64) *DynamicFontData {
	log.Println("Calling DynamicFont.GetFallback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fallback", goArguments, "*DynamicFontData")

	returnValue := goRet.Interface().(*DynamicFontData)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of fallback fonts.
*/
func (o *DynamicFont) GetFallbackCount() int64 {
	log.Println("Calling DynamicFont.GetFallbackCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_fallback_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *DynamicFont) GetFontData() *DynamicFontData {
	log.Println("Calling DynamicFont.GetFontData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_font_data", goArguments, "*DynamicFontData")

	returnValue := goRet.Interface().(*DynamicFontData)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the font size in pixels.
*/
func (o *DynamicFont) GetSize() int64 {
	log.Println("Calling DynamicFont.GetSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_size", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the given type of spacing in pixels. See [code]SPACING_*[/code] constants.
*/
func (o *DynamicFont) GetSpacing(aType int64) int64 {
	log.Println("Calling DynamicFont.GetSpacing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_spacing", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if filtering is used.
*/
func (o *DynamicFont) GetUseFilter() bool {
	log.Println("Calling DynamicFont.GetUseFilter()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_use_filter", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if mipmapping is used.
*/
func (o *DynamicFont) GetUseMipmaps() bool {
	log.Println("Calling DynamicFont.GetUseMipmaps()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_use_mipmaps", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Removes the fallback font at index [code]idx[/code].
*/
func (o *DynamicFont) RemoveFallback(idx int64) {
	log.Println("Calling DynamicFont.RemoveFallback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "remove_fallback", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the fallback font at index [code]idx[/code].
*/
func (o *DynamicFont) SetFallback(idx int64, data *DynamicFontData) {
	log.Println("Calling DynamicFont.SetFallback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_fallback", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the [DynamicFontData].
*/
func (o *DynamicFont) SetFontData(data *DynamicFontData) {
	log.Println("Calling DynamicFont.SetFontData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_font_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the font size.
*/
func (o *DynamicFont) SetSize(data int64) {
	log.Println("Calling DynamicFont.SetSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the spacing of the given type. See [code]SPACING_*[/code] constants.
*/
func (o *DynamicFont) SetSpacing(aType int64, value int64) {
	log.Println("Calling DynamicFont.SetSpacing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(aType)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_spacing", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set to [code]true[/code] to use filtering.
*/
func (o *DynamicFont) SetUseFilter(enable bool) {
	log.Println("Calling DynamicFont.SetUseFilter()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_use_filter", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set to [code]true[/code] to use mipmapping.
*/
func (o *DynamicFont) SetUseMipmaps(enable bool) {
	log.Println("Calling DynamicFont.SetUseMipmaps()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_use_mipmaps", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   DynamicFontImplementer is an interface for DynamicFont objects.
*/
type DynamicFontImplementer interface {
	class.Class
}
