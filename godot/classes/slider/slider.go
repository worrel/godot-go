//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package slider

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/ranges"
)

/*
   Base class for GUI Sliders.
*/
type Slider struct {
	ranges.Range
}

func (o *Slider) baseClass() string {
	return "Slider"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Slider) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Slider) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *Slider) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling Slider.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return amounts of ticks to display on slider.
*/
func (o *Slider) GetTicks() int64 {
	log.Println("Calling Slider.GetTicks()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ticks", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if ticks are visible on borders.
*/
func (o *Slider) GetTicksOnBorders() bool {
	log.Println("Calling Slider.GetTicksOnBorders()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ticks_on_borders", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Slider) IsEditable() bool {
	log.Println("Calling Slider.IsEditable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_editable", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Slider) SetEditable(editable bool) {
	log.Println("Calling Slider.SetEditable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(editable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_editable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set amount of ticks to display in slider.
*/
func (o *Slider) SetTicks(count int64) {
	log.Println("Calling Slider.SetTicks()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(count)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ticks", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set true if ticks are visible on borders.
*/
func (o *Slider) SetTicksOnBorders(ticksOnBorder bool) {
	log.Println("Calling Slider.SetTicksOnBorders()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ticksOnBorder)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ticks_on_borders", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SliderImplementer is an interface for Slider objects.
*/
type SliderImplementer interface {
	class.Class
}
