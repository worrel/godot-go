//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package visualserver

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/object"
)

func newSingletonVisualServer() *visualServer {
	obj := &visualServer{}
	ptr := C.godot_global_get_singleton(C.CString("VisualServer"))
	obj.owner = (*C.godot_object)(ptr)
	return obj
}

/*
   Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display. The visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.
*/
var VisualServer = newSingletonVisualServer()

/*
   Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display. The visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.
*/
type visualServer struct {
	object.Object
}

func (o *visualServer) baseClass() string {
	return "VisualServer"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *visualServer) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *visualServer) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *visualServer) ForceDraw() {
	log.Println("Calling VisualServer.ForceDraw()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "force_draw", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) TextureCreate() *RID {
	log.Println("Calling VisualServer.TextureCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "texture_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) TextureCreateFromImage(image *Image, flags int64) *RID {
	log.Println("Calling VisualServer.TextureCreateFromImage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(image)
	goArguments[1] = reflect.ValueOf(flags)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "texture_create_from_image", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) TextureGetFlags(texture *RID) int64 {
	log.Println("Calling VisualServer.TextureGetFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "texture_get_flags", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) TextureGetHeight(texture *RID) int64 {
	log.Println("Calling VisualServer.TextureGetHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "texture_get_height", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) TextureGetWidth(texture *RID) int64 {
	log.Println("Calling VisualServer.TextureGetWidth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "texture_get_width", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) TextureSetFlags(texture *RID, flags int64) {
	log.Println("Calling VisualServer.TextureSetFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(texture)
	goArguments[1] = reflect.ValueOf(flags)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "texture_set_flags", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) TextureSetShrinkAllX2OnSetData(shrink bool) {
	log.Println("Calling VisualServer.TextureSetShrinkAllX2OnSetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shrink)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "texture_set_shrink_all_x2_on_set_data", goArguments, "")

	log.Println("  Function successfully completed.")

}
