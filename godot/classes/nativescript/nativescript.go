//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package nativescript

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/script"
)

/*
   Undocumented
*/
type NativeScript struct {
	script.Script
}

func (o *NativeScript) baseClass() string {
	return "NativeScript"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *NativeScript) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *NativeScript) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *NativeScript) GetClassName() string {
	log.Println("Calling NativeScript.GetClassName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_class_name", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *NativeScript) GetLibrary() *GDNativeLibrary {
	log.Println("Calling NativeScript.GetLibrary()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_library", goArguments, "*GDNativeLibrary")

	returnValue := goRet.Interface().(*GDNativeLibrary)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *NativeScript) New() *Object {
	log.Println("Calling NativeScript.New()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "new", goArguments, "*Object")

	returnValue := goRet.Interface().(*Object)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *NativeScript) SetClassName(className string) {
	log.Println("Calling NativeScript.SetClassName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(className)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_class_name", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *NativeScript) SetLibrary(library *GDNativeLibrary) {
	log.Println("Calling NativeScript.SetLibrary()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(library)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_library", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   NativeScriptImplementer is an interface for NativeScript objects.
*/
type NativeScriptImplementer interface {
	class.Class
}
