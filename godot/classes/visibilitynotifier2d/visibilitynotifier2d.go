//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package visibilitynotifier2d

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node2d"
)

/*
   The VisibilityNotifier2D detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a viewport.
*/
type VisibilityNotifier2D struct {
	node2d.Node2D
}

func (o *VisibilityNotifier2D) baseClass() string {
	return "VisibilityNotifier2D"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *VisibilityNotifier2D) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *VisibilityNotifier2D) getOwner() *C.godot_object {
	return o.owner
}

/*
   Returns the bounding rectangle of the VisibilityNotifier2D.
*/
func (o *VisibilityNotifier2D) GetRect() *Rect2 {
	log.Println("Calling VisibilityNotifier2D.GetRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_rect", goArguments, "*Rect2")

	returnValue := goRet.Interface().(*Rect2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   If [code]true[/code] the bounding rectangle is on the screen.
*/
func (o *VisibilityNotifier2D) IsOnScreen() bool {
	log.Println("Calling VisibilityNotifier2D.IsOnScreen()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_on_screen", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the visibility bounding rectangle of the VisibilityNotifier2D.
*/
func (o *VisibilityNotifier2D) SetRect(rect *Rect2) {
	log.Println("Calling VisibilityNotifier2D.SetRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rect)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_rect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   VisibilityNotifier2DImplementer is an interface for VisibilityNotifier2D objects.
*/
type VisibilityNotifier2DImplementer interface {
	class.Class
}
