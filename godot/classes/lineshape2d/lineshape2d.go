//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package lineshape2d

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/shape2d"
)

/*
   Line shape for 2D collisions. It works like a 2D plane and will not allow any body to go to the negative side. Not recommended for rigid bodies, and usually not recommended for static bodies either because it forces checks against it on every frame.
*/
type LineShape2D struct {
	shape2d.Shape2D
}

func (o *LineShape2D) baseClass() string {
	return "LineShape2D"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *LineShape2D) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *LineShape2D) getOwner() *C.godot_object {
	return o.owner
}

/*
   Return the line distance from the origin.
*/
func (o *LineShape2D) GetD() float64 {
	log.Println("Calling LineShape2D.GetD()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_d", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the line normal.
*/
func (o *LineShape2D) GetNormal() *Vector2 {
	log.Println("Calling LineShape2D.GetNormal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_normal", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the line distance from the origin.
*/
func (o *LineShape2D) SetD(d float64) {
	log.Println("Calling LineShape2D.SetD()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(d)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_d", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the line normal.
*/
func (o *LineShape2D) SetNormal(normal *Vector2) {
	log.Println("Calling LineShape2D.SetNormal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(normal)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_normal", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   LineShape2DImplementer is an interface for LineShape2D objects.
*/
type LineShape2DImplementer interface {
	class.Class
}
