//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package spinbox

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/ranges"
)

/*
   SpinBox is a numerical input text field. It allows entering integers and floats.
*/
type SpinBox struct {
	ranges.Range
}

func (o *SpinBox) baseClass() string {
	return "SpinBox"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *SpinBox) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *SpinBox) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *SpinBox) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling SpinBox.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SpinBox) X_LineEditFocusExit() {
	log.Println("Calling SpinBox.X_LineEditFocusExit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_line_edit_focus_exit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SpinBox) X_LineEditInput(arg0 *InputEvent) {
	log.Println("Calling SpinBox.X_LineEditInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_line_edit_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SpinBox) X_RangeClickTimeout() {
	log.Println("Calling SpinBox.X_RangeClickTimeout()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_range_click_timeout", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SpinBox) X_TextEntered(arg0 string) {
	log.Println("Calling SpinBox.X_TextEntered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_text_entered", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpinBox) GetLineEdit() *LineEdit {
	log.Println("Calling SpinBox.GetLineEdit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_line_edit", goArguments, "*LineEdit")

	returnValue := goRet.Interface().(*LineEdit)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpinBox) GetPrefix() string {
	log.Println("Calling SpinBox.GetPrefix()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_prefix", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the specific suffix.
*/
func (o *SpinBox) GetSuffix() string {
	log.Println("Calling SpinBox.GetSuffix()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_suffix", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return if the spinbox is editable.
*/
func (o *SpinBox) IsEditable() bool {
	log.Println("Calling SpinBox.IsEditable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_editable", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set whether the spinbox is editable.
*/
func (o *SpinBox) SetEditable(editable bool) {
	log.Println("Calling SpinBox.SetEditable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(editable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_editable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set a prefix.
*/
func (o *SpinBox) SetPrefix(prefix string) {
	log.Println("Calling SpinBox.SetPrefix()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(prefix)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_prefix", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set a specific suffix.
*/
func (o *SpinBox) SetSuffix(suffix string) {
	log.Println("Calling SpinBox.SetSuffix()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(suffix)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_suffix", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SpinBoxImplementer is an interface for SpinBox objects.
*/
type SpinBoxImplementer interface {
	class.Class
}
