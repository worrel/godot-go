//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package packetpeer

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/reference"
)

/*
   PacketPeer is an abstraction and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low level bytes or having to worry about network ordering.
*/
type PacketPeer struct {
	reference.Reference
}

func (o *PacketPeer) baseClass() string {
	return "PacketPeer"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *PacketPeer) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *PacketPeer) getOwner() *C.godot_object {
	return o.owner
}

/*
   Return the number of packets currently available in the ring-buffer.
*/
func (o *PacketPeer) GetAvailablePacketCount() int64 {
	log.Println("Calling PacketPeer.GetAvailablePacketCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_available_packet_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get a raw packet.
*/
func (o *PacketPeer) GetPacket() *PoolByteArray {
	log.Println("Calling PacketPeer.GetPacket()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_packet", goArguments, "*PoolByteArray")

	returnValue := goRet.Interface().(*PoolByteArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the error state of the last packet received (via [method get_packet] and [method get_var]).
*/
func (o *PacketPeer) GetPacketError() int64 {
	log.Println("Calling PacketPeer.GetPacketError()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_packet_error", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get a Variant.
*/
func (o *PacketPeer) GetVar() *Variant {
	log.Println("Calling PacketPeer.GetVar()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_var", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PacketPeer) IsObjectDecodingAllowed() bool {
	log.Println("Calling PacketPeer.IsObjectDecodingAllowed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_object_decoding_allowed", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Send a raw packet.
*/
func (o *PacketPeer) PutPacket(buffer *PoolByteArray) int64 {
	log.Println("Calling PacketPeer.PutPacket()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(buffer)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "put_packet", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Send a Variant as a packet.
*/
func (o *PacketPeer) PutVar(variable *Variant) int64 {
	log.Println("Calling PacketPeer.PutVar()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(variable)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "put_var", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PacketPeer) SetAllowObjectDecoding(enable bool) {
	log.Println("Calling PacketPeer.SetAllowObjectDecoding()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_allow_object_decoding", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   PacketPeerImplementer is an interface for PacketPeer objects.
*/
type PacketPeerImplementer interface {
	class.Class
}
