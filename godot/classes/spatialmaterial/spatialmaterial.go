//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package spatialmaterial

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/material"
)

/*

 */
type SpatialMaterial struct {
	material.Material
}

func (o *SpatialMaterial) baseClass() string {
	return "SpatialMaterial"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *SpatialMaterial) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *SpatialMaterial) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *SpatialMaterial) GetAlbedo() *Color {
	log.Println("Calling SpatialMaterial.GetAlbedo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_albedo", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetAlphaScissorThreshold() float64 {
	log.Println("Calling SpatialMaterial.GetAlphaScissorThreshold()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_alpha_scissor_threshold", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetAnisotropy() float64 {
	log.Println("Calling SpatialMaterial.GetAnisotropy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_anisotropy", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetAoLightAffect() float64 {
	log.Println("Calling SpatialMaterial.GetAoLightAffect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ao_light_affect", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetAoTextureChannel() int64 {
	log.Println("Calling SpatialMaterial.GetAoTextureChannel()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_ao_texture_channel", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetBillboardMode() int64 {
	log.Println("Calling SpatialMaterial.GetBillboardMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_billboard_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetBlendMode() int64 {
	log.Println("Calling SpatialMaterial.GetBlendMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_blend_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetClearcoat() float64 {
	log.Println("Calling SpatialMaterial.GetClearcoat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_clearcoat", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetClearcoatGloss() float64 {
	log.Println("Calling SpatialMaterial.GetClearcoatGloss()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_clearcoat_gloss", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetCullMode() int64 {
	log.Println("Calling SpatialMaterial.GetCullMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_cull_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetDepthDeepParallaxMaxLayers() int64 {
	log.Println("Calling SpatialMaterial.GetDepthDeepParallaxMaxLayers()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_depth_deep_parallax_max_layers", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetDepthDeepParallaxMinLayers() int64 {
	log.Println("Calling SpatialMaterial.GetDepthDeepParallaxMinLayers()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_depth_deep_parallax_min_layers", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetDepthDrawMode() int64 {
	log.Println("Calling SpatialMaterial.GetDepthDrawMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_depth_draw_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetDepthScale() float64 {
	log.Println("Calling SpatialMaterial.GetDepthScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_depth_scale", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetDetailBlendMode() int64 {
	log.Println("Calling SpatialMaterial.GetDetailBlendMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_detail_blend_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetDetailUv() int64 {
	log.Println("Calling SpatialMaterial.GetDetailUv()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_detail_uv", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetDiffuseMode() int64 {
	log.Println("Calling SpatialMaterial.GetDiffuseMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_diffuse_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetDistanceFadeMaxDistance() float64 {
	log.Println("Calling SpatialMaterial.GetDistanceFadeMaxDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_distance_fade_max_distance", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetDistanceFadeMinDistance() float64 {
	log.Println("Calling SpatialMaterial.GetDistanceFadeMinDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_distance_fade_min_distance", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetEmission() *Color {
	log.Println("Calling SpatialMaterial.GetEmission()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_emission", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetEmissionEnergy() float64 {
	log.Println("Calling SpatialMaterial.GetEmissionEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_emission_energy", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetFeature(feature int64) bool {
	log.Println("Calling SpatialMaterial.GetFeature()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(feature)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_feature", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetFlag(flag int64) bool {
	log.Println("Calling SpatialMaterial.GetFlag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flag)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_flag", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetGrow() float64 {
	log.Println("Calling SpatialMaterial.GetGrow()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_grow", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetLineWidth() float64 {
	log.Println("Calling SpatialMaterial.GetLineWidth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_line_width", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetMetallic() float64 {
	log.Println("Calling SpatialMaterial.GetMetallic()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_metallic", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetMetallicTextureChannel() int64 {
	log.Println("Calling SpatialMaterial.GetMetallicTextureChannel()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_metallic_texture_channel", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetNormalScale() float64 {
	log.Println("Calling SpatialMaterial.GetNormalScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_normal_scale", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetParticlesAnimHFrames() int64 {
	log.Println("Calling SpatialMaterial.GetParticlesAnimHFrames()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_particles_anim_h_frames", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetParticlesAnimLoop() int64 {
	log.Println("Calling SpatialMaterial.GetParticlesAnimLoop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_particles_anim_loop", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetParticlesAnimVFrames() int64 {
	log.Println("Calling SpatialMaterial.GetParticlesAnimVFrames()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_particles_anim_v_frames", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetPointSize() float64 {
	log.Println("Calling SpatialMaterial.GetPointSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_point_size", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetProximityFadeDistance() float64 {
	log.Println("Calling SpatialMaterial.GetProximityFadeDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_proximity_fade_distance", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetRefraction() float64 {
	log.Println("Calling SpatialMaterial.GetRefraction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_refraction", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetRefractionTextureChannel() int64 {
	log.Println("Calling SpatialMaterial.GetRefractionTextureChannel()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_refraction_texture_channel", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetRim() float64 {
	log.Println("Calling SpatialMaterial.GetRim()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_rim", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetRimTint() float64 {
	log.Println("Calling SpatialMaterial.GetRimTint()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_rim_tint", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetRoughness() float64 {
	log.Println("Calling SpatialMaterial.GetRoughness()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_roughness", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetRoughnessTextureChannel() int64 {
	log.Println("Calling SpatialMaterial.GetRoughnessTextureChannel()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_roughness_texture_channel", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetSpecular() float64 {
	log.Println("Calling SpatialMaterial.GetSpecular()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_specular", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetSpecularMode() int64 {
	log.Println("Calling SpatialMaterial.GetSpecularMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_specular_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetSubsurfaceScatteringStrength() float64 {
	log.Println("Calling SpatialMaterial.GetSubsurfaceScatteringStrength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_subsurface_scattering_strength", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetTexture(param int64) *Texture {
	log.Println("Calling SpatialMaterial.GetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_texture", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetTransmission() *Color {
	log.Println("Calling SpatialMaterial.GetTransmission()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_transmission", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetUv1Offset() *Vector3 {
	log.Println("Calling SpatialMaterial.GetUv1Offset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_uv1_offset", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetUv1Scale() *Vector3 {
	log.Println("Calling SpatialMaterial.GetUv1Scale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_uv1_scale", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetUv1TriplanarBlendSharpness() float64 {
	log.Println("Calling SpatialMaterial.GetUv1TriplanarBlendSharpness()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_uv1_triplanar_blend_sharpness", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetUv2Offset() *Vector3 {
	log.Println("Calling SpatialMaterial.GetUv2Offset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_uv2_offset", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetUv2Scale() *Vector3 {
	log.Println("Calling SpatialMaterial.GetUv2Scale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_uv2_scale", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) GetUv2TriplanarBlendSharpness() float64 {
	log.Println("Calling SpatialMaterial.GetUv2TriplanarBlendSharpness()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_uv2_triplanar_blend_sharpness", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) IsDepthDeepParallaxEnabled() bool {
	log.Println("Calling SpatialMaterial.IsDepthDeepParallaxEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_depth_deep_parallax_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) IsDistanceFadeEnabled() bool {
	log.Println("Calling SpatialMaterial.IsDistanceFadeEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_distance_fade_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) IsGrowEnabled() bool {
	log.Println("Calling SpatialMaterial.IsGrowEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_grow_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) IsProximityFadeEnabled() bool {
	log.Println("Calling SpatialMaterial.IsProximityFadeEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_proximity_fade_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SpatialMaterial) SetAlbedo(albedo *Color) {
	log.Println("Calling SpatialMaterial.SetAlbedo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(albedo)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_albedo", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetAlphaScissorThreshold(threshold float64) {
	log.Println("Calling SpatialMaterial.SetAlphaScissorThreshold()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(threshold)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_alpha_scissor_threshold", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetAnisotropy(anisotropy float64) {
	log.Println("Calling SpatialMaterial.SetAnisotropy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(anisotropy)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_anisotropy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetAoLightAffect(amount float64) {
	log.Println("Calling SpatialMaterial.SetAoLightAffect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ao_light_affect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetAoTextureChannel(channel int64) {
	log.Println("Calling SpatialMaterial.SetAoTextureChannel()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(channel)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_ao_texture_channel", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetBillboardMode(mode int64) {
	log.Println("Calling SpatialMaterial.SetBillboardMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_billboard_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetBlendMode(blendMode int64) {
	log.Println("Calling SpatialMaterial.SetBlendMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(blendMode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_blend_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetClearcoat(clearcoat float64) {
	log.Println("Calling SpatialMaterial.SetClearcoat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(clearcoat)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_clearcoat", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetClearcoatGloss(clearcoatGloss float64) {
	log.Println("Calling SpatialMaterial.SetClearcoatGloss()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(clearcoatGloss)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_clearcoat_gloss", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetCullMode(cullMode int64) {
	log.Println("Calling SpatialMaterial.SetCullMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(cullMode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_cull_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetDepthDeepParallax(enable bool) {
	log.Println("Calling SpatialMaterial.SetDepthDeepParallax()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_depth_deep_parallax", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetDepthDeepParallaxMaxLayers(layer int64) {
	log.Println("Calling SpatialMaterial.SetDepthDeepParallaxMaxLayers()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(layer)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_depth_deep_parallax_max_layers", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetDepthDeepParallaxMinLayers(layer int64) {
	log.Println("Calling SpatialMaterial.SetDepthDeepParallaxMinLayers()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(layer)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_depth_deep_parallax_min_layers", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetDepthDrawMode(depthDrawMode int64) {
	log.Println("Calling SpatialMaterial.SetDepthDrawMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(depthDrawMode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_depth_draw_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetDepthScale(depthScale float64) {
	log.Println("Calling SpatialMaterial.SetDepthScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(depthScale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_depth_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetDetailBlendMode(detailBlendMode int64) {
	log.Println("Calling SpatialMaterial.SetDetailBlendMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(detailBlendMode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_detail_blend_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetDetailUv(detailUv int64) {
	log.Println("Calling SpatialMaterial.SetDetailUv()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(detailUv)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_detail_uv", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetDiffuseMode(diffuseMode int64) {
	log.Println("Calling SpatialMaterial.SetDiffuseMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(diffuseMode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_diffuse_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetDistanceFade(enabled bool) {
	log.Println("Calling SpatialMaterial.SetDistanceFade()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_distance_fade", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetDistanceFadeMaxDistance(distance float64) {
	log.Println("Calling SpatialMaterial.SetDistanceFadeMaxDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(distance)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_distance_fade_max_distance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetDistanceFadeMinDistance(distance float64) {
	log.Println("Calling SpatialMaterial.SetDistanceFadeMinDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(distance)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_distance_fade_min_distance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetEmission(emission *Color) {
	log.Println("Calling SpatialMaterial.SetEmission()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(emission)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_emission", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetEmissionEnergy(emissionEnergy float64) {
	log.Println("Calling SpatialMaterial.SetEmissionEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(emissionEnergy)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_emission_energy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetFeature(feature int64, enable bool) {
	log.Println("Calling SpatialMaterial.SetFeature()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(feature)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_feature", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetFlag(flag int64, enable bool) {
	log.Println("Calling SpatialMaterial.SetFlag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(flag)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_flag", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetGrow(amount float64) {
	log.Println("Calling SpatialMaterial.SetGrow()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_grow", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetGrowEnabled(enable bool) {
	log.Println("Calling SpatialMaterial.SetGrowEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_grow_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetLineWidth(lineWidth float64) {
	log.Println("Calling SpatialMaterial.SetLineWidth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(lineWidth)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_line_width", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetMetallic(metallic float64) {
	log.Println("Calling SpatialMaterial.SetMetallic()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(metallic)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_metallic", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetMetallicTextureChannel(channel int64) {
	log.Println("Calling SpatialMaterial.SetMetallicTextureChannel()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(channel)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_metallic_texture_channel", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetNormalScale(normalScale float64) {
	log.Println("Calling SpatialMaterial.SetNormalScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(normalScale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_normal_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetParticlesAnimHFrames(frames int64) {
	log.Println("Calling SpatialMaterial.SetParticlesAnimHFrames()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(frames)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_particles_anim_h_frames", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetParticlesAnimLoop(frames int64) {
	log.Println("Calling SpatialMaterial.SetParticlesAnimLoop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(frames)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_particles_anim_loop", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetParticlesAnimVFrames(frames int64) {
	log.Println("Calling SpatialMaterial.SetParticlesAnimVFrames()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(frames)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_particles_anim_v_frames", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetPointSize(pointSize float64) {
	log.Println("Calling SpatialMaterial.SetPointSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pointSize)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_point_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetProximityFade(enabled bool) {
	log.Println("Calling SpatialMaterial.SetProximityFade()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_proximity_fade", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetProximityFadeDistance(distance float64) {
	log.Println("Calling SpatialMaterial.SetProximityFadeDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(distance)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_proximity_fade_distance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetRefraction(refraction float64) {
	log.Println("Calling SpatialMaterial.SetRefraction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(refraction)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_refraction", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetRefractionTextureChannel(channel int64) {
	log.Println("Calling SpatialMaterial.SetRefractionTextureChannel()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(channel)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_refraction_texture_channel", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetRim(rim float64) {
	log.Println("Calling SpatialMaterial.SetRim()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rim)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_rim", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetRimTint(rimTint float64) {
	log.Println("Calling SpatialMaterial.SetRimTint()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rimTint)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_rim_tint", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetRoughness(roughness float64) {
	log.Println("Calling SpatialMaterial.SetRoughness()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(roughness)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_roughness", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetRoughnessTextureChannel(channel int64) {
	log.Println("Calling SpatialMaterial.SetRoughnessTextureChannel()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(channel)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_roughness_texture_channel", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetSpecular(specular float64) {
	log.Println("Calling SpatialMaterial.SetSpecular()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(specular)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_specular", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetSpecularMode(specularMode int64) {
	log.Println("Calling SpatialMaterial.SetSpecularMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(specularMode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_specular_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetSubsurfaceScatteringStrength(strength float64) {
	log.Println("Calling SpatialMaterial.SetSubsurfaceScatteringStrength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(strength)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_subsurface_scattering_strength", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetTexture(param int64, texture *Texture) {
	log.Println("Calling SpatialMaterial.SetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(param)
	goArguments[1] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_texture", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetTransmission(transmission *Color) {
	log.Println("Calling SpatialMaterial.SetTransmission()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(transmission)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_transmission", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetUv1Offset(offset *Vector3) {
	log.Println("Calling SpatialMaterial.SetUv1Offset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_uv1_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetUv1Scale(scale *Vector3) {
	log.Println("Calling SpatialMaterial.SetUv1Scale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_uv1_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetUv1TriplanarBlendSharpness(sharpness float64) {
	log.Println("Calling SpatialMaterial.SetUv1TriplanarBlendSharpness()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(sharpness)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_uv1_triplanar_blend_sharpness", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetUv2Offset(offset *Vector3) {
	log.Println("Calling SpatialMaterial.SetUv2Offset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_uv2_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetUv2Scale(scale *Vector3) {
	log.Println("Calling SpatialMaterial.SetUv2Scale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_uv2_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpatialMaterial) SetUv2TriplanarBlendSharpness(sharpness float64) {
	log.Println("Calling SpatialMaterial.SetUv2TriplanarBlendSharpness()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(sharpness)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_uv2_triplanar_blend_sharpness", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SpatialMaterialImplementer is an interface for SpatialMaterial objects.
*/
type SpatialMaterialImplementer interface {
	class.Class
}
