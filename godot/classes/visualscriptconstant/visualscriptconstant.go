//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package visualscriptconstant

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/visualscriptnode"
)

/*
   This node returns a constant's value. [b]Input Ports:[/b] none [b]Output Ports:[/b] - Data (variant): [code]get[/code]
*/
type VisualScriptConstant struct {
	visualscriptnode.VisualScriptNode
}

func (o *VisualScriptConstant) baseClass() string {
	return "VisualScriptConstant"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *VisualScriptConstant) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *VisualScriptConstant) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *VisualScriptConstant) GetConstantType() int64 {
	log.Println("Calling VisualScriptConstant.GetConstantType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_constant_type", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualScriptConstant) GetConstantValue() *Variant {
	log.Println("Calling VisualScriptConstant.GetConstantValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_constant_value", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualScriptConstant) SetConstantType(aType int64) {
	log.Println("Calling VisualScriptConstant.SetConstantType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_constant_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *VisualScriptConstant) SetConstantValue(value *Variant) {
	log.Println("Calling VisualScriptConstant.SetConstantValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_constant_value", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   VisualScriptConstantImplementer is an interface for VisualScriptConstant objects.
*/
type VisualScriptConstantImplementer interface {
	class.Class
}
