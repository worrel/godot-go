//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package arvrpositionaltracker

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/object"
)

/*
   An instance of this object represents a device that is tracked such as a controller or anchor point. HMDs aren't represented here as they are fully handled internally. As controllers are turned on and the AR/VR interface detects them instances of this object are automatically added to this list of active tracking objects accessible through the ARVRServer The ARVRController and ARVRAnchor both consume objects of this type and should be the objects you use in game. The positional trackers are just the under the hood objects that make this all work and are mostly exposed so GDNative based interfaces can interact with them.
*/
type ARVRPositionalTracker struct {
	object.Object
}

func (o *ARVRPositionalTracker) baseClass() string {
	return "ARVRPositionalTracker"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ARVRPositionalTracker) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *ARVRPositionalTracker) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *ARVRPositionalTracker) X_SetJoyId(joyId int64) {
	log.Println("Calling ARVRPositionalTracker.X_SetJoyId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(joyId)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_joy_id", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ARVRPositionalTracker) X_SetName(name string) {
	log.Println("Calling ARVRPositionalTracker.X_SetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_name", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ARVRPositionalTracker) X_SetOrientation(orientation *Basis) {
	log.Println("Calling ARVRPositionalTracker.X_SetOrientation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(orientation)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_orientation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ARVRPositionalTracker) X_SetRwPosition(rwPosition *Vector3) {
	log.Println("Calling ARVRPositionalTracker.X_SetRwPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rwPosition)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_rw_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ARVRPositionalTracker) X_SetType(aType int64) {
	log.Println("Calling ARVRPositionalTracker.X_SetType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ARVRPositionalTracker) GetHand() int64 {
	log.Println("Calling ARVRPositionalTracker.GetHand()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_hand", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   If this is a controller that is being tracked the controller will also be represented by a joystick entry with this id.
*/
func (o *ARVRPositionalTracker) GetJoyId() int64 {
	log.Println("Calling ARVRPositionalTracker.GetJoyId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_joy_id", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   If available this returns the name of the controller or anchor point.
*/
func (o *ARVRPositionalTracker) GetName() string {
	log.Println("Calling ARVRPositionalTracker.GetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_name", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the orientation matrix of the controller.
*/
func (o *ARVRPositionalTracker) GetOrientation() *Basis {
	log.Println("Calling ARVRPositionalTracker.GetOrientation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_orientation", goArguments, "*Basis")

	returnValue := goRet.Interface().(*Basis)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the position of the controller adjusted by world scale.
*/
func (o *ARVRPositionalTracker) GetPosition() *Vector3 {
	log.Println("Calling ARVRPositionalTracker.GetPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_position", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if the orientation of this device is being tracked.
*/
func (o *ARVRPositionalTracker) GetTracksOrientation() bool {
	log.Println("Calling ARVRPositionalTracker.GetTracksOrientation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tracks_orientation", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if the position of this device is being tracked.
*/
func (o *ARVRPositionalTracker) GetTracksPosition() bool {
	log.Println("Calling ARVRPositionalTracker.GetTracksPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_tracks_position", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the transform combining the orientation and position of this device.
*/
func (o *ARVRPositionalTracker) GetTransform(adjustByReferenceFrame bool) *Transform {
	log.Println("Calling ARVRPositionalTracker.GetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(adjustByReferenceFrame)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_transform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Type of tracker.
*/
func (o *ARVRPositionalTracker) GetType() int64 {
	log.Println("Calling ARVRPositionalTracker.GetType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_type", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   ARVRPositionalTrackerImplementer is an interface for ARVRPositionalTracker objects.
*/
type ARVRPositionalTrackerImplementer interface {
	class.Class
}
