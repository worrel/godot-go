//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package joint

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/spatial"
)

/*
   All 3D joints link two nodes, has a priority, and can decide if the two bodies of the nodes should be able to collide with each other
*/
type Joint struct {
	spatial.Spatial
}

func (o *Joint) baseClass() string {
	return "Joint"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Joint) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Joint) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *Joint) GetExcludeNodesFromCollision() bool {
	log.Println("Calling Joint.GetExcludeNodesFromCollision()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_exclude_nodes_from_collision", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Joint) GetNodeA() *NodePath {
	log.Println("Calling Joint.GetNodeA()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_node_a", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Joint) GetNodeB() *NodePath {
	log.Println("Calling Joint.GetNodeB()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_node_b", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Joint) GetSolverPriority() int64 {
	log.Println("Calling Joint.GetSolverPriority()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_solver_priority", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Joint) SetExcludeNodesFromCollision(enable bool) {
	log.Println("Calling Joint.SetExcludeNodesFromCollision()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_exclude_nodes_from_collision", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Joint) SetNodeA(node *NodePath) {
	log.Println("Calling Joint.SetNodeA()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(node)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_node_a", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Joint) SetNodeB(node *NodePath) {
	log.Println("Calling Joint.SetNodeB()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(node)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_node_b", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Joint) SetSolverPriority(priority int64) {
	log.Println("Calling Joint.SetSolverPriority()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(priority)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_solver_priority", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   JointImplementer is an interface for Joint objects.
*/
type JointImplementer interface {
	class.Class
}
