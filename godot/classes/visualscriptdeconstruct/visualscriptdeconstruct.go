//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package visualscriptdeconstruct

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/visualscriptnode"
)

/*
   A Visual Script node which deconstructs a base type instance into its parts.
*/
type VisualScriptDeconstruct struct {
	visualscriptnode.VisualScriptNode
}

func (o *VisualScriptDeconstruct) baseClass() string {
	return "VisualScriptDeconstruct"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *VisualScriptDeconstruct) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *VisualScriptDeconstruct) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *VisualScriptDeconstruct) X_GetElemCache() *Array {
	log.Println("Calling VisualScriptDeconstruct.X_GetElemCache()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_elem_cache", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptDeconstruct) X_SetElemCache(cache *Array) {
	log.Println("Calling VisualScriptDeconstruct.X_SetElemCache()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(cache)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_set_elem_cache", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *VisualScriptDeconstruct) GetDeconstructType() int64 {
	log.Println("Calling VisualScriptDeconstruct.GetDeconstructType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_deconstruct_type", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualScriptDeconstruct) SetDeconstructType(aType int64) {
	log.Println("Calling VisualScriptDeconstruct.SetDeconstructType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_deconstruct_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   VisualScriptDeconstructImplementer is an interface for VisualScriptDeconstruct objects.
*/
type VisualScriptDeconstructImplementer interface {
	class.Class
}
