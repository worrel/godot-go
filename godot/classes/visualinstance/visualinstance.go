//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package visualinstance

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/spatial"
)

/*

 */
type VisualInstance struct {
	spatial.Spatial
}

func (o *VisualInstance) baseClass() string {
	return "VisualInstance"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *VisualInstance) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *VisualInstance) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *VisualInstance) X_GetVisualInstanceRid() *RID {
	log.Println("Calling VisualInstance.X_GetVisualInstanceRid()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "_get_visual_instance_rid", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualInstance) GetAabb() *Rect3 {
	log.Println("Calling VisualInstance.GetAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_aabb", goArguments, "*Rect3")

	returnValue := goRet.Interface().(*Rect3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualInstance) GetLayerMask() int64 {
	log.Println("Calling VisualInstance.GetLayerMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_layer_mask", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualInstance) GetTransformedAabb() *Rect3 {
	log.Println("Calling VisualInstance.GetTransformedAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_transformed_aabb", goArguments, "*Rect3")

	returnValue := goRet.Interface().(*Rect3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *VisualInstance) SetBase(base *RID) {
	log.Println("Calling VisualInstance.SetBase()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(base)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_base", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *VisualInstance) SetLayerMask(mask int64) {
	log.Println("Calling VisualInstance.SetLayerMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mask)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_layer_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   VisualInstanceImplementer is an interface for VisualInstance objects.
*/
type VisualInstanceImplementer interface {
	class.Class
}
