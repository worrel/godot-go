//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package editorsettings

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/resource"
)

/*
   Object that holds the project-independent editor settings. These settings are generally visible in the Editor Settings menu. Accessing the settings is done by using the regular [Object] API, such as: [codeblock] settings.set(prop,value) settings.get(prop) list_of_settings = settings.get_property_list() [/codeblock]
*/
type EditorSettings struct {
	resource.Resource
}

func (o *EditorSettings) baseClass() string {
	return "EditorSettings"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *EditorSettings) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *EditorSettings) getOwner() *C.godot_object {
	return o.owner
}

/*
   Add a custom property info to a property. The dictionary must contain: name:[String](the name of the property) and type:[int](see TYPE_* in [@Global Scope]), and optionally hint:[int](see PROPERTY_HINT_* in [@Global Scope]), hint_string:[String]. Example: [codeblock] editor_settings.set("category/property_name", 0) var property_info = { "name": "category/property_name", "type": TYPE_INT, "hint": PROPERTY_HINT_ENUM, "hint_string": "one,two,three" } editor_settings.add_property_info(property_info) [/codeblock]
*/
func (o *EditorSettings) AddPropertyInfo(info *Dictionary) {
	log.Println("Calling EditorSettings.AddPropertyInfo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(info)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_property_info", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Erase a given setting (pass full property path).
*/
func (o *EditorSettings) Erase(property string) {
	log.Println("Calling EditorSettings.Erase()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(property)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "erase", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Get the list of favorite directories for this project.
*/
func (o *EditorSettings) GetFavoriteDirs() *PoolStringArray {
	log.Println("Calling EditorSettings.GetFavoriteDirs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_favorite_dirs", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the specific project settings path. Projects all have a unique sub-directory inside the settings path where project specific settings are saved.
*/
func (o *EditorSettings) GetProjectSettingsPath() string {
	log.Println("Calling EditorSettings.GetProjectSettingsPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_project_settings_path", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the list of recently visited folders in the file dialog for this project.
*/
func (o *EditorSettings) GetRecentDirs() *PoolStringArray {
	log.Println("Calling EditorSettings.GetRecentDirs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_recent_dirs", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the global settings path for the engine. Inside this path you can find some standard paths such as: settings/tmp - used for temporary storage of files settings/templates - where export templates are located
*/
func (o *EditorSettings) GetSettingsPath() string {
	log.Println("Calling EditorSettings.GetSettingsPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_settings_path", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorSettings) PropertyCanRevert(name string) bool {
	log.Println("Calling EditorSettings.PropertyCanRevert()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "property_can_revert", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorSettings) PropertyGetRevert(name string) *Variant {
	log.Println("Calling EditorSettings.PropertyGetRevert()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "property_get_revert", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the list of favorite directories for this project.
*/
func (o *EditorSettings) SetFavoriteDirs(dirs *PoolStringArray) {
	log.Println("Calling EditorSettings.SetFavoriteDirs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(dirs)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_favorite_dirs", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorSettings) SetInitialValue(name string, value *Variant) {
	log.Println("Calling EditorSettings.SetInitialValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_initial_value", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the list of recently visited folders in the file dialog for this project.
*/
func (o *EditorSettings) SetRecentDirs(dirs *PoolStringArray) {
	log.Println("Calling EditorSettings.SetRecentDirs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(dirs)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_recent_dirs", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   EditorSettingsImplementer is an interface for EditorSettings objects.
*/
type EditorSettingsImplementer interface {
	class.Class
}
