//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package spheremesh

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/primitivemesh"
)

/*
   Class representing a spherical [PrimitiveMesh].
*/
type SphereMesh struct {
	primitivemesh.PrimitiveMesh
}

func (o *SphereMesh) baseClass() string {
	return "SphereMesh"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *SphereMesh) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *SphereMesh) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *SphereMesh) GetHeight() float64 {
	log.Println("Calling SphereMesh.GetHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_height", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SphereMesh) GetIsHemisphere() bool {
	log.Println("Calling SphereMesh.GetIsHemisphere()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_is_hemisphere", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SphereMesh) GetRadialSegments() int64 {
	log.Println("Calling SphereMesh.GetRadialSegments()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_radial_segments", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SphereMesh) GetRadius() float64 {
	log.Println("Calling SphereMesh.GetRadius()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_radius", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SphereMesh) GetRings() int64 {
	log.Println("Calling SphereMesh.GetRings()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_rings", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SphereMesh) SetHeight(height float64) {
	log.Println("Calling SphereMesh.SetHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(height)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_height", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SphereMesh) SetIsHemisphere(isHemisphere bool) {
	log.Println("Calling SphereMesh.SetIsHemisphere()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(isHemisphere)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_is_hemisphere", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SphereMesh) SetRadialSegments(radialSegments int64) {
	log.Println("Calling SphereMesh.SetRadialSegments()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(radialSegments)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_radial_segments", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SphereMesh) SetRadius(radius float64) {
	log.Println("Calling SphereMesh.SetRadius()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(radius)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_radius", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SphereMesh) SetRings(rings int64) {
	log.Println("Calling SphereMesh.SetRings()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rings)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_rings", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SphereMeshImplementer is an interface for SphereMesh objects.
*/
type SphereMeshImplementer interface {
	class.Class
}
