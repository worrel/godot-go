//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package gdscript

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/script"
)

/*
   A script implemented in the GDScript programming language. The script exends the functionality of all objects that instance it. [method new] creates a new instance of the script. [method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes.
*/
type GDScript struct {
	script.Script
}

func (o *GDScript) baseClass() string {
	return "GDScript"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *GDScript) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *GDScript) getOwner() *C.godot_object {
	return o.owner
}

/*
   Returns byte code for the script source code.
*/
func (o *GDScript) GetAsByteCode() *PoolByteArray {
	log.Println("Calling GDScript.GetAsByteCode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_as_byte_code", goArguments, "*PoolByteArray")

	returnValue := goRet.Interface().(*PoolByteArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a new instance of the script. For example: [codeblock] var MyClass = load("myclass.gd") var instance = MyClass.new() assert(instance.get_script() == MyClass) [/codeblock]
*/
func (o *GDScript) New() *Object {
	log.Println("Calling GDScript.New()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "new", goArguments, "*Object")

	returnValue := goRet.Interface().(*Object)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   GDScriptImplementer is an interface for GDScript objects.
*/
type GDScriptImplementer interface {
	class.Class
}
