//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package staticbody2d

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/physicsbody2d"
)

/*
   Static body for 2D Physics. A StaticBody2D is a body that is not intended to move. It is ideal for implementing objects in the environment, such as walls or platforms. Additionally, a constant linear or angular velocity can be set for the static body, which will affect colliding bodies as if it were moving (for example, a conveyor belt).
*/
type StaticBody2D struct {
	physicsbody2d.PhysicsBody2D
}

func (o *StaticBody2D) baseClass() string {
	return "StaticBody2D"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *StaticBody2D) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *StaticBody2D) getOwner() *C.godot_object {
	return o.owner
}

/*
   Return the body bounciness.
*/
func (o *StaticBody2D) GetBounce() float64 {
	log.Println("Calling StaticBody2D.GetBounce()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_bounce", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the constant angular velocity for the body.
*/
func (o *StaticBody2D) GetConstantAngularVelocity() float64 {
	log.Println("Calling StaticBody2D.GetConstantAngularVelocity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_constant_angular_velocity", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the constant linear velocity for the body.
*/
func (o *StaticBody2D) GetConstantLinearVelocity() *Vector2 {
	log.Println("Calling StaticBody2D.GetConstantLinearVelocity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_constant_linear_velocity", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the body friction.
*/
func (o *StaticBody2D) GetFriction() float64 {
	log.Println("Calling StaticBody2D.GetFriction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_friction", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the body bounciness, from 0 (not bouncy) to 1 (bouncy).
*/
func (o *StaticBody2D) SetBounce(bounce float64) {
	log.Println("Calling StaticBody2D.SetBounce()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bounce)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_bounce", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set a constant angular velocity for the body. This does not rotate the body, but affects other bodies touching it, as if it was rotating.
*/
func (o *StaticBody2D) SetConstantAngularVelocity(vel float64) {
	log.Println("Calling StaticBody2D.SetConstantAngularVelocity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(vel)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_constant_angular_velocity", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set a constant linear velocity for the body. This does not move the body, but affects other bodies touching it, as if it was moving.
*/
func (o *StaticBody2D) SetConstantLinearVelocity(vel *Vector2) {
	log.Println("Calling StaticBody2D.SetConstantLinearVelocity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(vel)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_constant_linear_velocity", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the body friction, from 0 (frictionless) to 1 (full friction).
*/
func (o *StaticBody2D) SetFriction(friction float64) {
	log.Println("Calling StaticBody2D.SetFriction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(friction)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_friction", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   StaticBody2DImplementer is an interface for StaticBody2D objects.
*/
type StaticBody2DImplementer interface {
	class.Class
}
