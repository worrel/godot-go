//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package sprite

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/node2d"
)

/*
   A node that displays a 2D texture. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.
*/
type Sprite struct {
	node2d.Node2D
}

func (o *Sprite) baseClass() string {
	return "Sprite"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Sprite) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Sprite) getOwner() *C.godot_object {
	return o.owner
}

/*
   Return the texture frame for a sprite-sheet, works when vframes or hframes are greater than 1.
*/
func (o *Sprite) GetFrame() int64 {
	log.Println("Calling Sprite.GetFrame()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_frame", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the amount of horizontal frames. See [method set_hframes].
*/
func (o *Sprite) GetHframes() int64 {
	log.Println("Calling Sprite.GetHframes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_hframes", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Sprite) GetNormalMap() *Texture {
	log.Println("Calling Sprite.GetNormalMap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_normal_map", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return sprite draw offset.
*/
func (o *Sprite) GetOffset() *Vector2 {
	log.Println("Calling Sprite.GetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the region rect to read from.
*/
func (o *Sprite) GetRegionRect() *Rect2 {
	log.Println("Calling Sprite.GetRegionRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_region_rect", goArguments, "*Rect2")

	returnValue := goRet.Interface().(*Rect2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the base texture for the sprite.
*/
func (o *Sprite) GetTexture() *Texture {
	log.Println("Calling Sprite.GetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_texture", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the amount of vertical frames. See [method set_vframes].
*/
func (o *Sprite) GetVframes() int64 {
	log.Println("Calling Sprite.GetVframes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vframes", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return if the sprite is centered at the local origin.
*/
func (o *Sprite) IsCentered() bool {
	log.Println("Calling Sprite.IsCentered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_centered", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if the sprite is flipped horizontally.
*/
func (o *Sprite) IsFlippedH() bool {
	log.Println("Calling Sprite.IsFlippedH()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_flipped_h", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if the sprite is flipped vertically.
*/
func (o *Sprite) IsFlippedV() bool {
	log.Println("Calling Sprite.IsFlippedV()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_flipped_v", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return if the sprite reads from a region.
*/
func (o *Sprite) IsRegion() bool {
	log.Println("Calling Sprite.IsRegion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_region", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Sprite) IsRegionFilterClipEnabled() bool {
	log.Println("Calling Sprite.IsRegionFilterClipEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_region_filter_clip_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set whether the sprite should be centered on the origin.
*/
func (o *Sprite) SetCentered(centered bool) {
	log.Println("Calling Sprite.SetCentered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(centered)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_centered", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set true to flip the sprite horizontally.
*/
func (o *Sprite) SetFlipH(flipH bool) {
	log.Println("Calling Sprite.SetFlipH()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flipH)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_flip_h", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set true to flip the sprite vertically.
*/
func (o *Sprite) SetFlipV(flipV bool) {
	log.Println("Calling Sprite.SetFlipV()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flipV)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_flip_v", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the texture frame for a sprite-sheet, works when vframes or hframes are greater than 1.
*/
func (o *Sprite) SetFrame(frame int64) {
	log.Println("Calling Sprite.SetFrame()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(frame)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_frame", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the amount of horizontal frames and converts the sprite into a sprite-sheet. This is useful for animation.
*/
func (o *Sprite) SetHframes(hframes int64) {
	log.Println("Calling Sprite.SetHframes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(hframes)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_hframes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Sprite) SetNormalMap(normalMap *Texture) {
	log.Println("Calling Sprite.SetNormalMap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(normalMap)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_normal_map", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the sprite draw offset, useful for setting rotation pivots.
*/
func (o *Sprite) SetOffset(offset *Vector2) {
	log.Println("Calling Sprite.SetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the sprite as a sub-region of a bigger texture. Useful for texture-atlases.
*/
func (o *Sprite) SetRegion(enabled bool) {
	log.Println("Calling Sprite.SetRegion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_region", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Sprite) SetRegionFilterClip(enabled bool) {
	log.Println("Calling Sprite.SetRegionFilterClip()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_region_filter_clip", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the region rect to read from.
*/
func (o *Sprite) SetRegionRect(rect *Rect2) {
	log.Println("Calling Sprite.SetRegionRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rect)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_region_rect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the base texture for the sprite.
*/
func (o *Sprite) SetTexture(texture *Texture) {
	log.Println("Calling Sprite.SetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_texture", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the amount of vertical frames and converts the sprite into a sprite-sheet. This is useful for animation.
*/
func (o *Sprite) SetVframes(vframes int64) {
	log.Println("Calling Sprite.SetVframes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(vframes)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_vframes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SpriteImplementer is an interface for Sprite objects.
*/
type SpriteImplementer interface {
	class.Class
}
