//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package editorfiledialog

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/confirmationdialog"
)

/*

 */
type EditorFileDialog struct {
	confirmationdialog.ConfirmationDialog
}

func (o *EditorFileDialog) baseClass() string {
	return "EditorFileDialog"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *EditorFileDialog) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *EditorFileDialog) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_ActionPressed() {
	log.Println("Calling EditorFileDialog.X_ActionPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_action_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_CancelPressed() {
	log.Println("Calling EditorFileDialog.X_CancelPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_cancel_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_DirEntered(arg0 string) {
	log.Println("Calling EditorFileDialog.X_DirEntered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_dir_entered", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_FavoriteMoveDown() {
	log.Println("Calling EditorFileDialog.X_FavoriteMoveDown()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_favorite_move_down", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_FavoriteMoveUp() {
	log.Println("Calling EditorFileDialog.X_FavoriteMoveUp()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_favorite_move_up", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_FavoriteSelected(arg0 int64) {
	log.Println("Calling EditorFileDialog.X_FavoriteSelected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_favorite_selected", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_FavoriteToggled(arg0 bool) {
	log.Println("Calling EditorFileDialog.X_FavoriteToggled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_favorite_toggled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_FileEntered(arg0 string) {
	log.Println("Calling EditorFileDialog.X_FileEntered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_file_entered", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_FilterSelected(arg0 int64) {
	log.Println("Calling EditorFileDialog.X_FilterSelected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_filter_selected", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_GoBack() {
	log.Println("Calling EditorFileDialog.X_GoBack()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_go_back", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_GoForward() {
	log.Println("Calling EditorFileDialog.X_GoForward()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_go_forward", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_GoUp() {
	log.Println("Calling EditorFileDialog.X_GoUp()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_go_up", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_ItemDbSelected(arg0 int64) {
	log.Println("Calling EditorFileDialog.X_ItemDbSelected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_item_db_selected", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_ItemSelected(arg0 int64) {
	log.Println("Calling EditorFileDialog.X_ItemSelected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_item_selected", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_MakeDir() {
	log.Println("Calling EditorFileDialog.X_MakeDir()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_make_dir", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_MakeDirConfirm() {
	log.Println("Calling EditorFileDialog.X_MakeDirConfirm()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_make_dir_confirm", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_RecentSelected(arg0 int64) {
	log.Println("Calling EditorFileDialog.X_RecentSelected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_recent_selected", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_SaveConfirmPressed() {
	log.Println("Calling EditorFileDialog.X_SaveConfirmPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_save_confirm_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_SelectDrive(arg0 int64) {
	log.Println("Calling EditorFileDialog.X_SelectDrive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_select_drive", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_ThumbnailDone(arg0 string, arg1 *Texture, arg2 *Variant) {
	log.Println("Calling EditorFileDialog.X_ThumbnailDone()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(arg0)
	goArguments[1] = reflect.ValueOf(arg1)
	goArguments[2] = reflect.ValueOf(arg2)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_thumbnail_done", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_ThumbnailResult(arg0 string, arg1 *Texture, arg2 *Variant) {
	log.Println("Calling EditorFileDialog.X_ThumbnailResult()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(arg0)
	goArguments[1] = reflect.ValueOf(arg1)
	goArguments[2] = reflect.ValueOf(arg2)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_thumbnail_result", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_UnhandledInput(arg0 *InputEvent) {
	log.Println("Calling EditorFileDialog.X_UnhandledInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_unhandled_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_UpdateDir() {
	log.Println("Calling EditorFileDialog.X_UpdateDir()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_update_dir", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *EditorFileDialog) X_UpdateFileList() {
	log.Println("Calling EditorFileDialog.X_UpdateFileList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_update_file_list", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorFileDialog) AddFilter(filter string) {
	log.Println("Calling EditorFileDialog.AddFilter()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(filter)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "add_filter", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorFileDialog) ClearFilters() {
	log.Println("Calling EditorFileDialog.ClearFilters()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "clear_filters", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorFileDialog) GetAccess() int64 {
	log.Println("Calling EditorFileDialog.GetAccess()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_access", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileDialog) GetCurrentDir() string {
	log.Println("Calling EditorFileDialog.GetCurrentDir()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_current_dir", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileDialog) GetCurrentFile() string {
	log.Println("Calling EditorFileDialog.GetCurrentFile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_current_file", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileDialog) GetCurrentPath() string {
	log.Println("Calling EditorFileDialog.GetCurrentPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_current_path", goArguments, "string")

	returnValue := goRet.Interface().(string)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileDialog) GetDisplayMode() int64 {
	log.Println("Calling EditorFileDialog.GetDisplayMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_display_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileDialog) GetMode() int64 {
	log.Println("Calling EditorFileDialog.GetMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_mode", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileDialog) GetVbox() *VBoxContainer {
	log.Println("Calling EditorFileDialog.GetVbox()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_vbox", goArguments, "*VBoxContainer")

	returnValue := goRet.Interface().(*VBoxContainer)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileDialog) Invalidate() {
	log.Println("Calling EditorFileDialog.Invalidate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "invalidate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorFileDialog) IsOverwriteWarningDisabled() bool {
	log.Println("Calling EditorFileDialog.IsOverwriteWarningDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_overwrite_warning_disabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileDialog) IsShowingHiddenFiles() bool {
	log.Println("Calling EditorFileDialog.IsShowingHiddenFiles()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_showing_hidden_files", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorFileDialog) SetAccess(access int64) {
	log.Println("Calling EditorFileDialog.SetAccess()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(access)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_access", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorFileDialog) SetCurrentDir(dir string) {
	log.Println("Calling EditorFileDialog.SetCurrentDir()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(dir)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_current_dir", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorFileDialog) SetCurrentFile(file string) {
	log.Println("Calling EditorFileDialog.SetCurrentFile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(file)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_current_file", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorFileDialog) SetCurrentPath(path string) {
	log.Println("Calling EditorFileDialog.SetCurrentPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_current_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorFileDialog) SetDisableOverwriteWarning(disable bool) {
	log.Println("Calling EditorFileDialog.SetDisableOverwriteWarning()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(disable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_disable_overwrite_warning", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorFileDialog) SetDisplayMode(mode int64) {
	log.Println("Calling EditorFileDialog.SetDisplayMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_display_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorFileDialog) SetMode(mode int64) {
	log.Println("Calling EditorFileDialog.SetMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorFileDialog) SetShowHiddenFiles(show bool) {
	log.Println("Calling EditorFileDialog.SetShowHiddenFiles()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(show)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_show_hidden_files", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   EditorFileDialogImplementer is an interface for EditorFileDialog objects.
*/
type EditorFileDialogImplementer interface {
	class.Class
}
