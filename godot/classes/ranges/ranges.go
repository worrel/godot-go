//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package ranges

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/control"
)

/*
   Range is a base class for [Control] nodes that change a floating point [i]value[/i] between a [i]minimum[/i] and a [i]maximum[/i], using [i]step[/i] and [i]page[/i], for example a [ScrollBar].
*/
type Range struct {
	control.Control
}

func (o *Range) baseClass() string {
	return "Range"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *Range) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *Range) getOwner() *C.godot_object {
	return o.owner
}

/*
   Return value mapped to 0 to 1 range.
*/
func (o *Range) GetAsRatio() float64 {
	log.Println("Calling Range.GetAsRatio()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_as_ratio", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the maximum value.
*/
func (o *Range) GetMax() float64 {
	log.Println("Calling Range.GetMax()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_max", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the minimum value.
*/
func (o *Range) GetMin() float64 {
	log.Println("Calling Range.GetMin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_min", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the page size, if page is 0, paging is disabled.
*/
func (o *Range) GetPage() float64 {
	log.Println("Calling Range.GetPage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_page", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the stepping, if step is 0, stepping is disabled.
*/
func (o *Range) GetStep() float64 {
	log.Println("Calling Range.GetStep()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_step", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Range) GetValue() float64 {
	log.Println("Calling Range.GetValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_value", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Range) IsRatioExp() bool {
	log.Println("Calling Range.IsRatioExp()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_ratio_exp", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Range) IsUsingRoundedValues() bool {
	log.Println("Calling Range.IsUsingRoundedValues()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_using_rounded_values", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set value mapped to 0 to 1 (unit) range, it will then be converted to the actual value within min and max.
*/
func (o *Range) SetAsRatio(value float64) {
	log.Println("Calling Range.SetAsRatio()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_as_ratio", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Range) SetExpRatio(enabled bool) {
	log.Println("Calling Range.SetExpRatio()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_exp_ratio", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Range) SetMax(maximum float64) {
	log.Println("Calling Range.SetMax()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(maximum)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_max", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set minimum value, clamped range value to it if it's less.
*/
func (o *Range) SetMin(minimum float64) {
	log.Println("Calling Range.SetMin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(minimum)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_min", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set page size. Page is mainly used for scrollbars or anything that controls text scrolling.
*/
func (o *Range) SetPage(pagesize float64) {
	log.Println("Calling Range.SetPage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pagesize)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_page", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set step value. If step is 0, stepping will be disabled.
*/
func (o *Range) SetStep(step float64) {
	log.Println("Calling Range.SetStep()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(step)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_step", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Range) SetUseRoundedValues(enabled bool) {
	log.Println("Calling Range.SetUseRoundedValues()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_use_rounded_values", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Range) SetValue(value float64) {
	log.Println("Calling Range.SetValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_value", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Binds two Ranges together along with any Ranges previously grouped with either of them. When any of Range's member variables change, it will share the new value with all other Ranges in its group.
*/
func (o *Range) Share(with *Object) {
	log.Println("Calling Range.Share()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(with)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "share", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Stop Range from sharing its member variables with any other Range.
*/
func (o *Range) Unshare() {
	log.Println("Calling Range.Unshare()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "unshare", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   RangeImplementer is an interface for Range objects.
*/
type RangeImplementer interface {
	class.Class
}
