//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package interpolatedcamera

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/camera"
)

/*

 */
type InterpolatedCamera struct {
	camera.Camera
}

func (o *InterpolatedCamera) baseClass() string {
	return "InterpolatedCamera"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *InterpolatedCamera) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *InterpolatedCamera) getOwner() *C.godot_object {
	return o.owner
}

/*

 */
func (o *InterpolatedCamera) GetSpeed() float64 {
	log.Println("Calling InterpolatedCamera.GetSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_speed", goArguments, "float64")

	returnValue := goRet.Interface().(float64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InterpolatedCamera) GetTargetPath() *NodePath {
	log.Println("Calling InterpolatedCamera.GetTargetPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_target_path", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InterpolatedCamera) IsInterpolationEnabled() bool {
	log.Println("Calling InterpolatedCamera.IsInterpolationEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_interpolation_enabled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InterpolatedCamera) SetInterpolationEnabled(targetPath bool) {
	log.Println("Calling InterpolatedCamera.SetInterpolationEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(targetPath)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_interpolation_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *InterpolatedCamera) SetSpeed(speed float64) {
	log.Println("Calling InterpolatedCamera.SetSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(speed)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_speed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *InterpolatedCamera) SetTarget(target *Object) {
	log.Println("Calling InterpolatedCamera.SetTarget()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(target)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_target", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *InterpolatedCamera) SetTargetPath(targetPath *NodePath) {
	log.Println("Calling InterpolatedCamera.SetTargetPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(targetPath)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_target_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   InterpolatedCameraImplementer is an interface for InterpolatedCamera objects.
*/
type InterpolatedCameraImplementer interface {
	class.Class
}
