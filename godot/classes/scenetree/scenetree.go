//------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "templates/*.go.template" so they can be included in the generated
//   code.
//------------------------------------------------------------------------------

package scenetree

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"github.com/shadowapex/godot-go/godot/classes/class"
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/godot/classes/mainloop"
)

/*

 */
type SceneTree struct {
	mainloop.MainLoop
}

func (o *SceneTree) baseClass() string {
	return "SceneTree"
}

// SetOwner will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *SceneTree) setOwner(object *C.godot_object) {
	o.owner = object
}

func (o *SceneTree) getOwner() *C.godot_object {
	return o.owner
}

/*
   Undocumented
*/
func (o *SceneTree) X_ChangeScene(arg0 *Object) {
	log.Println("Calling SceneTree.X_ChangeScene()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_change_scene", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SceneTree) X_ConnectedToServer() {
	log.Println("Calling SceneTree.X_ConnectedToServer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_connected_to_server", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SceneTree) X_ConnectionFailed() {
	log.Println("Calling SceneTree.X_ConnectionFailed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_connection_failed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SceneTree) X_NetworkPeerConnected(arg0 int64) {
	log.Println("Calling SceneTree.X_NetworkPeerConnected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_network_peer_connected", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SceneTree) X_NetworkPeerDisconnected(arg0 int64) {
	log.Println("Calling SceneTree.X_NetworkPeerDisconnected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_network_peer_disconnected", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SceneTree) X_ServerDisconnected() {
	log.Println("Calling SceneTree.X_ServerDisconnected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "_server_disconnected", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SceneTree) CallGroup(group string, method string) *Variant {
	log.Println("Calling SceneTree.CallGroup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(group)
	goArguments[1] = reflect.ValueOf(method)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "call_group", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) CallGroupFlags(flags int64, group string, method string) *Variant {
	log.Println("Calling SceneTree.CallGroupFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(flags)
	goArguments[1] = reflect.ValueOf(group)
	goArguments[2] = reflect.ValueOf(method)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "call_group_flags", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) ChangeScene(path string) int64 {
	log.Println("Calling SceneTree.ChangeScene()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "change_scene", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) ChangeSceneTo(packedScene *PackedScene) int64 {
	log.Println("Calling SceneTree.ChangeSceneTo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(packedScene)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "change_scene_to", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) CreateTimer(timeSec float64, pauseModeProcess bool) *SceneTreeTimer {
	log.Println("Calling SceneTree.CreateTimer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(timeSec)
	goArguments[1] = reflect.ValueOf(pauseModeProcess)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "create_timer", goArguments, "*SceneTreeTimer")

	returnValue := goRet.Interface().(*SceneTreeTimer)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) GetCurrentScene() *Node {
	log.Println("Calling SceneTree.GetCurrentScene()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_current_scene", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) GetEditedSceneRoot() *Node {
	log.Println("Calling SceneTree.GetEditedSceneRoot()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_edited_scene_root", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) GetFrame() int64 {
	log.Println("Calling SceneTree.GetFrame()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_frame", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) GetNetworkConnectedPeers() *PoolIntArray {
	log.Println("Calling SceneTree.GetNetworkConnectedPeers()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_network_connected_peers", goArguments, "*PoolIntArray")

	returnValue := goRet.Interface().(*PoolIntArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) GetNetworkUniqueId() int64 {
	log.Println("Calling SceneTree.GetNetworkUniqueId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_network_unique_id", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) GetNodeCount() int64 {
	log.Println("Calling SceneTree.GetNodeCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_node_count", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) GetNodesInGroup(group string) *Array {
	log.Println("Calling SceneTree.GetNodesInGroup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(group)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_nodes_in_group", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) GetRoot() *Viewport {
	log.Println("Calling SceneTree.GetRoot()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_root", goArguments, "*Viewport")

	returnValue := goRet.Interface().(*Viewport)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) GetRpcSenderId() int64 {
	log.Println("Calling SceneTree.GetRpcSenderId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "get_rpc_sender_id", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) HasGroup(name string) bool {
	log.Println("Calling SceneTree.HasGroup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_group", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if there is a [NetworkedMultiplayerPeer] set (with [method SceneTree.set_network_peer]).
*/
func (o *SceneTree) HasNetworkPeer() bool {
	log.Println("Calling SceneTree.HasNetworkPeer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "has_network_peer", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) IsDebuggingCollisionsHint() bool {
	log.Println("Calling SceneTree.IsDebuggingCollisionsHint()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_debugging_collisions_hint", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) IsDebuggingNavigationHint() bool {
	log.Println("Calling SceneTree.IsDebuggingNavigationHint()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_debugging_navigation_hint", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) IsInputHandled() bool {
	log.Println("Calling SceneTree.IsInputHandled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_input_handled", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if this SceneTree's [NetworkedMultiplayerPeer] is in server mode (listening for connections).
*/
func (o *SceneTree) IsNetworkServer() bool {
	log.Println("Calling SceneTree.IsNetworkServer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_network_server", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) IsPaused() bool {
	log.Println("Calling SceneTree.IsPaused()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_paused", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) IsRefusingNewNetworkConnections() bool {
	log.Println("Calling SceneTree.IsRefusingNewNetworkConnections()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "is_refusing_new_network_connections", goArguments, "bool")

	returnValue := goRet.Interface().(bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) NotifyGroup(group string, notification int64) {
	log.Println("Calling SceneTree.NotifyGroup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(group)
	goArguments[1] = reflect.ValueOf(notification)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "notify_group", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SceneTree) NotifyGroupFlags(callFlags int64, group string, notification int64) {
	log.Println("Calling SceneTree.NotifyGroupFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(callFlags)
	goArguments[1] = reflect.ValueOf(group)
	goArguments[2] = reflect.ValueOf(notification)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "notify_group_flags", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SceneTree) QueueDelete(obj *Object) {
	log.Println("Calling SceneTree.QueueDelete()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(obj)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "queue_delete", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SceneTree) Quit() {
	log.Println("Calling SceneTree.Quit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "quit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SceneTree) ReloadCurrentScene() int64 {
	log.Println("Calling SceneTree.ReloadCurrentScene()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := class.CallParentMethod(o, o.baseClass(), "reload_current_scene", goArguments, "int64")

	returnValue := goRet.Interface().(int64)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneTree) SetAutoAcceptQuit(enabled bool) {
	log.Println("Calling SceneTree.SetAutoAcceptQuit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_auto_accept_quit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SceneTree) SetCurrentScene(childNode *Object) {
	log.Println("Calling SceneTree.SetCurrentScene()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(childNode)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_current_scene", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SceneTree) SetDebugCollisionsHint(enable bool) {
	log.Println("Calling SceneTree.SetDebugCollisionsHint()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_debug_collisions_hint", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SceneTree) SetDebugNavigationHint(enable bool) {
	log.Println("Calling SceneTree.SetDebugNavigationHint()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_debug_navigation_hint", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SceneTree) SetEditedSceneRoot(scene *Object) {
	log.Println("Calling SceneTree.SetEditedSceneRoot()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(scene)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_edited_scene_root", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SceneTree) SetGroup(group string, property string, value *Variant) {
	log.Println("Calling SceneTree.SetGroup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(group)
	goArguments[1] = reflect.ValueOf(property)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_group", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SceneTree) SetGroupFlags(callFlags int64, group string, property string, value *Variant) {
	log.Println("Calling SceneTree.SetGroupFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(callFlags)
	goArguments[1] = reflect.ValueOf(group)
	goArguments[2] = reflect.ValueOf(property)
	goArguments[3] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_group_flags", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SceneTree) SetInputAsHandled() {
	log.Println("Calling SceneTree.SetInputAsHandled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_input_as_handled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the peer object to handle the RPC system (effectively enabling networking). Depending on the peer itself, the SceneTree will become a network server (check with [method is_network_server()]) and will set root node's network mode to master (see NETWORK_MODE_* constants in [Node]), or it will become a regular peer with root node set to slave. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to SceneTree's signals.
*/
func (o *SceneTree) SetNetworkPeer(peer *NetworkedMultiplayerPeer) {
	log.Println("Calling SceneTree.SetNetworkPeer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(peer)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_network_peer", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SceneTree) SetPause(enable bool) {
	log.Println("Calling SceneTree.SetPause()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_pause", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SceneTree) SetRefuseNewNetworkConnections(refuse bool) {
	log.Println("Calling SceneTree.SetRefuseNewNetworkConnections()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(refuse)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_refuse_new_network_connections", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SceneTree) SetScreenStretch(mode int64, aspect int64, minsize *Vector2, shrink int64) {
	log.Println("Calling SceneTree.SetScreenStretch()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(mode)
	goArguments[1] = reflect.ValueOf(aspect)
	goArguments[2] = reflect.ValueOf(minsize)
	goArguments[3] = reflect.ValueOf(shrink)

	// Call the parent method.

	o.callParentMethod(o.baseClass(), "set_screen_stretch", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SceneTreeImplementer is an interface for SceneTree objects.
*/
type SceneTreeImplementer interface {
	class.Class
}
