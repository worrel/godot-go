package godot

{{ $view := . -}}
{{ $view.Header }}

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>

void **build_array(int length);
void **build_array(int length) {
	void *ptr;
	void **arr = malloc(sizeof(void *) * length);
	for (int i = 0; i < length; i++) {
	    arr[i] = ptr;
	}

	return arr;
}

void add_element(void**, void*, int);
void add_element(void **array, void *element, int index) {
	printf("CGO: Array %p %p %p %p %p\n", &array, array, &array[index], *array, array[index]);
    array[index] = element;
	printf("CGO: Index %i %p\n", index, element);
	printf("CGO: Array %p %p %p %p %p\n", &array, array, &array[index], *array, array[index]);
}
*/
import "C"

import (
    "log"
	"reflect"
	"unsafe"
)

// Class is an interface for any objects that can have Godot
// inheritance.
type Class interface {
	baseClass() string
	setOwner(object *C.godot_object)
	getOwner() *C.godot_object
}

{{ range $i, $class := $view.APIs -}}
    {{ if $view.IsValidClass $class.Name $class.BaseClass -}}
        {{ if $class.Singleton -}}
            func newSingleton{{ $view.GoClassName $class.Name }}() *{{ $view.SetClassName $class.Name $class.Singleton}} {
                obj := &{{ $view.SetClassName $class.Name $class.Singleton }}{}
                ptr := C.godot_global_get_singleton(C.CString("{{ $class.Name }}"))
                obj.owner = (*C.godot_object)(ptr)
                return obj
            }
            /*
            {{ $view.ClassDoc $class.Name }}
            */
            var {{ $view.GoClassName $class.Name }} = newSingleton{{ $view.GoClassName $class.Name }}()
        {{ end }}
        /*
        {{ $view.ClassDoc $class.Name }}
        */
        type {{ $view.SetClassName $class.Name $class.Singleton }} struct {
            {{ $view.SetBaseClassName $class.BaseClass }}
            {{ if eq $class.Name "Object" }}
                owner *C.godot_object
            {{ end }}
        }

        func (o *{{ $view.SetClassName $class.Name $class.Singleton }}) baseClass() string {
            return "{{ $class.Name }}"
        }

        {{ if $class.Methods }}
            {{ range $j, $method := $class.Methods }}
                /*
                {{ $view.MethodDoc $class.Name $method.Name }}
                */
                func (o *{{ $view.SetClassName $class.Name $class.Singleton }}) {{ $view.GoMethodName $method.Name }}({{ range $k, $arg := $method.Arguments }}{{ $view.GoArgName $arg.Name }} {{ $view.GoValue $arg.Type }},{{ end }}) {{ if $method.ReturnType }}{{ $view.GoValue $method.ReturnType }}{{ end }} {
                    log.Println("Calling {{ $class.Name }}.{{ $view.GoMethodName $method.Name }}()")

                    // Build out the method's arguments
                    goArguments := make([]reflect.Value, {{ len $method.Arguments }}, {{ len $method.Arguments }})
                    {{ range $k, $arg := $method.Arguments -}}
                        goArguments[{{ $k }}] = reflect.ValueOf({{ $view.GoArgName $arg.Name }})
                    {{ end }}

                    // Call the parent method.
                    {{ if $method.ReturnType }}
                        {{ $returnType := $view.GoValue $method.ReturnType }}{{ if ne $returnType "" }}
                            goRet := o.callParentMethod(o.baseClass(), "{{ $method.Name }}", goArguments, "{{ if $method.ReturnType }}{{ $view.GoValue $method.ReturnType }}{{ end }}")
                        {{ else }}
                            o.callParentMethod(o.baseClass(), "{{ $method.Name }}", goArguments, "{{ if $method.ReturnType }}{{ $view.GoValue $method.ReturnType }}{{ end }}")
                        {{ end }}
                    {{ end -}}
                    {{ if $method.ReturnType }}
                        {{ $returnType := $view.GoValue $method.ReturnType }}{{ if ne $returnType "" }}
                            returnValue := goRet.Interface().({{ $view.GoValue $method.ReturnType }})

                            log.Println("  Got return value: ", returnValue)
                            return returnValue
                    {{else}}
                        log.Println("  Function successfully completed.")
                        {{ end }}
                    {{ end }}
                }
            {{ end }}
        {{ end }}

        {{ if eq $class.Name "Object" }}
            // SetOwner will internally set the Godot object inside the struct.
            // This is used to call parent methods.
            func (o *Object) setOwner(object *C.godot_object) {
                o.owner = object
            }
            
            func (o *Object) getOwner() *C.godot_object {
                return o.owner
            }

            // callParentMethod will call this object's method with the given method name.
            func (o *Object) callParentMethod(baseClass, methodName string, args []reflect.Value, returns string) reflect.Value {
            	log.Println("Calling parent method!")
            
            	// Convert the base class and method names to C strings.
            	log.Println("  Using base class: ", baseClass)
            	classCString := C.CString(baseClass)
            	log.Println("  Using method name: ", methodName)
            	methodCString := C.CString(methodName)
            
                // Get the Godot objects owner so we can pass it to godot_method_bind_ptrcall.
            	log.Println("  Using godot object owner:", o.getOwner())
                objectOwner := unsafe.Pointer(o.getOwner())

            	// Get the Godot method bind pointer so we can pass it to godot_method_bind_ptrcall.
            	var methodBind *C.godot_method_bind
            	methodBind = C.godot_method_bind_get_method(classCString, methodCString)
            	log.Println("  Using method bind pointer: ", methodBind)
            
            	// Loop through the given arguments and see what type they are. When we know what
            	// type it is, we need to convert them to the correct godot objects.
            	// TODO: Probably pull this out into its own function?
            	variantArgs := []unsafe.Pointer{}
            	for _, arg := range args {
            		log.Println("  Argument type: ", arg.Type().String())
            
            		// Look up our conversion function in our map of conversion functions
            		// based on the Go type. This is essentially a more optimal case/switch
            		// statement on the type of Go object, so we can know how to convert it
            		// to a Godot object.
            		if convert, ok := goToGodotConversionMap[arg.Type().String()]; ok {
            			argValue := convert(arg.Interface())
            			variantArgs = append(variantArgs, argValue)
            		} else {
                        err := "Unknown type of argument value when calling parent method: " + arg.Type().String()
            			Log.Error(err)
                        panic(err)
            		}
            	}
            	log.Println("  Built variant arguments: ", variantArgs)
            
            	// Construct a C array that will contain pointers to our arguments.
            	log.Println("  Allocating argument array in C.")
            	cArgsArray := C.build_array(C.int(len(variantArgs)))
            	log.Println("    C Array: ", cArgsArray)
            
            	// Loop through and add each argument to our C args array.
            	for i, arg := range variantArgs {
            		C.add_element(cArgsArray, arg, C.int(i))
            	}
            	log.Println("  Built argument array from variant arguments: ", cArgsArray)
            
            	// Construct our return object that will be populated by the method call.
                // Here we're just using a CString
            	log.Println("  Building return value.")
            	ret := unsafe.Pointer(C.CString(""))
            
            	// Call the parent method. "ret" will be populated with the return value.
            	log.Println("  Calling bind_ptrcall...")
            	C.godot_method_bind_ptrcall(
            		methodBind,
            		objectOwner,
                    cArgsArray, // void**
            		ret,        // void*
            	)
            	log.Println("  Finished calling method")
            
            	// Convert the return value based on the type.
            	var retValue reflect.Value
                if _, ok := godotToGoConversionMap[returns]; ok {
                    retValue = godotToGoConversionMap[returns](ret)
                } else {
		            panic("Return type not found when calling parent method: " + returns)
                }
           
            	// Return the converted variant.
            	return retValue
            }

        {{ end }}
        {{ if eq $class.Singleton false -}} 
            /*
            {{ $class.Name }}Implementer is an interface for {{ $class.Name }} objects.
            */
            type {{ $class.Name }}Implementer interface {
                    Class
            }
        {{ end -}}
    {{ end -}}
{{ end }}


// godotToGoConverter is a function that will convert a Godot object into
// a Go object.
type godotToGoConverter func(gdObject unsafe.Pointer) reflect.Value

// godotToGoConversionMap is an internal mapping of Godot types to functions that can
// convert to Go types. This mapping is essentially a more optimal case/switch
// system for converting Godot types to Go types.
var godotToGoConversionMap = map[string]godotToGoConverter{
	"bool": func(gdObject unsafe.Pointer) reflect.Value {
		converted := (*C.godot_bool)(gdObject)
		return reflect.ValueOf(godotBoolAsBool(*converted))
	},
	"int64": func(gdObject unsafe.Pointer) reflect.Value {
        converted := (*C.godot_int)(gdObject)
		return reflect.ValueOf(godotIntAsInt(*converted))
	},
	"uint64": func(gdObject unsafe.Pointer) reflect.Value {
		converted := (*C.uint64_t)(gdObject)
		return reflect.ValueOf(uint64(*converted))
	},
	"float64": func(gdObject unsafe.Pointer) reflect.Value {
		converted := (*C.godot_real)(gdObject)
		return reflect.ValueOf(float64(*converted))
	},
    "string": func(gdObject unsafe.Pointer) reflect.Value {
        converted := (*C.godot_string)(gdObject)
        return reflect.ValueOf(godotStringAsString(converted))
    },
	"*Array": func(gdObject unsafe.Pointer) reflect.Value {
        converted := &Array{}
        converted.array = (*C.godot_array)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Basis": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Basis{}
        converted.basis = (*C.godot_basis)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Color": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Color{}
        converted.color = (*C.godot_color)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Dictionary": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Dictionary{}
        converted.dictionary = (*C.godot_dictionary)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*NodePath": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &NodePath{}
        converted.nodePath = (*C.godot_node_path)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Plane": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Plane{}
        converted.plane = (*C.godot_plane)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Quat": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Quat{}
        converted.quat = (*C.godot_quat)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Rect2": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Rect2{}
        converted.rect2 = (*C.godot_rect2)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Rect3": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Rect3{}
        converted.rect3 = (*C.godot_rect3)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*RID": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &RID{}
        converted.rid = (*C.godot_rid)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Transform": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Transform{}
        converted.transform = (*C.godot_transform)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Transform2D": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Transform2D{}
        converted.transform2d = (*C.godot_transform2d)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Variant": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Variant{}
        converted.variant = (*C.godot_variant)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Vector2": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Vector2{}
        converted.vector2 = (*C.godot_vector2)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Vector3": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Vector3{}
        converted.vector3 = (*C.godot_vector3)(gdObject)
		return reflect.ValueOf(converted)
	},

    {{ range $i, $class := $view.APIs -}}
        {{ if $view.IsValidClass $class.Name $class.BaseClass -}}
            "*{{ $view.SetClassName $class.Name $class.Singleton }}": func(gdObject unsafe.Pointer) reflect.Value {
            	owner := (*C.godot_object)(gdObject)
                goObject := &{{ $view.SetClassName $class.Name $class.Singleton }}{}
                goObject.setOwner(owner)

                return reflect.ValueOf(goObject)
            },
        {{ end }}
    {{ end }}
}
