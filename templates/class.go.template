{{ $view := . -}}
{{ $view.Header }}
{{ $class := index $view.APIs $view.CurrentAPI -}}

package {{ $view.SetPkgBaseClassName $class.Name }}

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
	"log"
	"reflect"
	"github.com/shadowapex/godot-go/godot/classes/class"
	{{ if ne $class.Name "Object" }}
	"github.com/shadowapex/godot-go/godot/classes/{{ $view.SetPkgBaseClassName $class.BaseClass }}"
	{{ end }}
)

{{ if $view.IsValidClass $class.Name $class.BaseClass -}}
    {{ if $class.Singleton -}}
        func newSingleton{{ $view.GoClassName $class.Name }}() *{{ $view.SetClassName $class.Name $class.Singleton}} {
            obj := &{{ $view.SetClassName $class.Name $class.Singleton }}{}
            ptr := C.godot_global_get_singleton(C.CString("{{ $class.Name }}"))
            obj.owner = (*C.godot_object)(ptr)
            return obj
        }
        /*
        {{ $view.ClassDoc $class.Name }}
        */
        var {{ $view.GoClassName $class.Name }} = newSingleton{{ $view.GoClassName $class.Name }}()
    {{ end }}
    /*
    {{ $view.ClassDoc $class.Name }}
    */
    type {{ $view.SetClassName $class.Name $class.Singleton }} struct {
	{{ if ne $class.Name "Object" }}
            {{ $view.SetPkgBaseClassName $class.BaseClass }}.{{ $view.SetBaseClassName $class.BaseClass }}
	{{ end }}
        {{ if eq $class.Name "Object" }}
            owner *C.godot_object
        {{ end }}
    }

    func (o *{{ $view.SetClassName $class.Name $class.Singleton }}) baseClass() string {
        return "{{ $class.Name }}"
    }

    // SetOwner will internally set the Godot object inside the struct.
    // This is used to call parent methods.
    func (o *{{ $view.SetClassName $class.Name $class.Singleton }}) setOwner(object *C.godot_object) {
        o.owner = object
    }
    
    func (o *{{ $view.SetClassName $class.Name $class.Singleton }}) getOwner() *C.godot_object {
        return o.owner
    }

    {{ if $class.Methods }}
        {{ range $j, $method := $class.Methods }}
            /*
            {{ $view.MethodDoc $class.Name $method.Name }}
            */
            func (o *{{ $view.SetClassName $class.Name $class.Singleton }}) {{ $view.GoMethodName $method.Name }}({{ range $k, $arg := $method.Arguments }}{{ $view.GoArgName $arg.Name }} {{ $view.GoValue $arg.Type }},{{ end }}) {{ if $method.ReturnType }}{{ $view.GoValue $method.ReturnType }}{{ end }} {
                log.Println("Calling {{ $class.Name }}.{{ $view.GoMethodName $method.Name }}()")

                // Build out the method's arguments
                goArguments := make([]reflect.Value, {{ len $method.Arguments }}, {{ len $method.Arguments }})
                {{ range $k, $arg := $method.Arguments -}}
                    goArguments[{{ $k }}] = reflect.ValueOf({{ $view.GoArgName $arg.Name }})
                {{ end }}

                // Call the parent method.
                {{ if $method.ReturnType }}
                    {{ $returnType := $view.GoValue $method.ReturnType }}{{ if ne $returnType "" }}
                        goRet := class.CallParentMethod(o, o.baseClass(), "{{ $method.Name }}", goArguments, "{{ if $method.ReturnType }}{{ $view.GoValue $method.ReturnType }}{{ end }}")
                    {{ else }}
                        o.callParentMethod(o.baseClass(), "{{ $method.Name }}", goArguments, "{{ if $method.ReturnType }}{{ $view.GoValue $method.ReturnType }}{{ end }}")
                    {{ end }}
                {{ end -}}
                {{ if $method.ReturnType }}
                    {{ $returnType := $view.GoValue $method.ReturnType }}{{ if ne $returnType "" }}
                        returnValue := goRet.Interface().({{ $view.GoValue $method.ReturnType }})

                        log.Println("  Got return value: ", returnValue)
                        return returnValue
                {{else}}
                    log.Println("  Function successfully completed.")
                    {{ end }}
                {{ end }}
            }
        {{ end }}
    {{ end }}
    {{ if eq $class.Singleton false -}} 
        /*
        {{ $class.Name }}Implementer is an interface for {{ $class.Name }} objects.
        */
        type {{ $class.Name }}Implementer interface {
                class.Class
        }
    {{ end -}}
{{ end -}}
