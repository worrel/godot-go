package godot

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative_api_struct.gen.h>

const extern godot_gdnative_core_api_struct *api;

{{ range $_, $ctype := .CoreTypeMap -}}
{{ $ctype }} *new_{{ $ctype}}();
{{ $ctype }} *new_{{ $ctype}}() {
	return malloc(sizeof({{ $ctype }}));
}
{{ end }}

{{ range .GodotCalls -}}
{{ if eq .ReturnType "String"}}const {{end}} {{- .GodotCallDefC }};
{{ end }}

{{ range .GodotCalls -}}
{{ template "godotcall.c.template" .}}
{{ end }}

*/
import "C"

import (
    {{ if .Debug }}
	"log"
	"fmt"
	{{end}}
	"unsafe"
)

var methodBinds map[string]map[string]*C.godot_method_bind = make(map[string]map[string]*C.godot_method_bind)

func lookupGodotMethod(baseClass string, methodName string) *C.godot_method_bind {
	// Convert the base class and method names to C strings.
	classCString := C.CString(baseClass)
	defer C.free(unsafe.Pointer(classCString))
	methodCString := C.CString(methodName)
	defer C.free(unsafe.Pointer(methodCString))

	// Get the Godot method bind pointer
	var methodBind *C.godot_method_bind
	methodBind = C.godot_method_bind_get_method(classCString, methodCString)
	{{ if .Debug }}log.Println("  Found method bind pointer:", fmt.Sprintf("0x%x", uintptr(unsafe.Pointer(methodBind))), "for", baseClass, "::", methodName){{end}}
	return methodBind
}

func getGodotMethod(baseClass string, methodName string) *C.godot_method_bind {
	if cms, found := methodBinds[baseClass]; found {
		if mb, found := cms[methodName]; found {
			return mb
		}
		mb := lookupGodotMethod(baseClass, methodName)
		cms[methodName] = mb
		return mb
	}
	mb := lookupGodotMethod(baseClass, methodName)
	methodBinds[baseClass] = map[string]*C.godot_method_bind{methodName: mb}
	return mb
}


{{ range .GodotCalls -}}
	{{ template "godotcall.go.template" .}}
{{ end }}