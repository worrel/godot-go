{{ $view := . -}}

func {{ $view.GodotCallDefGo }} {

    {{ range $i, $arg := .Arguments -}}
    {{ if eq "String" $arg.Type -}}
    cArg{{$i}} := C.CString({{$arg.Name}})
    defer C.free(unsafe.Pointer(cArg{{$i}}))
    {{ else -}}
    cArg{{$i}} := {{ template "go2godot.go.template" $arg}}
    {{end -}}
    {{ end }}
    {{ if .HasVarargs -}}
    cVarArgs := {{ template "go2godot.go.template" .Varargs}}
    {{ end -}}
	{{ if $view.Debug -}}
    log.Println("  Calling {{$view.GodotCallNameC}}...")
    {{end -}}
	{{ if ne .ReturnType "void" -}}cRet := {{end -}}
    C.{{$view.GodotCallNameC}}(
        unsafe.Pointer(o.getOwner()),
        getGodotMethod(o.baseClass(), methodName),
        {{ range $i, $arg := .Arguments -}}
        cArg{{ $i }},
        {{- end -}}
        {{ if .HasVarargs -}}
        cVarArgs,
        {{- end}}
	)
    {{ if $view.Debug -}}
    log.Println("  ...{{$view.GodotCallNameC}} returned")
    {{end -}}
    {{ if ne .ReturnType "void" -}}
    {{ if eq "bool" .ReturnType -}}return bool(cRet);
    {{ else if eq "int" .ReturnType -}}return int64(cRet);
    {{ else if eq "float" .ReturnType -}}return float64(cRet);
    {{ else if eq .ReturnType "String" -}}return C.GoString(cRet)
    {{ else -}}
    {{if .IsPointerReturn -}}
    if cRet == nil {
        return nil
    }
    {{end -}}
    ret := ({{if .IsPointerReturn}}*{{end}}C.{{$view.ReturnTypeC}})(cRet)
    return &{{ template "godot2go.go.template" $view.ReturnTypeC }}{ {{if not .IsPointerReturn}}&{{end}}ret }
    {{end -}}
    {{- end}}
}